"""
This type stub file was generated by pyright.
"""

import ctypes
import weakref
import pyglet
from pyglet.gl import *
from pyglet.graphics import shader, vertexdomain
from pyglet.graphics.vertexarray import VertexArray
from pyglet.graphics.vertexbuffer import BufferObject

"""Low-level graphics rendering and abstractions.

This module provides efficient abstractions over OpenGL objects, such as
Shaders and Buffers. It also provides classes for highly performant batched
rendering and grouping.

See the :ref:`guide_graphics` for details on how to use this graphics API.

Batches and groups
==================

Developers can make use of :py:class:`~pyglet.graphics.Batch` and
:py:class:`~pyglet.graphics.Group` objects to improve performance when
rendering a large number of objects.

The :py:class:`~pyglet.sprite.Sprite`, :py:func:`~pyglet.text.Label`,
:py:func:`~pyglet.text.layout.TextLayout`, and other classes all accept a
``batch`` and ``group`` parameter in their constructors. A Batch manages
a set of objects that will be drawn all at once, and a Group can be used
to set OpenGL state and further sort the draw operation.

The following example creates a batch, adds two sprites to the batch, and then
draws the entire batch::
    
    batch = pyglet.graphics.Batch()
    car = pyglet.sprite.Sprite(car_image, batch=batch)
    boat = pyglet.sprite.Sprite(boat_image, batch=batch)
    
    def on_draw()
        batch.draw()

Drawing a complete Batch is much faster than drawing the items in the batch
individually, especially when those items belong to a common group.  

Groups describe the OpenGL state required for an item. This is for the most
part managed by the sprite, text, and other classes, however you can also use
custom groups to ensure items are drawn in a particular order. For example, the
following example adds a background sprite which is guaranteed to be drawn
before the car and the boat::

    batch = pyglet.graphics.Batch()
    background = pyglet.graphics.Group(order=0)
    foreground = pyglet.graphics.Group(order=1)

    background = pyglet.sprite.Sprite(background_image, batch=batch, group=background)
    car = pyglet.sprite.Sprite(car_image, batch=batch, group=foreground)
    boat = pyglet.sprite.Sprite(boat_image, batch=batch, group=foreground)
    
    def on_draw()
        batch.draw()

It's preferable to manage pyglet objects within as few batches as possible. If
the drawing of sprites or text objects need to be interleaved with other
drawing that does not use the graphics API, multiple batches will be required.
"""
_debug_graphics_batch = ...
def draw(size, mode, **data): # -> None:
    """Draw a primitive immediately.

    :warning: This function is deprecated as of 2.0.4, and will be removed
              in the next release.

    :Parameters:
        `size` : int
            Number of vertices given
        `mode` : gl primitive type 
            OpenGL drawing mode, e.g. ``GL_TRIANGLES``, 
            avoiding quotes.
        `**data` : keyword arguments for passing vertex attribute data.
            The keyword should be the vertex attribute name, and the
            argument should be a tuple of (format, data). For example:
            `position=('f', array)`

    """
    ...

def draw_indexed(size, mode, indices, **data): # -> None:
    """Draw a primitive with indexed vertices immediately.

    :warning: This function is deprecated as of 2.0.4, and will be removed
              in the next release.

    :Parameters:
        `size` : int
            Number of vertices given
        `mode` : int
            OpenGL drawing mode, e.g. ``GL_TRIANGLES``
        `indices` : sequence of int
            Sequence of integers giving indices into the vertex list.
        `**data` : keyword arguments for passing vertex attribute data.
            The keyword should be the vertex attribute name, and the
            argument should be a tuple of (format, data). For example:
            `position=('f', array)`

    """
    ...

_vertex_source = ...
_fragment_source = ...
def get_default_batch(): # -> Batch:
    ...

def get_default_group(): # -> ShaderGroup:
    ...

def get_default_shader():
    ...

class Batch:
    """Manage a collection of vertex lists for batched rendering.

    Vertex lists are added to a :py:class:`~pyglet.graphics.Batch` using the
    `add` and `add_indexed` methods. An optional group can be specified along
    with the vertex list, which gives the OpenGL state required for its rendering.
    Vertex lists with shared mode and group are allocated into adjacent areas of
    memory and sent to the graphics card in a single operation.

    Call `VertexList.delete` to remove a vertex list from the batch.
    """
    def __init__(self) -> None:
        """Create a graphics batch."""
        ...
    
    def invalidate(self): # -> None:
        """Force the batch to update the draw list.

        This method can be used to force the batch to re-compute the draw list
        when the ordering of groups has changed.

        .. versionadded:: 1.2
        """
        ...
    
    def migrate(self, vertex_list, mode, group, batch): # -> None:
        """Migrate a vertex list to another batch and/or group.

        `vertex_list` and `mode` together identify the vertex list to migrate.
        `group` and `batch` are new owners of the vertex list after migration.  

        The results are undefined if `mode` is not correct or if `vertex_list`
        does not belong to this batch (they are not checked and will not
        necessarily throw an exception immediately).

        `batch` can remain unchanged if only a group change is desired.
        
        :Parameters:
            `vertex_list` : `~pyglet.graphics.vertexdomain.VertexList`
                A vertex list currently belonging to this batch.
            `mode` : int
                The current GL drawing mode of the vertex list.
            `group` : `~pyglet.graphics.Group`
                The new group to migrate to.
            `batch` : `~pyglet.graphics.Batch`
                The batch to migrate to (or the current batch).

        """
        ...
    
    def get_domain(self, indexed, mode, group, program, attributes): # -> IndexedVertexDomain | VertexDomain:
        ...
    
    def draw(self): # -> None:
        """Draw the batch."""
        ...
    
    def draw_subset(self, vertex_lists): # -> None:
        """Draw only some vertex lists in the batch.

        The use of this method is highly discouraged, as it is quite
        inefficient.  Usually an application can be redesigned so that batches
        can always be drawn in their entirety, using `draw`.

        The given vertex lists must belong to this batch; behaviour is
        undefined if this condition is not met.

        :Parameters:
            `vertex_lists` : sequence of `VertexList` or `IndexedVertexList`
                Vertex lists to draw.

        """
        ...
    


class Group:
    """Group of common OpenGL state.

    Before a VertexList is rendered, its Group's OpenGL state is set.
    This includes binding textures, shaders, or setting any other parameters.
    """
    def __init__(self, order=..., parent=...) -> None:
        """Create a Group.

        :Parameters:
            `order` : int
                Set the order to render above or below other Groups.
            `parent` : `~pyglet.graphics.Group`
                Group to contain this Group; its state will be set before this
                Group's state.

        :Ivariables:
            `visible` : bool
                Determines whether this Group is visible in any of the Batches
                it is assigned to. If False, objects in this Group will not
                be rendered.
            `batches` : list
                Read Only. A list of which Batches this Group is a part of.
        """
        ...
    
    @property
    def order(self): # -> int:
        ...
    
    @property
    def visible(self): # -> bool:
        ...
    
    @visible.setter
    def visible(self, value): # -> None:
        ...
    
    @property
    def batches(self): # -> list[Unknown]:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def set_state(self): # -> None:
        """Apply the OpenGL state change.
        
        The default implementation does nothing."""
        ...
    
    def unset_state(self): # -> None:
        """Repeal the OpenGL state change.
        
        The default implementation does nothing."""
        ...
    
    def set_state_recursive(self): # -> None:
        """Set this group and its ancestry.

        Call this method if you are using a group in isolation: the
        parent groups will be called in top-down order, with this class's
        `set` being called last.
        """
        ...
    
    def unset_state_recursive(self): # -> None:
        """Unset this group and its ancestry.

        The inverse of `set_state_recursive`.
        """
        ...
    


class ShaderGroup(Group):
    """A group that enables and binds a ShaderProgram.
    """
    def __init__(self, program, order=..., parent=...) -> None:
        ...
    
    def set_state(self): # -> None:
        ...
    
    def unset_state(self): # -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    


class TextureGroup(Group):
    """A group that enables and binds a texture.

    TextureGroups are equal if their textures' targets and names are equal.
    """
    def __init__(self, texture, order=..., parent=...) -> None:
        """Create a texture group.

        :Parameters:
            `texture` : `~pyglet.image.Texture`
                Texture to bind.
            `order` : int
                Change the order to render above or below other Groups.
            `parent` : `~pyglet.graphics.Group`
                Parent group.
        """
        ...
    
    def set_state(self): # -> None:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    


