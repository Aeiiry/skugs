"""
This type stub file was generated by pyright.
"""

__all__ = ["Vector"]
class Vector(tuple):
    """A math-like vector.

    Represents an n-dimensional numeric vector. ``Vector`` objects support
    vector addition and subtraction, scalar multiplication and division,
    negation, rounding, and comparison tests.
    """
    __slots__ = ...
    def __new__(cls, values, keep=...): # -> Self@Vector:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __add__(self, other): # -> Generator[Unknown, None, None] | Self@Vector:
        ...
    
    __radd__ = ...
    def __sub__(self, other): # -> Generator[Unknown, None, None] | Self@Vector:
        ...
    
    def __rsub__(self, other): # -> Generator[Unknown, None, None] | Self@Vector:
        ...
    
    def __mul__(self, other): # -> Generator[Unknown, None, None] | Self@Vector:
        ...
    
    __rmul__ = ...
    def __truediv__(self, other): # -> Generator[Unknown, None, None] | Self@Vector:
        ...
    
    def __rtruediv__(self, other): # -> Generator[Unknown, None, None] | Self@Vector:
        ...
    
    def __pos__(self): # -> Generator[Unknown, None, None] | Self@Vector:
        ...
    
    def __neg__(self): # -> Generator[Unknown, None, None] | Self@Vector:
        ...
    
    def __round__(self, *, round=...): # -> Generator[Unknown, None, None] | Self@Vector:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __bool__(self): # -> bool:
        ...
    
    __nonzero__ = ...
    def __abs__(self): # -> float:
        ...
    
    def length(self): # -> float:
        """Return the length of the vector. Equivalent to abs(vector)."""
        ...
    
    def normalized(self): # -> Generator[Unknown, None, None] | Self@Vector:
        """Return the normalized vector of the vector."""
        ...
    
    def dot(self, other): # -> int:
        """Performs vector dot product, returning the sum of
        ``a[0] * b[0], a[1] * b[1], ...``"""
        ...
    
    def toInt(self): # -> Generator[Unknown, None, None] | Self@Vector:
        ...
    
    @property
    def values(self): # -> list[Unknown]:
        ...
    
    @values.setter
    def values(self, values):
        ...
    


