"""
This type stub file was generated by pyright.
"""

NO_VARIATION_INDEX = ...
class OnlineVarStoreBuilder:
    def __init__(self, axisTags) -> None:
        ...
    
    def setModel(self, model): # -> None:
        ...
    
    def setSupports(self, supports): # -> None:
        ...
    
    def finish(self, optimize=...):
        ...
    
    def storeMasters(self, master_values): # -> tuple[Unknown, Unknown | int]:
        ...
    
    def storeDeltas(self, deltas, *, round=...): # -> int:
        ...
    


def VarData_addItem(self, deltas, *, round=...): # -> None:
    ...

def VarRegion_get_support(self, fvar_axes): # -> dict[Unknown, tuple[Unknown, Unknown, Unknown]]:
    ...

def VarStore___bool__(self): # -> bool:
    ...

class VarStoreInstancer:
    def __init__(self, varstore, fvar_axes, location=...) -> None:
        ...
    
    def setLocation(self, location): # -> None:
        ...
    
    @staticmethod
    def interpolateFromDeltasAndScalars(deltas, scalars): # -> float:
        ...
    
    def __getitem__(self, varidx): # -> float:
        ...
    
    def interpolateFromDeltas(self, varDataIndex, deltas): # -> float:
        ...
    


def VarStore_subset_varidxes(self, varIdxes, optimize=..., retainFirstMap=..., advIdxes=...): # -> dict[int, int]:
    ...

def VarStore_prune_regions(self): # -> None:
    """Remove unused VarRegions."""
    ...

def Object_collect_device_varidxes(self, varidxes): # -> None:
    ...

def Object_remap_device_varidxes(self, varidxes_map): # -> None:
    ...

class _Encoding:
    def __init__(self, chars) -> None:
        ...
    
    def append(self, row): # -> None:
        ...
    
    def extend(self, lst): # -> None:
        ...
    
    def get_room(self): # -> int:
        """Maximum number of bytes that can be added to characteristic
        while still being beneficial to merge it into another one."""
        ...
    
    room = ...
    @property
    def gain(self): # -> int:
        """Maximum possible byte gain from merging this into another
        characteristic."""
        ...
    
    def sort_key(self): # -> tuple[int, Unknown]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def can_encode(self, chars): # -> bool:
        ...
    
    def __sub__(self, other): # -> int:
        ...
    


class _EncodingDict(dict):
    def __missing__(self, chars): # -> _Encoding:
        ...
    
    def add_row(self, row): # -> None:
        ...
    


def VarStore_optimize(self, use_NO_VARIATION_INDEX=...): # -> dict[int, int]:
    """Optimize storage. Returns mapping from old VarIdxes to new ones."""
    ...

def main(args=...): # -> None:
    """Optimize a font's GDEF variation store"""
    ...

if __name__ == "__main__":
    ...
