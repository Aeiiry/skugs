"""
This type stub file was generated by pyright.
"""

from fontTools.ttLib.tables import otBase as otBase, otTables as ot

"""
Merge OpenType Layout tables (GDEF / GPOS / GSUB).
"""
log = ...
class Merger:
    def __init__(self, font=...) -> None:
        ...
    
    @classmethod
    def merger(celf, clazzes, attrs=...): # -> (method: Unknown) -> None:
        ...
    
    @classmethod
    def mergersFor(celf, thing, _default=...):
        ...
    
    def mergeObjects(self, out, lst, exclude=...): # -> None:
        ...
    
    def mergeLists(self, out, lst): # -> None:
        ...
    
    def mergeThings(self, out, lst): # -> None:
        ...
    
    def mergeTables(self, font, master_ttfs, tableTags): # -> None:
        ...
    


class AligningMerger(Merger):
    ...


@AligningMerger.merger(ot.GDEF, "GlyphClassDef")
def merge(merger, self, lst): # -> None:
    ...

@AligningMerger.merger(otBase.ValueRecord)
def merge(merger, self, lst): # -> None:
    ...

@AligningMerger.merger(ot.Anchor)
def merge(merger, self, lst): # -> None:
    ...

@AligningMerger.merger(ot.SinglePos)
def merge(merger, self, lst): # -> None:
    ...

@AligningMerger.merger(ot.PairSet)
def merge(merger, self, lst): # -> None:
    ...

@AligningMerger.merger(ot.PairPos)
def merge(merger, self, lst): # -> None:
    ...

@AligningMerger.merger(ot.MarkBasePos)
def merge(merger, self, lst): # -> None:
    ...

@AligningMerger.merger(ot.MarkMarkPos)
def merge(merger, self, lst): # -> None:
    ...

@AligningMerger.merger(ot.Lookup)
def merge(merger, self, lst): # -> None:
    ...

class InstancerMerger(AligningMerger):
    """A merger that takes multiple master fonts, and instantiates
    an instance."""
    def __init__(self, font, model, location) -> None:
        ...
    


@InstancerMerger.merger(ot.CaretValue)
def merge(merger, self, lst): # -> None:
    ...

@InstancerMerger.merger(ot.Anchor)
def merge(merger, self, lst): # -> None:
    ...

@InstancerMerger.merger(otBase.ValueRecord)
def merge(merger, self, lst): # -> None:
    ...

class MutatorMerger(AligningMerger):
    """A merger that takes a variable font, and instantiates
    an instance.  While there's no "merging" to be done per se,
    the operation can benefit from many operations that the
    aligning merger does."""
    def __init__(self, font, instancer, deleteVariations=...) -> None:
        ...
    


@MutatorMerger.merger(ot.CaretValue)
def merge(merger, self, lst): # -> None:
    ...

@MutatorMerger.merger(ot.Anchor)
def merge(merger, self, lst): # -> None:
    ...

@MutatorMerger.merger(otBase.ValueRecord)
def merge(merger, self, lst): # -> None:
    ...

class VariationMerger(AligningMerger):
    """A merger that takes multiple master fonts, and builds a
    variable font."""
    def __init__(self, model, axisTags, font) -> None:
        ...
    
    def setModel(self, model): # -> None:
        ...
    
    def mergeThings(self, out, lst): # -> None:
        ...
    


def buildVarDevTable(store_builder, master_values): # -> tuple[Unknown, None] | tuple[Unknown, Unknown]:
    ...

@VariationMerger.merger(ot.BaseCoord)
def merge(merger, self, lst): # -> None:
    ...

@VariationMerger.merger(ot.CaretValue)
def merge(merger, self, lst): # -> None:
    ...

@VariationMerger.merger(ot.Anchor)
def merge(merger, self, lst): # -> None:
    ...

@VariationMerger.merger(otBase.ValueRecord)
def merge(merger, self, lst): # -> None:
    ...

class COLRVariationMerger(VariationMerger):
    """A specialized VariationMerger that takes multiple master fonts containing
    COLRv1 tables, and builds a variable COLR font.

    COLR tables are special in that variable subtables can be associated with
    multiple delta-set indices (via VarIndexBase).
    They also contain tables that must change their type (not simply the Format)
    as they become variable (e.g. Affine2x3 -> VarAffine2x3) so this merger takes
    care of that too.
    """
    def __init__(self, model, axisTags, font, allowLayerReuse=...) -> None:
        ...
    
    def mergeTables(self, font, master_ttfs, tableTags=...): # -> None:
        ...
    
    def checkFormatEnum(self, out, lst, validate=...):
        ...
    
    def mergeSparseDict(self, out, lst): # -> None:
        ...
    
    def mergeAttrs(self, out, lst, attrs): # -> None:
        ...
    
    def storeMastersForAttr(self, out, lst, attr): # -> tuple[Unknown | int | Any, Unknown | int]:
        ...
    
    def storeVariationIndices(self, varIdxes) -> int:
        ...
    
    def mergeVariableAttrs(self, out, lst, attrs) -> int:
        ...
    
    @classmethod
    def convertSubTablesToVarType(cls, table): # -> None:
        ...
    
    @staticmethod
    def expandPaintColrLayers(colr): # -> None:
        """Rebuild LayerList without PaintColrLayers reuse.

        Each base paint graph is fully DFS-traversed (with exception of PaintColrGlyph
        which are irrelevant for this); any layers referenced via PaintColrLayers are
        collected into a new LayerList and duplicated when reuse is detected, to ensure
        that all paints are distinct objects at the end of the process.
        PaintColrLayers's FirstLayerIndex/NumLayers are updated so that no overlap
        is left. Also, any consecutively nested PaintColrLayers are flattened.
        The COLR table's LayerList is replaced with the new unique layers.
        A side effect is also that any layer from the old LayerList which is not
        referenced by any PaintColrLayers is dropped.
        """
        ...
    


@COLRVariationMerger.merger(ot.BaseGlyphList)
def merge(merger, self, lst): # -> None:
    ...

@COLRVariationMerger.merger(ot.LayerList)
def merge(merger, self, lst): # -> None:
    ...

@COLRVariationMerger.merger((ot.Paint, ot.ClipBox))
def merge(merger, self, lst): # -> None:
    ...

@COLRVariationMerger.merger((ot.Affine2x3, ot.ColorStop))
def merge(merger, self, lst): # -> None:
    ...

@COLRVariationMerger.merger(ot.ColorLine)
def merge(merger, self, lst): # -> None:
    ...

@COLRVariationMerger.merger(ot.ClipList, "clips")
def merge(merger, self, lst): # -> None:
    ...

