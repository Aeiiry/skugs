"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from collections.abc import Mapping
from contextlib import contextmanager
from fontTools.misc.loggingTools import deprecateFunction

"""GlyphSets returned by a TTFont."""
class _TTGlyphSet(Mapping):
    """Generic dict-like GlyphSet class that pulls metrics from hmtx and
    glyph shape from TrueType or CFF.
    """
    def __init__(self, font, location, glyphsMapping) -> None:
        ...
    
    @contextmanager
    def pushLocation(self, location, reset: bool): # -> Generator[None, None, None]:
        ...
    
    @contextmanager
    def pushDepth(self): # -> Generator[int, None, None]:
        ...
    
    def __contains__(self, glyphName): # -> bool:
        ...
    
    def __iter__(self):
        ...
    
    def __len__(self): # -> int:
        ...
    
    @deprecateFunction("use 'glyphName in glyphSet' instead", category=DeprecationWarning)
    def has_key(self, glyphName): # -> bool:
        ...
    


class _TTGlyphSetGlyf(_TTGlyphSet):
    def __init__(self, font, location) -> None:
        ...
    
    def __getitem__(self, glyphName): # -> _TTGlyphGlyf:
        ...
    


class _TTGlyphSetCFF(_TTGlyphSet):
    def __init__(self, font, location) -> None:
        ...
    
    def __getitem__(self, glyphName): # -> _TTGlyphCFF:
        ...
    


class _TTGlyph(ABC):
    """Glyph object that supports the Pen protocol, meaning that it has
    .draw() and .drawPoints() methods that take a pen object as their only
    argument. Additionally there are 'width' and 'lsb' attributes, read from
    the 'hmtx' table.

    If the font contains a 'vmtx' table, there will also be 'height' and 'tsb'
    attributes.
    """
    def __init__(self, glyphSet, glyphName) -> None:
        ...
    
    @abstractmethod
    def draw(self, pen):
        """Draw the glyph onto ``pen``. See fontTools.pens.basePen for details
        how that works.
        """
        ...
    
    def drawPoints(self, pen): # -> None:
        """Draw the glyph onto ``pen``. See fontTools.pens.pointPen for details
        how that works.
        """
        ...
    


class _TTGlyphGlyf(_TTGlyph):
    def draw(self, pen): # -> None:
        """Draw the glyph onto ``pen``. See fontTools.pens.basePen for details
        how that works.
        """
        ...
    
    def drawPoints(self, pen): # -> None:
        """Draw the glyph onto ``pen``. See fontTools.pens.pointPen for details
        how that works.
        """
        ...
    


class _TTGlyphCFF(_TTGlyph):
    def draw(self, pen): # -> None:
        """Draw the glyph onto ``pen``. See fontTools.pens.basePen for details
        how that works.
        """
        ...
    


