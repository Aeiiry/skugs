"""
This type stub file was generated by pyright.
"""

import fontTools.ttLib as ttLib
import fontTools.ttLib.tables.otTables as otTables
from fontTools.ttLib.ttVisitor import TTVisitor

"""Change the units-per-EM of a font.

AAT and Graphite tables are not supported. CFF/CFF2 fonts
are de-subroutinized."""
__all__ = ["scale_upem", "ScalerVisitor"]
class ScalerVisitor(TTVisitor):
    def __init__(self, scaleFactor) -> None:
        ...
    
    def scale(self, v): # -> int:
        ...
    


@ScalerVisitor.register_attrs(((ttLib.getTableClass("head"), ("unitsPerEm", "xMin", "yMin", "xMax", "yMax")), (ttLib.getTableClass("post"), ("underlinePosition", "underlineThickness")), (ttLib.getTableClass("VORG"), "defaultVertOriginY"), (ttLib.getTableClass("hhea"), ("ascent", "descent", "lineGap", "advanceWidthMax", "minLeftSideBearing", "minRightSideBearing", "xMaxExtent", "caretOffset")), (ttLib.getTableClass("vhea"), ("ascent", "descent", "lineGap", "advanceHeightMax", "minTopSideBearing", "minBottomSideBearing", "yMaxExtent", "caretOffset")), (ttLib.getTableClass("OS/2"), ("xAvgCharWidth", "ySubscriptXSize", "ySubscriptYSize", "ySubscriptXOffset", "ySubscriptYOffset", "ySuperscriptXSize", "ySuperscriptYSize", "ySuperscriptXOffset", "ySuperscriptYOffset", "yStrikeoutSize", "yStrikeoutPosition", "sTypoAscender", "sTypoDescender", "sTypoLineGap", "usWinAscent", "usWinDescent", "sxHeight", "sCapHeight")), (otTables.ValueRecord, ("XAdvance", "YAdvance", "XPlacement", "YPlacement")), (otTables.Anchor, ("XCoordinate", "YCoordinate")), (otTables.CaretValue, "Coordinate"), (otTables.BaseCoord, "Coordinate"), (otTables.MathValueRecord, "Value"), (otTables.ClipBox, ("xMin", "yMin", "xMax", "yMax"))))
def visit(visitor, obj, attr, value): # -> None:
    ...

@ScalerVisitor.register_attr((ttLib.getTableClass("hmtx"), ttLib.getTableClass("vmtx")), "metrics")
def visit(visitor, obj, attr, metrics): # -> None:
    ...

@ScalerVisitor.register_attr(ttLib.getTableClass("VMTX"), "VOriginRecords")
def visit(visitor, obj, attr, VOriginRecords): # -> None:
    ...

@ScalerVisitor.register_attr(ttLib.getTableClass("glyf"), "glyphs")
def visit(visitor, obj, attr, glyphs): # -> None:
    ...

@ScalerVisitor.register_attr(ttLib.getTableClass("gvar"), "variations")
def visit(visitor, obj, attr, variations): # -> None:
    ...

@ScalerVisitor.register_attr(ttLib.getTableClass("kern"), "kernTables")
def visit(visitor, obj, attr, kernTables): # -> None:
    ...

@ScalerVisitor.register_attr((ttLib.getTableClass("CFF "), ttLib.getTableClass("CFF2")), "cff")
def visit(visitor, obj, attr, cff): # -> None:
    ...

@ScalerVisitor.register(otTables.VarData)
def visit(visitor, varData): # -> None:
    ...

@ScalerVisitor.register(otTables.BaseGlyphPaintRecord)
def visit(visitor, record): # -> Literal[True]:
    ...

@ScalerVisitor.register(otTables.Paint)
def visit(visitor, paint): # -> bool:
    ...

def scale_upem(font, new_upem): # -> None:
    """Change the units-per-EM of font to the new value."""
    ...

def main(args=...): # -> None:
    """Change the units-per-EM of fonts"""
    ...

if __name__ == "__main__":
    ...
