[
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\calendar.py",
        "line": 60,
        "func_name": "_localized_month.__getitem__",
        "type_comments": [
            "(int) -> str"
        ],
        "samples": 7
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\calendar.py",
        "line": 79,
        "func_name": "_localized_day.__getitem__",
        "type_comments": [
            "(int) -> str"
        ],
        "samples": 7
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\contextlib.py",
        "line": 104,
        "func_name": "_GeneratorContextManagerBase.__init__",
        "type_comments": [
            "(function, Tuple[_pytest.capture.CaptureManager, str, _pytest.python.Function], Dict) -> None",
            "(function, Tuple[loguru._handler.Handler], Dict) -> None"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\contextlib.py",
        "line": 132,
        "func_name": "_GeneratorContextManager.__enter__",
        "type_comments": [
            "() -> None"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\contextlib.py",
        "line": 141,
        "func_name": "_GeneratorContextManager.__exit__",
        "type_comments": [
            "(None, None, None) -> bool"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\contextlib.py",
        "line": 287,
        "func_name": "helper",
        "type_comments": [
            "(*Union[_pytest.capture.CaptureManager, _pytest.python.Function, str]) -> contextlib._GeneratorContextManager",
            "(*loguru._handler.Handler) -> contextlib._GeneratorContextManager"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\contextlib.py",
        "line": 428,
        "func_name": "suppress.__init__",
        "type_comments": [
            "(*type) -> None"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\contextlib.py",
        "line": 431,
        "func_name": "suppress.__enter__",
        "type_comments": [
            "() -> None"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\contextlib.py",
        "line": 434,
        "func_name": "suppress.__exit__",
        "type_comments": [
            "(None, None, None) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\copy.py",
        "line": 66,
        "func_name": "copy",
        "type_comments": [
            "(Dict[int, numpy.ndarray]) -> Dict[int, numpy.ndarray]",
            "(None) -> None"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\copy.py",
        "line": 107,
        "func_name": "_copy_immutable",
        "type_comments": [
            "(None) -> None"
        ],
        "samples": 4
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\copyreg.py",
        "line": 113,
        "func_name": "_slotnames",
        "type_comments": [
            "() -> List"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\dataclasses.py",
        "line": 1249,
        "func_name": "is_dataclass",
        "type_comments": [
            "(List[float]) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\enum.py",
        "line": 192,
        "func_name": "property.__get__",
        "type_comments": [
            "(pandas.io.parsers.base_parser:ParserBase.BadLineHandleMethod, enum.EnumType) -> int",
            "(re.RegexFlag, enum.EnumType) -> int"
        ],
        "samples": 9
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\enum.py",
        "line": 688,
        "func_name": "__call__",
        "type_comments": [
            "(int, None, None, None, None, int, None) -> re.RegexFlag"
        ],
        "samples": 7
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\enum.py",
        "line": 1093,
        "func_name": "__new__",
        "type_comments": [
            "(int) -> re.RegexFlag"
        ],
        "samples": 7
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\enum.py",
        "line": 1245,
        "func_name": "value",
        "type_comments": [
            "() -> int"
        ],
        "samples": 9
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\enum.py",
        "line": 1501,
        "func_name": "RegexFlag.__and__",
        "type_comments": [
            "(int) -> re.RegexFlag"
        ],
        "samples": 7
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\fnmatch.py",
        "line": 19,
        "func_name": "fnmatch",
        "type_comments": [
            "(str, str) -> bool"
        ],
        "samples": 2
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\fnmatch.py",
        "line": 38,
        "func_name": "_compile_pattern",
        "type_comments": [
            "(str) -> builtin_method"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\fnmatch.py",
        "line": 48,
        "func_name": "filter",
        "type_comments": [
            "(List[str], str) -> List[str]"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\fnmatch.py",
        "line": 64,
        "func_name": "fnmatchcase",
        "type_comments": [
            "(str, str) -> bool"
        ],
        "samples": 2
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\fnmatch.py",
        "line": 74,
        "func_name": "translate",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\functools.py",
        "line": 35,
        "func_name": "update_wrapper",
        "type_comments": [
            "(functools._lru_cache_wrapper, function, Tuple[str, str, str, str, str], Tuple[str]) -> functools._lru_cache_wrapper"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\functools.py",
        "line": 421,
        "func_name": "_unwrap_partial",
        "type_comments": [
            "(function) -> function"
        ],
        "samples": 2
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\functools.py",
        "line": 479,
        "func_name": "lru_cache",
        "type_comments": [
            "(None, bool) -> function"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\functools.py",
        "line": 518,
        "func_name": "decorating_function",
        "type_comments": [
            "(function) -> functools._lru_cache_wrapper"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\functools.py",
        "line": 651,
        "func_name": "cache",
        "type_comments": [
            "(function) -> functools._lru_cache_wrapper"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\importlib\\__init__.py",
        "line": 108,
        "func_name": "import_module",
        "type_comments": [
            "(str, None) -> pyannotate_runtime.collect_types.NoReturnType",
            "(str, None) -> module"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\inspect.py",
        "line": 283,
        "func_name": "ismodule",
        "type_comments": [
            "(frame) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\inspect.py",
        "line": 292,
        "func_name": "isclass",
        "type_comments": [
            "(str) -> bool",
            "(type) -> bool",
            "(frame) -> bool"
        ],
        "samples": 7
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\inspect.py",
        "line": 300,
        "func_name": "ismethod",
        "type_comments": [
            "(function) -> bool",
            "(frame) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\inspect.py",
        "line": 378,
        "func_name": "isfunction",
        "type_comments": [
            "(function) -> bool",
            "(frame) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\inspect.py",
        "line": 391,
        "func_name": "_has_code_flag",
        "type_comments": [
            "(function, int) -> bool"
        ],
        "samples": 2
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\inspect.py",
        "line": 409,
        "func_name": "iscoroutinefunction",
        "type_comments": [
            "(function) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\inspect.py",
        "line": 416,
        "func_name": "isasyncgenfunction",
        "type_comments": [
            "(function) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\inspect.py",
        "line": 456,
        "func_name": "istraceback",
        "type_comments": [
            "(frame) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\inspect.py",
        "line": 466,
        "func_name": "isframe",
        "type_comments": [
            "(frame) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\inspect.py",
        "line": 480,
        "func_name": "iscode",
        "type_comments": [
            "(code) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\inspect.py",
        "line": 896,
        "func_name": "getfile",
        "type_comments": [
            "(frame) -> str"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\inspect.py",
        "line": 1749,
        "func_name": "currentframe",
        "type_comments": [
            "() -> frame"
        ],
        "samples": 4
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py",
        "line": 228,
        "func_name": "_acquireLock",
        "type_comments": [
            "() -> None"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py",
        "line": 237,
        "func_name": "_releaseLock",
        "type_comments": [
            "() -> None"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py",
        "line": 1646,
        "func_name": "Logger.addHandler",
        "type_comments": [
            "(_pytest.logging.LogCaptureHandler) -> None"
        ],
        "samples": 4
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py",
        "line": 1657,
        "func_name": "Logger.removeHandler",
        "type_comments": [
            "(_pytest.logging.LogCaptureHandler) -> None"
        ],
        "samples": 4
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py",
        "line": 2081,
        "func_name": "getLogger",
        "type_comments": [
            "(None) -> logging.RootLogger"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\connection.py",
        "line": 134,
        "func_name": "_ConnectionBase._check_closed",
        "type_comments": [
            "() -> None"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\connection.py",
        "line": 142,
        "func_name": "_ConnectionBase._check_writable",
        "type_comments": [
            "() -> None"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\connection.py",
        "line": 181,
        "func_name": "_ConnectionBase.send_bytes",
        "type_comments": [
            "(memoryview, int, None) -> None"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\connection.py",
        "line": 278,
        "func_name": "PipeConnection._send_bytes",
        "type_comments": [
            "(memoryview) -> None"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\process.py",
        "line": 37,
        "func_name": "current_process",
        "type_comments": [
            "() -> multiprocessing.process._MainProcess"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\process.py",
        "line": 99,
        "func_name": "BaseProcess._check_closed",
        "type_comments": [
            "() -> None"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\process.py",
        "line": 189,
        "func_name": "name",
        "type_comments": [
            "() -> str"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\process.py",
        "line": 234,
        "func_name": "ident",
        "type_comments": [
            "() -> int"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\queues.py",
        "line": 369,
        "func_name": "SimpleQueue.put",
        "type_comments": [
            "(loguru._handler.Message) -> None"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\reduction.py",
        "line": 38,
        "func_name": "ForkingPickler.__init__",
        "type_comments": [
            "(*Optional[_io.BytesIO]) -> None"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\multiprocessing\\reduction.py",
        "line": 48,
        "func_name": "dumps",
        "type_comments": [
            "(loguru._handler.Message, None) -> memoryview"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 56,
        "func_name": "_Flavour.parse_parts",
        "type_comments": [
            "(List[str]) -> Tuple[str, str, List[str]]"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 147,
        "func_name": "_WindowsFlavour.splitroot",
        "type_comments": [
            "(str, str) -> Tuple[str, str, str]"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 469,
        "func_name": "__new__",
        "type_comments": [
            "(*str) -> pathlib.PureWindowsPath",
            "(*pathlib.PureWindowsPath) -> pathlib.PureWindowsPath"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 484,
        "func_name": "_parse_args",
        "type_comments": [
            "(Tuple[str]) -> Tuple[str, str, List[str]]",
            "(Tuple[pathlib.PureWindowsPath]) -> Tuple[str, str, List[str]]"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 504,
        "func_name": "_from_parts",
        "type_comments": [
            "(Tuple[str]) -> pathlib.PureWindowsPath",
            "(Tuple[pathlib.PureWindowsPath]) -> pathlib.PureWindowsPath"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 515,
        "func_name": "_from_parsed_parts",
        "type_comments": [
            "(str, str, List[str]) -> pathlib.PureWindowsPath"
        ],
        "samples": 1
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 523,
        "func_name": "_format_parsed_parts",
        "type_comments": [
            "(str, str, List[str]) -> str"
        ],
        "samples": 2
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 536,
        "func_name": "PurePath.__str__",
        "type_comments": [
            "() -> str"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 546,
        "func_name": "PurePath.__fspath__",
        "type_comments": [
            "() -> str"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 569,
        "func_name": "_cparts",
        "type_comments": [
            "() -> List[str]"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 578,
        "func_name": "PurePath.__eq__",
        "type_comments": [
            "(pathlib.WindowsPath) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 583,
        "func_name": "PurePath.__hash__",
        "type_comments": [
            "() -> int"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 622,
        "func_name": "name",
        "type_comments": [
            "() -> str"
        ],
        "samples": 4
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 630,
        "func_name": "suffix",
        "type_comments": [
            "() -> str"
        ],
        "samples": 1
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py",
        "line": 682,
        "func_name": "PurePath.with_suffix",
        "type_comments": [
            "(str) -> pathlib.PureWindowsPath"
        ],
        "samples": 1
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\__init__.py",
        "line": 173,
        "func_name": "search",
        "type_comments": [
            "(str, str, int) -> re.Match",
            "(re.Pattern, str, int) -> None",
            "(str, str, re.RegexFlag) -> None",
            "(str, str, int) -> None"
        ],
        "samples": 13
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\__init__.py",
        "line": 178,
        "func_name": "sub",
        "type_comments": [
            "(str, str, str, int, int) -> str"
        ],
        "samples": 32
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\__init__.py",
        "line": 225,
        "func_name": "compile",
        "type_comments": [
            "(str, int) -> re.Pattern",
            "(str, re.RegexFlag) -> re.Pattern"
        ],
        "samples": 11
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\__init__.py",
        "line": 253,
        "func_name": "escape",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\__init__.py",
        "line": 272,
        "func_name": "_compile",
        "type_comments": [
            "(re.Pattern, int) -> re.Pattern",
            "(str, int) -> re.Pattern",
            "(str, re.RegexFlag) -> re.Pattern"
        ],
        "samples": 47
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\__init__.py",
        "line": 305,
        "func_name": "_compile_repl",
        "type_comments": [
            "(str, re.Pattern) -> Tuple[List[Tuple[int, int]], List]"
        ],
        "samples": 1
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\__init__.py",
        "line": 315,
        "func_name": "_subx",
        "type_comments": [
            "(re.Pattern, str) -> function"
        ],
        "samples": 12
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_compiler.py",
        "line": 31,
        "func_name": "_combine_flags",
        "type_comments": [
            "(int, int, int, int) -> int"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_compiler.py",
        "line": 37,
        "func_name": "_compile",
        "type_comments": [
            "(List[Union[int, re._constants._NamedIntConstant]], re._parser.SubPattern, int) -> None",
            "(List[Union[int, re._constants._NamedIntConstant]], List[Union[Tuple[re._constants._NamedIntConstant, Tuple[None, int, int, re._parser.SubPattern]], Tuple[re._constants._NamedIntConstant, re._constants._NamedIntConstant]]], int) -> pyannotate_runtime.collect_types.UnknownType",
            "(List[Union[int, re._constants._NamedIntConstant]], re._parser.SubPattern, int) -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 9
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_compiler.py",
        "line": 214,
        "func_name": "_compile_charset",
        "type_comments": [
            "(List[Tuple[re._constants._NamedIntConstant, int]], int, List[Union[int, re._constants._NamedIntConstant]]) -> None",
            "(List[Tuple[re._constants._NamedIntConstant, re._constants._NamedIntConstant]], int, List[Union[int, re._constants._NamedIntConstant]]) -> None"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_compiler.py",
        "line": 241,
        "func_name": "_optimize_charset",
        "type_comments": [
            "(List[Tuple[re._constants._NamedIntConstant, int]], None, None, None) -> Tuple[List[Tuple[re._constants._NamedIntConstant, int]], bool]",
            "(List[Tuple[re._constants._NamedIntConstant, re._constants._NamedIntConstant]], None, None, None) -> Tuple[List[Tuple[re._constants._NamedIntConstant, re._constants._NamedIntConstant]], bool]"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_compiler.py",
        "line": 396,
        "func_name": "_simple",
        "type_comments": [
            "(re._parser.SubPattern) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_compiler.py",
        "line": 405,
        "func_name": "_generate_overlap_table",
        "type_comments": [
            "(List[int]) -> List[int]"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_compiler.py",
        "line": 426,
        "func_name": "_get_iscased",
        "type_comments": [
            "(int) -> builtin_function_or_method",
            "(int) -> None"
        ],
        "samples": 7
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_compiler.py",
        "line": 434,
        "func_name": "_get_literal_prefix",
        "type_comments": [
            "(re._parser.SubPattern, int) -> Tuple[List, None, bool]",
            "(re._parser.SubPattern, int) -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_compiler.py",
        "line": 465,
        "func_name": "_get_charset_prefix",
        "type_comments": [
            "(re._parser.SubPattern, int) -> List[Tuple[re._constants._NamedIntConstant, int]]",
            "(re._parser.SubPattern, int) -> None"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_compiler.py",
        "line": 509,
        "func_name": "_compile_info",
        "type_comments": [
            "(List, re._parser.SubPattern, int) -> None"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_compiler.py",
        "line": 568,
        "func_name": "isstring",
        "type_comments": [
            "(str) -> bool"
        ],
        "samples": 7
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_compiler.py",
        "line": 571,
        "func_name": "_code",
        "type_comments": [
            "(re._parser.SubPattern, int) -> List[Union[int, re._constants._NamedIntConstant]]"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_compiler.py",
        "line": 738,
        "func_name": "compile",
        "type_comments": [
            "(str, int) -> re.Pattern"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 73,
        "func_name": "State.__init__",
        "type_comments": [
            "() -> None"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 79,
        "func_name": "groups",
        "type_comments": [
            "() -> int"
        ],
        "samples": 7
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 82,
        "func_name": "State.opengroup",
        "type_comments": [
            "(None) -> int"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 94,
        "func_name": "State.closegroup",
        "type_comments": [
            "(int, re._parser.SubPattern) -> None"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 109,
        "func_name": "SubPattern.__init__",
        "type_comments": [
            "(re._parser.State, List[Tuple[re._constants._NamedIntConstant, List[Tuple[re._constants._NamedIntConstant, re._constants._NamedIntConstant]]]]) -> None",
            "(re._parser.State, None) -> None",
            "(re._parser.State, List[Tuple[re._constants._NamedIntConstant, None]]) -> None"
        ],
        "samples": 10
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 158,
        "func_name": "SubPattern.__len__",
        "type_comments": [
            "() -> int"
        ],
        "samples": 16
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 162,
        "func_name": "SubPattern.__getitem__",
        "type_comments": [
            "(int) -> pyannotate_runtime.collect_types.NoReturnType",
            "(int) -> Tuple[re._constants._NamedIntConstant, int]",
            "(int) -> Tuple[re._constants._NamedIntConstant, re._constants._NamedIntConstant]",
            "(slice) -> re._parser.SubPattern",
            "(int) -> Tuple[re._constants._NamedIntConstant, None]",
            "(int) -> Tuple[re._constants._NamedIntConstant, Tuple[int, re._constants._NamedIntConstant, re._parser.SubPattern]]",
            "(int) -> Tuple[re._constants._NamedIntConstant, Tuple[None, List[re._parser.SubPattern]]]",
            "(int) -> Tuple[re._constants._NamedIntConstant, Tuple[int, int, int, re._parser.SubPattern]]"
        ],
        "samples": 32
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 166,
        "func_name": "SubPattern.__setitem__",
        "type_comments": [
            "(slice, re._parser.SubPattern) -> None",
            "(int, Tuple[re._constants._NamedIntConstant, Tuple[int, re._constants._NamedIntConstant, re._parser.SubPattern]]) -> None",
            "(int, Tuple[re._constants._NamedIntConstant, Tuple[int, int, re._parser.SubPattern]]) -> None"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 170,
        "func_name": "SubPattern.append",
        "type_comments": [
            "(Tuple[re._constants._NamedIntConstant, Tuple[None, List[re._parser.SubPattern]]]) -> None",
            "(Tuple[re._constants._NamedIntConstant, List[Tuple[re._constants._NamedIntConstant, re._constants._NamedIntConstant]]]) -> None",
            "(Tuple[re._constants._NamedIntConstant, re._constants._NamedIntConstant]) -> None",
            "(Tuple[re._constants._NamedIntConstant, None]) -> None",
            "(Tuple[re._constants._NamedIntConstant, int]) -> None",
            "(Tuple[re._constants._NamedIntConstant, Tuple[None, int, int, re._parser.SubPattern]]) -> None"
        ],
        "samples": 16
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 172,
        "func_name": "SubPattern.getwidth",
        "type_comments": [
            "() -> Tuple[int, int]",
            "() -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 9
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 222,
        "func_name": "Tokenizer.__init__",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 231,
        "func_name": "__next",
        "type_comments": [
            "() -> None"
        ],
        "samples": 23
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 247,
        "func_name": "Tokenizer.match",
        "type_comments": [
            "(str) -> bool"
        ],
        "samples": 13
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 252,
        "func_name": "Tokenizer.get",
        "type_comments": [
            "() -> str"
        ],
        "samples": 17
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 284,
        "func_name": "Tokenizer.tell",
        "type_comments": [
            "() -> int"
        ],
        "samples": 9
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 307,
        "func_name": "_class_escape",
        "type_comments": [
            "(re._parser.Tokenizer, str) -> Tuple[re._constants._NamedIntConstant, List[Tuple[re._constants._NamedIntConstant, re._constants._NamedIntConstant]]]"
        ],
        "samples": 1
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 367,
        "func_name": "_escape",
        "type_comments": [
            "(re._parser.Tokenizer, str, re._parser.State) -> Tuple[re._constants._NamedIntConstant, int]",
            "(re._parser.Tokenizer, str, re._parser.State) -> Tuple[re._constants._NamedIntConstant, re._constants._NamedIntConstant]"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 444,
        "func_name": "_uniq",
        "type_comments": [
            "(List[Tuple[re._constants._NamedIntConstant, int]]) -> List[Tuple[re._constants._NamedIntConstant, int]]",
            "(List[Tuple[re._constants._NamedIntConstant, re._constants._NamedIntConstant]]) -> List[Tuple[re._constants._NamedIntConstant, re._constants._NamedIntConstant]]"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 447,
        "func_name": "_parse_sub",
        "type_comments": [
            "(re._parser.Tokenizer, re._parser.State, int, int) -> re._parser.SubPattern",
            "(re._parser.Tokenizer, re._parser.State, int, int) -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 507,
        "func_name": "_parse",
        "type_comments": [
            "(re._parser.Tokenizer, re._parser.State, int, int, bool) -> re._parser.SubPattern",
            "(re._parser.Tokenizer, re._parser.State, int, int, bool) -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 8
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 894,
        "func_name": "_parse_flags",
        "type_comments": [
            "(re._parser.Tokenizer, re._parser.State, str) -> Tuple[int, int]"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 954,
        "func_name": "fix_flags",
        "type_comments": [
            "(str, int) -> int"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 970,
        "func_name": "parse",
        "type_comments": [
            "(str, int, None) -> re._parser.SubPattern"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 997,
        "func_name": "parse_template",
        "type_comments": [
            "(str, re.Pattern) -> Tuple[List[Tuple[int, int]], List]"
        ],
        "samples": 1
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\re\\_parser.py",
        "line": 1006,
        "func_name": "addgroup",
        "type_comments": [
            "(int, int) -> None"
        ],
        "samples": 1
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\tempfile.py",
        "line": 473,
        "func_name": "_TemporaryFileWrapper.__getattr__",
        "type_comments": [
            "(str) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\tempfile.py",
        "line": 481,
        "func_name": "func_wrapper",
        "type_comments": [
            "() -> bytes",
            "(*int) -> int",
            "() -> None"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\threading.py",
        "line": 1145,
        "func_name": "name",
        "type_comments": [
            "() -> str"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\threading.py",
        "line": 1161,
        "func_name": "ident",
        "type_comments": [
            "() -> int"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\threading.py",
        "line": 1446,
        "func_name": "current_thread",
        "type_comments": [
            "() -> threading._MainThread"
        ],
        "samples": 6
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 159,
        "func_name": "_type_convert",
        "type_comments": [
            "(typing._SpecialGenericAlias, None, bool) -> typing._SpecialGenericAlias",
            "(typing._GenericAlias, None, bool) -> typing._GenericAlias"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 168,
        "func_name": "_type_check",
        "type_comments": [
            "(typing._SpecialGenericAlias, str, bool, None, bool) -> typing._SpecialGenericAlias",
            "(typing._GenericAlias, str, bool, None, bool) -> typing._GenericAlias"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 245,
        "func_name": "_collect_parameters",
        "type_comments": [
            "(Tuple[typing._SpecialGenericAlias, type]) -> Tuple[]",
            "(Tuple[typing._GenericAlias]) -> Tuple[]"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 273,
        "func_name": "_check_generic",
        "type_comments": [
            "(Tuple[typing._GenericAlias], int) -> None"
        ],
        "samples": 2
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 345,
        "func_name": "inner",
        "type_comments": [
            "(*Union[Tuple[None, typing._GenericAlias, None], typing._SpecialGenericAlias]) -> typing._GenericAlias",
            "(*type) -> typing._GenericAlias"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 1233,
        "func_name": "_is_dunder",
        "type_comments": [
            "(str) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 1245,
        "func_name": "_BaseGenericAlias.__init__",
        "type_comments": [
            "(type, bool, str) -> None",
            "(abc.ABCMeta, bool, str) -> None"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 1274,
        "func_name": "_BaseGenericAlias.__getattr__",
        "type_comments": [
            "(str) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 4
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 1284,
        "func_name": "_BaseGenericAlias.__setattr__",
        "type_comments": [
            "(str, Tuple[typing._SpecialGenericAlias, ellipsis]) -> None",
            "(str, type) -> None",
            "(str, None) -> None",
            "(str, bool) -> None",
            "(str, str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 1291,
        "func_name": "_BaseGenericAlias.__instancecheck__",
        "type_comments": [
            "(str) -> bool",
            "(re.Pattern) -> bool"
        ],
        "samples": 25
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 1340,
        "func_name": "_GenericAlias.__init__",
        "type_comments": [
            "(type, Tuple[typing._GenericAlias], bool, str, bool) -> None",
            "(type, Tuple[typing._SpecialGenericAlias, type], bool, str, bool) -> None",
            "(abc.ABCMeta, Tuple[typing._GenericAlias], bool, str, bool) -> None"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 1352,
        "func_name": "_GenericAlias.__eq__",
        "type_comments": [
            "(typing._AnyMeta) -> NotImplementedType",
            "(typing._SpecialForm) -> NotImplementedType"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 1358,
        "func_name": "_GenericAlias.__hash__",
        "type_comments": [
            "() -> int"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 1550,
        "func_name": "__getitem__",
        "type_comments": [
            "(typing._GenericAlias) -> typing._GenericAlias"
        ],
        "samples": 2
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 1559,
        "func_name": "_SpecialGenericAlias.copy_with",
        "type_comments": [
            "(Tuple[typing._GenericAlias]) -> typing._GenericAlias",
            "(Tuple[typing._SpecialGenericAlias, type]) -> typing._GenericAlias"
        ],
        "samples": 3
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 1566,
        "func_name": "_SpecialGenericAlias.__subclasscheck__",
        "type_comments": [
            "(type) -> bool"
        ],
        "samples": 25
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 1634,
        "func_name": "__getitem__",
        "type_comments": [
            "(Tuple[typing._SpecialGenericAlias, ellipsis]) -> typing._GenericAlias"
        ],
        "samples": 1
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\typing.py",
        "line": 2233,
        "func_name": "cast",
        "type_comments": [
            "(typing._GenericAlias, generator) -> generator",
            "(typing.TypeVar, _pytest.reports.TestReport) -> _pytest.reports.TestReport",
            "(typing.TypeVar, List) -> List",
            "(typing.TypeVar, None) -> None",
            "(type, numpy.ndarray) -> numpy.ndarray",
            "(str, numpy.ndarray) -> numpy.ndarray",
            "(numpy._DTypeMeta, numpy.dtypes.ObjectDType) -> numpy.dtypes.ObjectDType",
            "(type, int) -> int"
        ],
        "samples": 354
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\urllib\\parse.py",
        "line": 99,
        "func_name": "_noop",
        "type_comments": [
            "(urllib.parse.ParseResult) -> urllib.parse.ParseResult",
            "(urllib.parse.SplitResult) -> urllib.parse.SplitResult"
        ],
        "samples": 2
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\urllib\\parse.py",
        "line": 110,
        "func_name": "_coerce_args",
        "type_comments": [
            "(*str) -> Tuple[str, str, function]"
        ],
        "samples": 2
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\urllib\\parse.py",
        "line": 365,
        "func_name": "urlparse",
        "type_comments": [
            "(str, str, bool) -> urllib.parse.ParseResult"
        ],
        "samples": 1
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\urllib\\parse.py",
        "line": 412,
        "func_name": "_checknetloc",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\urllib\\parse.py",
        "line": 432,
        "func_name": "urlsplit",
        "type_comments": [
            "(str, str, bool) -> urllib.parse.SplitResult"
        ],
        "samples": 1
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\warnings.py",
        "line": 96,
        "func_name": "_showwarnmsg",
        "type_comments": [
            "(warnings.WarningMessage) -> None"
        ],
        "samples": 4
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\warnings.py",
        "line": 130,
        "func_name": "filterwarnings",
        "type_comments": [
            "(str, str, type, str, int, bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\warnings.py",
        "line": 165,
        "func_name": "simplefilter",
        "type_comments": [
            "(str, type, int, bool) -> None"
        ],
        "samples": 28
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\warnings.py",
        "line": 181,
        "func_name": "_add_filter",
        "type_comments": [
            "(bool, *Optional[Union[str, type]]) -> None"
        ],
        "samples": 28
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\warnings.py",
        "line": 403,
        "func_name": "WarningMessage.__init__",
        "type_comments": [
            "(UserWarning, type, str, int, None, None, None) -> None"
        ],
        "samples": 4
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\warnings.py",
        "line": 440,
        "func_name": "catch_warnings.__init__",
        "type_comments": [
            "(bool, None, None, type, int, bool) -> None"
        ],
        "samples": 28
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\warnings.py",
        "line": 466,
        "func_name": "catch_warnings.__enter__",
        "type_comments": [
            "() -> None"
        ],
        "samples": 28
    },
    {
        "path": "C:\\Users\\micah\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\warnings.py",
        "line": 487,
        "func_name": "catch_warnings.__exit__",
        "type_comments": [
            "(*None) -> None"
        ],
        "samples": 28
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_distutils_hack\\__init__.py",
        "line": 89,
        "func_name": "DistutilsMetaFinder.find_spec",
        "type_comments": [
            "(str, None, None) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\_io\\terminalwriter.py",
        "line": 97,
        "func_name": "TerminalWriter.markup",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\_io\\terminalwriter.py",
        "line": 144,
        "func_name": "TerminalWriter.write",
        "type_comments": [
            "(str, bool) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\_io\\terminalwriter.py",
        "line": 173,
        "func_name": "TerminalWriter.flush",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py",
        "line": 93,
        "func_name": "AssertionRewritingHook.find_spec",
        "type_comments": [
            "(str, None, None) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py",
        "line": 180,
        "func_name": "AssertionRewritingHook._early_rewrite_bailout",
        "type_comments": [
            "(str, _pytest.assertion.AssertionState) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py",
        "line": 240,
        "func_name": "AssertionRewritingHook._is_marked_for_rewrite",
        "type_comments": [
            "(str, _pytest.assertion.AssertionState) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\cacheprovider.py",
        "line": 312,
        "func_name": "LFPlugin.pytest_runtest_logreport",
        "type_comments": [
            "(_pytest.reports.TestReport) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 368,
        "func_name": "SysCaptureBase._assert_state",
        "type_comments": [
            "(str, Tuple[str, str]) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 389,
        "func_name": "SysCaptureBase.suspend",
        "type_comments": [
            "() -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 394,
        "func_name": "SysCaptureBase.resume",
        "type_comments": [
            "() -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 488,
        "func_name": "FDCaptureBase._assert_state",
        "type_comments": [
            "(str, Tuple[str, str]) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 518,
        "func_name": "FDCaptureBase.suspend",
        "type_comments": [
            "() -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 526,
        "func_name": "FDCaptureBase.resume",
        "type_comments": [
            "() -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 565,
        "func_name": "FDCapture.snap",
        "type_comments": [
            "() -> str"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 646,
        "func_name": "MultiCapture.suspend_capturing",
        "type_comments": [
            "(bool) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 656,
        "func_name": "MultiCapture.resume_capturing",
        "type_comments": [
            "() -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 683,
        "func_name": "MultiCapture.readouterr",
        "type_comments": [
            "() -> _pytest.capture.CaptureResult"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 759,
        "func_name": "CaptureManager.resume_global_capture",
        "type_comments": [
            "() -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 765,
        "func_name": "CaptureManager.suspend_global_capture",
        "type_comments": [
            "(bool) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 778,
        "func_name": "CaptureManager.read_global_capture",
        "type_comments": [
            "() -> _pytest.capture.CaptureResult"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 798,
        "func_name": "CaptureManager.activate_fixture",
        "type_comments": [
            "() -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 804,
        "func_name": "CaptureManager.deactivate_fixture",
        "type_comments": [
            "() -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 836,
        "func_name": "item_capture",
        "type_comments": [
            "(str, _pytest.python.Function) -> Iterator",
            "(str, _pytest.python.Function) -> Iterator"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 867,
        "func_name": "CaptureManager.pytest_runtest_setup",
        "type_comments": [
            "(_pytest.python.Function) -> Iterator"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 872,
        "func_name": "CaptureManager.pytest_runtest_call",
        "type_comments": [
            "(_pytest.python.Function) -> Iterator",
            "(_pytest.python.Function) -> Iterator"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\capture.py",
        "line": 877,
        "func_name": "CaptureManager.pytest_runtest_teardown",
        "type_comments": [
            "(_pytest.python.Function) -> Iterator"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\compat.py",
        "line": 78,
        "func_name": "iscoroutinefunction",
        "type_comments": [
            "(function) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\compat.py",
        "line": 90,
        "func_name": "is_async_function",
        "type_comments": [
            "(function) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\config\\__init__.py",
        "line": 590,
        "func_name": "PytestPluginManager._getconftestmodules",
        "type_comments": [
            "(pathlib.WindowsPath, str, pathlib.WindowsPath) -> List[module]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\config\\__init__.py",
        "line": 1026,
        "func_name": "rootpath",
        "type_comments": [
            "() -> pathlib.WindowsPath"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\config\\__init__.py",
        "line": 1549,
        "func_name": "Config.getoption",
        "type_comments": [
            "(str, bool, bool) -> bool",
            "(str, _pytest.config.Notset, bool) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\config\\compat.py",
        "line": 36,
        "func_name": "PathAwareHookProxy.__getattr__",
        "type_comments": [
            "(str, function) -> pluggy._hooks._HookCaller"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\deprecated.py",
        "line": 144,
        "func_name": "check_ispytest",
        "type_comments": [
            "(bool) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py",
        "line": 434,
        "func_name": "node",
        "type_comments": [
            "() -> _pytest.python.Function"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py",
        "line": 458,
        "func_name": "config",
        "type_comments": [
            "() -> _pytest.config.Config"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py",
        "line": 682,
        "func_name": "FixtureRequest._schedule_finalizers",
        "type_comments": [
            "(_pytest.fixtures.FixtureDef, _pytest.fixtures.SubRequest) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py",
        "line": 720,
        "func_name": "FixtureRequest._getscopeitem",
        "type_comments": [
            "(_pytest.scope.Scope) -> _pytest.python.Function"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py",
        "line": 777,
        "func_name": "SubRequest.addfinalizer",
        "type_comments": [
            "(functools.partial) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py",
        "line": 1022,
        "func_name": "FixtureDef.addfinalizer",
        "type_comments": [
            "(functools.partial) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\logging.py",
        "line": 318,
        "func_name": "catching_logs.__init__",
        "type_comments": [
            "(_pytest.logging.LogCaptureHandler, None) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\logging.py",
        "line": 322,
        "func_name": "catching_logs.__enter__",
        "type_comments": [
            "() -> _pytest.logging.LogCaptureHandler"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\logging.py",
        "line": 332,
        "func_name": "catching_logs.__exit__",
        "type_comments": [
            "(None, None, None) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\logging.py",
        "line": 352,
        "func_name": "LogCaptureHandler.reset",
        "type_comments": [
            "() -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\logging.py",
        "line": 704,
        "func_name": "LoggingPlugin.pytest_runtest_logreport",
        "type_comments": [
            "() -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\logging.py",
        "line": 708,
        "func_name": "LoggingPlugin._runtest_for",
        "type_comments": [
            "(_pytest.python.Function, str) -> Iterator",
            "(_pytest.python.Function, str) -> Iterator"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\logging.py",
        "line": 727,
        "func_name": "LoggingPlugin.pytest_runtest_setup",
        "type_comments": [
            "(_pytest.python.Function) -> Iterator"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\logging.py",
        "line": 735,
        "func_name": "LoggingPlugin.pytest_runtest_call",
        "type_comments": [
            "(_pytest.python.Function) -> Iterator",
            "(_pytest.python.Function) -> Iterator"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\logging.py",
        "line": 741,
        "func_name": "LoggingPlugin.pytest_runtest_teardown",
        "type_comments": [
            "(_pytest.python.Function) -> Iterator"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\logging.py",
        "line": 841,
        "func_name": "_LiveLoggingNullHandler.set_when",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\main.py",
        "line": 519,
        "func_name": "Session.pytest_runtest_logreport",
        "type_comments": [
            "(_pytest.reports.TestReport) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\main.py",
        "line": 536,
        "func_name": "Session.gethookproxy",
        "type_comments": [
            "(pathlib.WindowsPath) -> _pytest.config.compat.PathAwareHookProxy"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\mark\\structures.py",
        "line": 602,
        "func_name": "NodeKeywords.__iter__",
        "type_comments": [
            "() -> Iterator[str]",
            "() -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\nodes.py",
        "line": 264,
        "func_name": "ihook",
        "type_comments": [
            "() -> _pytest.config.compat.PathAwareHookProxy"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\nodes.py",
        "line": 311,
        "func_name": "nodeid",
        "type_comments": [
            "() -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\nodes.py",
        "line": 316,
        "func_name": "Node.__hash__",
        "type_comments": [
            "() -> int"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\nodes.py",
        "line": 325,
        "func_name": "Node.listchain",
        "type_comments": [
            "() -> List[Union[_pytest.main.Session, _pytest.python.Function, _pytest.python.Module, _pytest.python.Package]]"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\nodes.py",
        "line": 363,
        "func_name": "Node.iter_markers",
        "type_comments": [
            "(str) -> generator"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\nodes.py",
        "line": 371,
        "func_name": "Node.iter_markers_with_node",
        "type_comments": [
            "(str) -> Iterator"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\nodes.py",
        "line": 392,
        "func_name": "Node.get_closest_marker",
        "type_comments": [
            "(str, None) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\nodes.py",
        "line": 413,
        "func_name": "Node.addfinalizer",
        "type_comments": [
            "(function) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\nodes.py",
        "line": 735,
        "func_name": "Item.add_report_section",
        "type_comments": [
            "(str, str, str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\nose.py",
        "line": 12,
        "func_name": "pytest_runtest_setup",
        "type_comments": [
            "(_pytest.python.Function) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\nose.py",
        "line": 33,
        "func_name": "call_optional",
        "type_comments": [
            "(function, str, str) -> bool"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\pathlib.py",
        "line": 419,
        "func_name": "fnmatch_ex",
        "type_comments": [
            "(str, pathlib.PureWindowsPath) -> bool"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\python.py",
        "line": 187,
        "func_name": "pytest_pyfunc_call",
        "type_comments": [
            "(_pytest.python.Function) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\python.py",
        "line": 305,
        "func_name": "obj",
        "type_comments": [
            "() -> function"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\python.py",
        "line": 1797,
        "func_name": "Function.runtest",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\reports.py",
        "line": 146,
        "func_name": "passed",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\reports.py",
        "line": 151,
        "func_name": "failed",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\reports.py",
        "line": 156,
        "func_name": "skipped",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\reports.py",
        "line": 253,
        "func_name": "TestReport.__init__",
        "type_comments": [
            "(str, Tuple[str, int, str], Dict[str, int], str, None, str, List, float, float, float, List) -> None",
            "(str, Tuple[str, int, str], Dict[str, int], str, None, str, List[Tuple[str, str]], float, float, float, List) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\reports.py",
        "line": 318,
        "func_name": "from_item_and_call",
        "type_comments": [
            "(_pytest.python.Function, _pytest.runner.CallInfo) -> _pytest.reports.TestReport"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\runner.py",
        "line": 160,
        "func_name": "pytest_runtest_call",
        "type_comments": [
            "(_pytest.python.Function) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\runner.py",
        "line": 186,
        "func_name": "_update_current_test_var",
        "type_comments": [
            "(_pytest.python.Function, str) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\runner.py",
        "line": 203,
        "func_name": "pytest_report_teststatus",
        "type_comments": [
            "(_pytest.reports.TestReport) -> Tuple[str, str, str]",
            "(_pytest.reports.TestReport) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\runner.py",
        "line": 219,
        "func_name": "call_and_report",
        "type_comments": [
            "(_pytest.python.Function, str, bool) -> _pytest.reports.TestReport"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\runner.py",
        "line": 232,
        "func_name": "check_interactive_exception",
        "type_comments": [
            "(_pytest.runner.CallInfo, _pytest.reports.TestReport) -> bool"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\runner.py",
        "line": 247,
        "func_name": "call_runtest_hook",
        "type_comments": [
            "(_pytest.python.Function, str) -> _pytest.runner.CallInfo"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\runner.py",
        "line": 286,
        "func_name": "CallInfo.__init__",
        "type_comments": [
            "(List, None, float, float, float, str, bool) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\runner.py",
        "line": 318,
        "func_name": "from_call",
        "type_comments": [
            "(function, str, Tuple[type, type]) -> _pytest.runner.CallInfo"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\runner.py",
        "line": 367,
        "func_name": "pytest_runtest_makereport",
        "type_comments": [
            "(_pytest.python.Function, _pytest.runner.CallInfo) -> _pytest.reports.TestReport"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\runner.py",
        "line": 499,
        "func_name": "SetupState.addfinalizer",
        "type_comments": [
            "(function, _pytest.python.Function) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\setuponly.py",
        "line": 31,
        "func_name": "pytest_fixture_setup",
        "type_comments": [
            "(_pytest.fixtures.FixtureDef, _pytest.fixtures.SubRequest) -> Iterator"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\skipping.py",
        "line": 206,
        "func_name": "evaluate_xfail_marks",
        "type_comments": [
            "(_pytest.python.Function) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\skipping.py",
        "line": 246,
        "func_name": "pytest_runtest_call",
        "type_comments": [
            "(_pytest.python.Function) -> Iterator",
            "(_pytest.python.Function) -> Iterator"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\skipping.py",
        "line": 263,
        "func_name": "pytest_runtest_makereport",
        "type_comments": [
            "(_pytest.python.Function, _pytest.runner.CallInfo) -> Iterator",
            "(_pytest.python.Function, _pytest.runner.CallInfo) -> Iterator"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\skipping.py",
        "line": 291,
        "func_name": "pytest_report_teststatus",
        "type_comments": [
            "(_pytest.reports.TestReport) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\stash.py",
        "line": 71,
        "func_name": "Stash.__setitem__",
        "type_comments": [
            "(_pytest.stash.StashKey, None) -> None",
            "(_pytest.stash.StashKey, Dict) -> None",
            "(_pytest.stash.StashKey, _pytest.logging.LogCaptureHandler) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\stash.py",
        "line": 75,
        "func_name": "Stash.__getitem__",
        "type_comments": [
            "(_pytest.stash.StashKey) -> Dict[str, List]",
            "(_pytest.stash.StashKey) -> _pytest.assertion.AssertionState",
            "(_pytest.stash.StashKey) -> pyannotate_runtime.collect_types.NoReturnType",
            "(_pytest.stash.StashKey) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\stash.py",
        "line": 82,
        "func_name": "Stash.get",
        "type_comments": [
            "(_pytest.stash.StashKey, None) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\stash.py",
        "line": 90,
        "func_name": "Stash.setdefault",
        "type_comments": [
            "(_pytest.stash.StashKey, Dict) -> Dict",
            "(_pytest.stash.StashKey, Dict) -> Dict[str, bool]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\terminal.py",
        "line": 275,
        "func_name": "pytest_report_teststatus",
        "type_comments": [
            "(_pytest.reports.TestReport) -> Tuple[str, str, str]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\terminal.py",
        "line": 369,
        "func_name": "verbosity",
        "type_comments": [
            "() -> int"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\terminal.py",
        "line": 432,
        "func_name": "TerminalReporter.flush",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\terminal.py",
        "line": 475,
        "func_name": "TerminalReporter._add_stats",
        "type_comments": [
            "(str, List[_pytest.reports.TestReport]) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\terminal.py",
        "line": 525,
        "func_name": "TerminalReporter.pytest_runtest_logreport",
        "type_comments": [
            "(_pytest.reports.TestReport) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\terminal.py",
        "line": 592,
        "func_name": "_is_last_item",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\terminal.py",
        "line": 1176,
        "func_name": "TerminalReporter._determine_main_color",
        "type_comments": [
            "(bool) -> str"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\terminal.py",
        "line": 1188,
        "func_name": "TerminalReporter._set_main_color",
        "type_comments": [
            "() -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\threadexception.py",
        "line": 36,
        "func_name": "catch_threading_exception.__init__",
        "type_comments": [
            "() -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\threadexception.py",
        "line": 43,
        "func_name": "catch_threading_exception.__enter__",
        "type_comments": [
            "() -> _pytest.threadexception.catch_threading_exception"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\threadexception.py",
        "line": 48,
        "func_name": "catch_threading_exception.__exit__",
        "type_comments": [
            "(None, None, None) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\threadexception.py",
        "line": 60,
        "func_name": "thread_exception_runtest_hook",
        "type_comments": [
            "() -> Iterator",
            "() -> Iterator"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\threadexception.py",
        "line": 76,
        "func_name": "pytest_runtest_setup",
        "type_comments": [
            "() -> Iterator"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\threadexception.py",
        "line": 81,
        "func_name": "pytest_runtest_call",
        "type_comments": [
            "() -> Iterator",
            "() -> Iterator"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\threadexception.py",
        "line": 86,
        "func_name": "pytest_runtest_teardown",
        "type_comments": [
            "() -> Iterator"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\tmpdir.py",
        "line": 318,
        "func_name": "pytest_runtest_makereport",
        "type_comments": [
            "(_pytest.python.Function, _pytest.runner.CallInfo) -> Iterator",
            "(_pytest.python.Function, _pytest.runner.CallInfo) -> Iterator"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\unittest.py",
        "line": 348,
        "func_name": "pytest_runtest_makereport",
        "type_comments": [
            "(_pytest.python.Function, _pytest.runner.CallInfo) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py",
        "line": 36,
        "func_name": "catch_unraisable_exception.__init__",
        "type_comments": [
            "() -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py",
        "line": 45,
        "func_name": "catch_unraisable_exception.__enter__",
        "type_comments": [
            "() -> _pytest.unraisableexception.catch_unraisable_exception"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py",
        "line": 50,
        "func_name": "catch_unraisable_exception.__exit__",
        "type_comments": [
            "(None, None, None) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py",
        "line": 62,
        "func_name": "unraisable_exception_runtest_hook",
        "type_comments": [
            "() -> Iterator",
            "() -> Iterator"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py",
        "line": 81,
        "func_name": "pytest_runtest_setup",
        "type_comments": [
            "() -> Iterator"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py",
        "line": 86,
        "func_name": "pytest_runtest_call",
        "type_comments": [
            "() -> Iterator",
            "() -> Iterator"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py",
        "line": 91,
        "func_name": "pytest_runtest_teardown",
        "type_comments": [
            "() -> Iterator"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\colorama\\ansitowin32.py",
        "line": 28,
        "func_name": "StreamWrapper.__getattr__",
        "type_comments": [
            "(str) -> builtin_function_or_method"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\colorama\\ansitowin32.py",
        "line": 46,
        "func_name": "StreamWrapper.write",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\colorama\\ansitowin32.py",
        "line": 175,
        "func_name": "AnsiToWin32.write",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\loguru\\_datetime.py",
        "line": 13,
        "func_name": "datetime.__format__",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\loguru\\_datetime.py",
        "line": 72,
        "func_name": "get",
        "type_comments": [
            "(re.Match) -> str"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\loguru\\_datetime.py",
        "line": 81,
        "func_name": "aware_now",
        "type_comments": [
            "() -> loguru._datetime.datetime"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\loguru\\_handler.py",
        "line": 101,
        "func_name": "_protected_lock",
        "type_comments": [
            "() -> Iterator",
            "() -> Iterator"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\loguru\\_handler.py",
        "line": 118,
        "func_name": "Handler.emit",
        "type_comments": [
            "(Dict[str, Optional[Union[Dict, datetime.timedelta, loguru._recattrs.RecordFile, str]]], str, bool, bool, None) -> None"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\loguru\\_logger.py",
        "line": 1876,
        "func_name": "Logger._log",
        "type_comments": [
            "(str, bool, Tuple[None, int, bool, bool, bool, bool, bool, List, Dict], str, Tuple[], Dict) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\loguru\\_logger.py",
        "line": 2008,
        "func_name": "debug",
        "type_comments": [
            "(loguru._logger.Logger, str) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\loguru\\_logger.py",
        "line": 2012,
        "func_name": "info",
        "type_comments": [
            "(loguru._logger.Logger, str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\loguru\\_recattrs.py",
        "line": 8,
        "func_name": "RecordLevel.__init__",
        "type_comments": [
            "(str, int, str) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\loguru\\_recattrs.py",
        "line": 16,
        "func_name": "RecordLevel.__format__",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\loguru\\_recattrs.py",
        "line": 23,
        "func_name": "RecordFile.__init__",
        "type_comments": [
            "(str, str) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\loguru\\_recattrs.py",
        "line": 37,
        "func_name": "RecordThread.__init__",
        "type_comments": [
            "(int, str) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\loguru\\_recattrs.py",
        "line": 51,
        "func_name": "RecordProcess.__init__",
        "type_comments": [
            "(int, str) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_asarray.py",
        "line": 27,
        "func_name": "require",
        "type_comments": [
            "(Tuple[int, int, int, int, int, int], type, str, None) -> numpy.ndarray",
            "(Tuple[int, int, int, int, int, int, int, int, int, int], type, str, None) -> numpy.ndarray",
            "(Tuple[int, int], type, str, None) -> numpy.ndarray",
            "(Tuple[int], type, str, None) -> numpy.ndarray"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_dtype.py",
        "line": 24,
        "func_name": "_kind_name",
        "type_comments": [
            "(numpy.dtypes.Float64DType) -> str",
            "(numpy.dtypes.ObjectDType) -> str",
            "(numpy.dtypes.Int8DType) -> str"
        ],
        "samples": 19
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_dtype.py",
        "line": 34,
        "func_name": "__str__",
        "type_comments": [
            "(numpy.dtypes.Int16DType) -> str",
            "(numpy.dtypes.Int8DType) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_dtype.py",
        "line": 45,
        "func_name": "__repr__",
        "type_comments": [
            "(numpy.dtypes.Int16DType) -> str",
            "(numpy.dtypes.Int8DType) -> str",
            "(numpy.dtypes.Int64DType) -> str",
            "(numpy.dtypes.Float64DType) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_dtype.py",
        "line": 68,
        "func_name": "_construction_repr",
        "type_comments": [
            "(numpy.dtypes.Int16DType, bool, bool) -> str",
            "(numpy.dtypes.Int8DType, bool, bool) -> str",
            "(numpy.dtypes.Int64DType, bool, bool) -> str",
            "(numpy.dtypes.Float64DType, bool, bool) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_dtype.py",
        "line": 103,
        "func_name": "_scalar_str",
        "type_comments": [
            "(numpy.dtypes.Int16DType, bool) -> str",
            "(numpy.dtypes.Int8DType, bool) -> str",
            "(numpy.dtypes.Int64DType, bool) -> str",
            "(numpy.dtypes.Float64DType, bool) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_dtype.py",
        "line": 160,
        "func_name": "_byte_order_str",
        "type_comments": [
            "(numpy.dtypes.Int16DType) -> str",
            "(numpy.dtypes.Int8DType) -> str",
            "(numpy.dtypes.Int64DType) -> str",
            "(numpy.dtypes.Float64DType) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_dtype.py",
        "line": 330,
        "func_name": "_name_includes_bit_suffix",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool",
            "(numpy.dtypes.Float64DType) -> bool",
            "(numpy.dtypes.Int16DType) -> bool"
        ],
        "samples": 19
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_dtype.py",
        "line": 346,
        "func_name": "_name_get",
        "type_comments": [
            "(numpy.dtypes.Float64DType) -> str",
            "(numpy.dtypes.ObjectDType) -> str",
            "(numpy.dtypes.Int16DType) -> str"
        ],
        "samples": 19
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_internal.py",
        "line": 920,
        "func_name": "npy_ctypes_check",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_methods.py",
        "line": 39,
        "func_name": "_amax",
        "type_comments": [
            "(numpy.ndarray, None, None, bool, numpy._globals._NoValueType, bool) -> numpy.bool_",
            "(numpy.ndarray, None, None, bool, numpy._globals._NoValueType, bool) -> numpy.int64"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_methods.py",
        "line": 43,
        "func_name": "_amin",
        "type_comments": [
            "(numpy.ndarray, None, None, bool, numpy._globals._NoValueType, bool) -> numpy.int8",
            "(numpy.ndarray, None, None, bool, numpy._globals._NoValueType, bool) -> numpy.int16",
            "(numpy.ndarray, None, None, bool, numpy._globals._NoValueType, bool) -> numpy.int64"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_methods.py",
        "line": 47,
        "func_name": "_sum",
        "type_comments": [
            "(numpy.ndarray, None, None, None, bool, numpy._globals._NoValueType, bool) -> numpy.int32",
            "(numpy.ndarray, None, None, None, bool, numpy._globals._NoValueType, bool) -> numpy.int64"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_methods.py",
        "line": 55,
        "func_name": "_any",
        "type_comments": [
            "(numpy.ndarray, None, None, None, bool, bool) -> numpy.bool_",
            "(numpy.ndarray, int, None, None, bool, bool) -> numpy.ndarray"
        ],
        "samples": 27
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_methods.py",
        "line": 61,
        "func_name": "_all",
        "type_comments": [
            "(numpy.ndarray, None, None, None, bool, bool) -> numpy.bool_"
        ],
        "samples": 27
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_ufunc_config.py",
        "line": 33,
        "func_name": "seterr",
        "type_comments": [
            "(str, None, None, None, None) -> Dict[str, str]",
            "(None, str, str, str, str) -> Dict[str, str]"
        ],
        "samples": 30
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_ufunc_config.py",
        "line": 132,
        "func_name": "geterr",
        "type_comments": [
            "() -> Dict[str, str]"
        ],
        "samples": 30
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_ufunc_config.py",
        "line": 426,
        "func_name": "errstate.__init__",
        "type_comments": [
            "(numpy.core._ufunc_config._unspecified) -> None"
        ],
        "samples": 17
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_ufunc_config.py",
        "line": 430,
        "func_name": "errstate.__enter__",
        "type_comments": [
            "() -> None"
        ],
        "samples": 17
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\_ufunc_config.py",
        "line": 435,
        "func_name": "errstate.__exit__",
        "type_comments": [
            "(*None) -> None"
        ],
        "samples": 17
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 53,
        "func_name": "_wrapfunc",
        "type_comments": [
            "(numpy.ndarray, str) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 71,
        "func_name": "_wrapreduction",
        "type_comments": [
            "(pandas.core.series.Series, numpy.ufunc, str, None, None, None) -> numpy.bool_",
            "(Tuple[int, int], numpy.ufunc, str, None, None, None) -> numpy.int32",
            "(numpy.ndarray, numpy.ufunc, str, None, None, None) -> numpy.bool_"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 1021,
        "func_name": "_argsort_dispatcher",
        "type_comments": [
            "(numpy.ndarray, None, None, None) -> Tuple[numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 1025,
        "func_name": "argsort",
        "type_comments": [
            "(numpy.ndarray, int, None, None) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 1764,
        "func_name": "_ravel_dispatcher",
        "type_comments": [
            "(int, None) -> Tuple[int]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 1768,
        "func_name": "ravel",
        "type_comments": [
            "(int, str) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 2317,
        "func_name": "_any_dispatcher",
        "type_comments": [
            "(numpy.ndarray, None, None, None, numpy._globals._NoValueType) -> Tuple[numpy.ndarray, numpy._globals._NoValueType, None]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 2322,
        "func_name": "any",
        "type_comments": [
            "(numpy.ndarray, None, None, numpy._globals._NoValueType, numpy._globals._NoValueType) -> numpy.bool_"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 2416,
        "func_name": "_all_dispatcher",
        "type_comments": [
            "(numpy.ndarray, None, None, None, None) -> Tuple[numpy.ndarray, None, None]",
            "(pandas.core.series.Series, None, None, None, None) -> Tuple[pandas.core.series.Series, None, None]"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 2421,
        "func_name": "all",
        "type_comments": [
            "(pandas.core.series.Series, None, None, numpy._globals._NoValueType, numpy._globals._NoValueType) -> numpy.bool_",
            "(numpy.ndarray, None, None, numpy._globals._NoValueType, numpy._globals._NoValueType) -> numpy.bool_"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 2508,
        "func_name": "_cumsum_dispatcher",
        "type_comments": [
            "(numpy.ndarray, None, None, None) -> Tuple[numpy.ndarray, None]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 2512,
        "func_name": "cumsum",
        "type_comments": [
            "(numpy.ndarray, None, None, None) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 2687,
        "func_name": "_max_dispatcher",
        "type_comments": [
            "(numpy.ndarray, None, None, None, None, None) -> Tuple[numpy.ndarray, None]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 2692,
        "func_name": "max",
        "type_comments": [
            "(numpy.ndarray, None, None, numpy._globals._NoValueType, numpy._globals._NoValueType, numpy._globals._NoValueType) -> numpy.int32",
            "(numpy.ndarray, None, None, numpy._globals._NoValueType, numpy._globals._NoValueType, numpy._globals._NoValueType) -> numpy.int64"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 2831,
        "func_name": "_min_dispatcher",
        "type_comments": [
            "(numpy.ndarray, None, None, None, None, None) -> Tuple[numpy.ndarray, None]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 2836,
        "func_name": "min",
        "type_comments": [
            "(numpy.ndarray, None, None, numpy._globals._NoValueType, numpy._globals._NoValueType, numpy._globals._NoValueType) -> numpy.int32",
            "(numpy.ndarray, None, None, numpy._globals._NoValueType, numpy._globals._NoValueType, numpy._globals._NoValueType) -> numpy.int64"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 2974,
        "func_name": "_prod_dispatcher",
        "type_comments": [
            "(Tuple[int, int], None, None, None, None, None, None) -> Tuple[Tuple[int, int], None]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 2979,
        "func_name": "prod",
        "type_comments": [
            "(Tuple[int, int], None, None, None, numpy._globals._NoValueType, numpy._globals._NoValueType, numpy._globals._NoValueType) -> numpy.int32"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 3172,
        "func_name": "_ndim_dispatcher",
        "type_comments": [
            "(pandas.core.indexes.base.Index) -> Tuple[pandas.core.indexes.base.Index]",
            "(numpy.ndarray) -> Tuple[numpy.ndarray]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\fromnumeric.py",
        "line": 3176,
        "func_name": "ndim",
        "type_comments": [
            "(pandas.core.indexes.base.Index) -> int",
            "(numpy.ndarray) -> int"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\getlimits.py",
        "line": 685,
        "func_name": "iinfo.__init__",
        "type_comments": [
            "(numpy.dtypes.Int32DType) -> None",
            "(type) -> None",
            "(numpy.dtypes.Int64DType) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\getlimits.py",
        "line": 696,
        "func_name": "min",
        "type_comments": [
            "() -> int"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\getlimits.py",
        "line": 709,
        "func_name": "max",
        "type_comments": [
            "() -> int"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\multiarray.py",
        "line": 85,
        "func_name": "empty_like",
        "type_comments": [
            "(numpy.ndarray, type, str, bool, None) -> Tuple[numpy.ndarray]",
            "(numpy.ndarray, str, None, None, None) -> Tuple[numpy.ndarray]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\multiarray.py",
        "line": 153,
        "func_name": "concatenate",
        "type_comments": [
            "(List[numpy.ndarray], int, None, None, None) -> List[numpy.ndarray]",
            "(List[numpy.ndarray], None, None, None, None) -> List[numpy.ndarray]",
            "(List[numpy.ndarray], int, None, None, str) -> List[numpy.ndarray]"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\multiarray.py",
        "line": 346,
        "func_name": "where",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, numpy.ndarray) -> Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\multiarray.py",
        "line": 503,
        "func_name": "can_cast",
        "type_comments": [
            "(int, numpy.dtypes.Int64DType, None) -> Tuple[int]",
            "(int, numpy.dtypes.Int16DType, None) -> Tuple[int]",
            "(int, numpy.dtypes.Int8DType, None) -> Tuple[int]"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\multiarray.py",
        "line": 669,
        "func_name": "result_type",
        "type_comments": [
            "(*Union[numpy.dtypes.Float64DType, numpy.dtypes.ObjectDType]) -> Tuple[numpy.dtypes.Float64DType, numpy.dtypes.ObjectDType]",
            "(*numpy.dtypes.ObjectDType) -> Tuple[numpy.dtypes.ObjectDType]",
            "(*numpy.dtypes.Int64DType) -> Tuple[numpy.dtypes.Int64DType]"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\multiarray.py",
        "line": 892,
        "func_name": "bincount",
        "type_comments": [
            "(numpy.ndarray, None, None) -> Tuple[numpy.ndarray, None]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\multiarray.py",
        "line": 1080,
        "func_name": "copyto",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, str, None) -> Tuple[numpy.ndarray, numpy.ndarray, None]"
        ],
        "samples": 149
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\multiarray.py",
        "line": 1131,
        "func_name": "putmask",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, bool) -> Tuple[numpy.ndarray, numpy.ndarray, bool]",
            "(numpy.ndarray, numpy.ndarray, numpy.float64) -> Tuple[numpy.ndarray, numpy.ndarray, numpy.float64]",
            "(numpy.ndarray, numpy.ndarray, float) -> Tuple[numpy.ndarray, numpy.ndarray, float]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\numeric.py",
        "line": 136,
        "func_name": "ones",
        "type_comments": [
            "(int, type, str, None) -> numpy.ndarray",
            "(Tuple[int], type, str, None) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\numeric.py",
        "line": 199,
        "func_name": "_ones_like_dispatcher",
        "type_comments": [
            "(numpy.ndarray, type, None, None, None) -> Tuple[numpy.ndarray]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\numeric.py",
        "line": 203,
        "func_name": "ones_like",
        "type_comments": [
            "(numpy.ndarray, type, str, bool, None) -> numpy.ndarray"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\numeric.py",
        "line": 274,
        "func_name": "full",
        "type_comments": [
            "(int, bool, None, str, None) -> numpy.ndarray"
        ],
        "samples": 149
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\numeric.py",
        "line": 1330,
        "func_name": "normalize_axis_tuple",
        "type_comments": [
            "(int, int, str, bool) -> Tuple[int]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\numeric.py",
        "line": 1389,
        "func_name": "_moveaxis_dispatcher",
        "type_comments": [
            "(numpy.ndarray, int, int) -> Tuple[numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\numeric.py",
        "line": 1393,
        "func_name": "moveaxis",
        "type_comments": [
            "(numpy.ndarray, int, int) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\numerictypes.py",
        "line": 283,
        "func_name": "issubclass_",
        "type_comments": [
            "(numpy.dtypes.Int64DType, type) -> bool",
            "(type, type) -> bool",
            "(numpy.dtypes.Float64DType, type) -> bool",
            "(numpy.dtypes.Int8DType, type) -> bool",
            "(numpy.dtypes.ObjectDType, type) -> bool"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\numerictypes.py",
        "line": 357,
        "func_name": "issubdtype",
        "type_comments": [
            "(numpy.dtypes.Int64DType, type) -> bool",
            "(numpy.dtypes.Float64DType, type) -> bool",
            "(numpy.dtypes.ObjectDType, type) -> bool"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\shape_base.py",
        "line": 77,
        "func_name": "_atleast_2d_dispatcher",
        "type_comments": [
            "(*numpy.ndarray) -> Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]",
            "(*numpy.ndarray) -> Tuple[numpy.ndarray, numpy.ndarray]",
            "(*numpy.ndarray) -> Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\shape_base.py",
        "line": 81,
        "func_name": "atleast_2d",
        "type_comments": [
            "(*numpy.ndarray) -> List[numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\shape_base.py",
        "line": 207,
        "func_name": "_arrays_for_stack_dispatcher",
        "type_comments": [
            "(List[numpy.ndarray]) -> Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]",
            "(List[numpy.ndarray]) -> Tuple[numpy.ndarray, numpy.ndarray]",
            "(List[numpy.ndarray]) -> Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\shape_base.py",
        "line": 215,
        "func_name": "_vhstack_dispatcher",
        "type_comments": [
            "(List[numpy.ndarray], None, None) -> Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]",
            "(List[numpy.ndarray], None, None) -> Tuple[numpy.ndarray, numpy.ndarray]",
            "(List[numpy.ndarray], None, None) -> Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\core\\shape_base.py",
        "line": 219,
        "func_name": "vstack",
        "type_comments": [
            "(List[numpy.ndarray], None, str) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\arraysetops.py",
        "line": 519,
        "func_name": "_in1d_dispatcher",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, bool, bool, None) -> Tuple[numpy.ndarray, numpy.ndarray]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\arraysetops.py",
        "line": 524,
        "func_name": "in1d",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, bool, bool, None) -> numpy.ndarray"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\arraysetops.py",
        "line": 935,
        "func_name": "_setdiff1d_dispatcher",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, bool) -> Tuple[numpy.ndarray, numpy.ndarray]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\arraysetops.py",
        "line": 939,
        "func_name": "setdiff1d",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, bool) -> numpy.ndarray"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\function_base.py",
        "line": 348,
        "func_name": "iterable",
        "type_comments": [
            "(List[type]) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\function_base.py",
        "line": 1913,
        "func_name": "_place_dispatcher",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, numpy.ndarray) -> Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\function_base.py",
        "line": 1917,
        "func_name": "place",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, numpy.ndarray) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\function_base.py",
        "line": 2285,
        "func_name": "vectorize.__init__",
        "type_comments": [
            "(function, List[type], None, None, bool, None) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\function_base.py",
        "line": 2337,
        "func_name": "vectorize._call_as_normal",
        "type_comments": [
            "(*numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\function_base.py",
        "line": 2367,
        "func_name": "vectorize.__call__",
        "type_comments": [
            "(*numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\function_base.py",
        "line": 2374,
        "func_name": "vectorize._get_ufunc_and_otypes",
        "type_comments": [
            "(function, Tuple[numpy.ndarray]) -> Tuple[numpy.ufunc, str]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\function_base.py",
        "line": 2443,
        "func_name": "vectorize._vectorize_call",
        "type_comments": [
            "(function, Tuple[numpy.ndarray]) -> numpy.ndarray"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\function_base.py",
        "line": 5364,
        "func_name": "_insert_dispatcher",
        "type_comments": [
            "(numpy.ndarray, int, str, None) -> Tuple[numpy.ndarray, int, str]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\function_base.py",
        "line": 5368,
        "func_name": "insert",
        "type_comments": [
            "(numpy.ndarray, int, str, None) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\function_base.py",
        "line": 5558,
        "func_name": "_append_dispatcher",
        "type_comments": [
            "(numpy.ndarray, int, None) -> Tuple[numpy.ndarray, int]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\numpy\\lib\\function_base.py",
        "line": 5562,
        "func_name": "append",
        "type_comments": [
            "(numpy.ndarray, int, None) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\__init__.py",
        "line": 33,
        "func_name": "using_copy_on_write",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 500
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        "line": 116,
        "func_name": "_get_single_key",
        "type_comments": [
            "(str, bool) -> str"
        ],
        "samples": 47
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        "line": 134,
        "func_name": "_get_option",
        "type_comments": [
            "(str, bool) -> str"
        ],
        "samples": 47
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        "line": 142,
        "func_name": "_set_option",
        "type_comments": [
            "(*Optional[str]) -> None",
            "(*str) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        "line": 260,
        "func_name": "CallableDynamicDoc.__call__",
        "type_comments": [
            "(*str) -> str"
        ],
        "samples": 47
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        "line": 432,
        "func_name": "option_context.__init__",
        "type_comments": [
            "(*Optional[str]) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        "line": 440,
        "func_name": "option_context.__enter__",
        "type_comments": [
            "() -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        "line": 446,
        "func_name": "option_context.__exit__",
        "type_comments": [
            "(*None) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        "line": 578,
        "func_name": "_select_options",
        "type_comments": [
            "(str) -> List[str]"
        ],
        "samples": 47
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        "line": 596,
        "func_name": "_get_root",
        "type_comments": [
            "(str) -> Tuple[Dict[str, Union[bool, str]], str]"
        ],
        "samples": 47
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        "line": 610,
        "func_name": "_get_deprecated_option",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 89
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        "line": 626,
        "func_name": "_get_registered_option",
        "type_comments": [
            "(str) -> pandas._config.config.RegisteredOption"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        "line": 637,
        "func_name": "_translate_key",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 47
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        "line": 649,
        "func_name": "_warn_if_deprecated",
        "type_comments": [
            "(str) -> bool"
        ],
        "samples": 47
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\_config\\config.py",
        "line": 847,
        "func_name": "inner",
        "type_comments": [
            "(None) -> None",
            "(str) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\compat\\_optional.py",
        "line": 70,
        "func_name": "get_version",
        "type_comments": [
            "(module) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\compat\\_optional.py",
        "line": 91,
        "func_name": "import_optional_dependency",
        "type_comments": [
            "(str, str, str, None) -> module",
            "(str, str, str, None) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\compat\\numpy\\function.py",
        "line": 60,
        "func_name": "CompatValidator.__call__",
        "type_comments": [
            "(Tuple[], Dict, None, None, None) -> None",
            "(Tuple[], Dict, str, None, None) -> None",
            "(Tuple[], Dict[str, None], str, None, None) -> None"
        ],
        "samples": 18
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\accessor.py",
        "line": 220,
        "func_name": "CachedAccessor.__get__",
        "type_comments": [
            "(pandas.core.series.Series, type) -> pandas.core.strings.accessor.StringMethods"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\algorithms.py",
        "line": 106,
        "func_name": "_ensure_data",
        "type_comments": [
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\algorithms.py",
        "line": 184,
        "func_name": "_reconstruct_data",
        "type_comments": [
            "(numpy.ndarray, numpy.dtypes.ObjectDType, numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\algorithms.py",
        "line": 217,
        "func_name": "_ensure_arraylike",
        "type_comments": [
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\algorithms.py",
        "line": 251,
        "func_name": "_get_hashtable_algo",
        "type_comments": [
            "(numpy.ndarray) -> Tuple[type, numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\algorithms.py",
        "line": 269,
        "func_name": "_check_object_for_strings",
        "type_comments": [
            "(numpy.ndarray) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\algorithms.py",
        "line": 534,
        "func_name": "factorize_array",
        "type_comments": [
            "(numpy.ndarray, bool, None, None, None) -> Tuple[numpy.ndarray, numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\algorithms.py",
        "line": 596,
        "func_name": "factorize",
        "type_comments": [
            "(numpy.ndarray, bool, bool, None) -> Tuple[numpy.ndarray, numpy.ndarray]",
            "(pandas.core.series.Series, bool, bool, None) -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\algorithms.py",
        "line": 1165,
        "func_name": "take",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, int, bool, float) -> numpy.ndarray",
            "(numpy.ndarray, numpy.ndarray, int, bool, pandas._libs.missing.NAType) -> numpy.ndarray"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\algorithms.py",
        "line": 1267,
        "func_name": "searchsorted",
        "type_comments": [
            "(numpy.ndarray, int, str, None) -> numpy.int64"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\algorithms.py",
        "line": 1471,
        "func_name": "safe_sort",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, bool, bool, bool) -> Tuple[numpy.ndarray, numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 73,
        "func_name": "frame_apply",
        "type_comments": [
            "(pandas.core.frame.DataFrame, function, int, bool, None, Tuple[], Dict) -> pandas.core.apply.FrameRowApply"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 103,
        "func_name": "Apply.__init__",
        "type_comments": [
            "(pandas.core.frame.DataFrame, function, bool, None, Tuple[], Dict) -> None",
            "(pandas.core.series.Series, function, bool, None, Tuple[], Dict) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 591,
        "func_name": "index",
        "type_comments": [
            "() -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 629,
        "func_name": "res_columns",
        "type_comments": [
            "() -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 633,
        "func_name": "columns",
        "type_comments": [
            "() -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 645,
        "func_name": "FrameApply.apply",
        "type_comments": [
            "() -> pandas.core.frame.DataFrame"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 797,
        "func_name": "FrameApply.apply_standard",
        "type_comments": [
            "() -> pandas.core.frame.DataFrame"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 803,
        "func_name": "FrameApply.apply_series_generator",
        "type_comments": [
            "() -> Tuple[Dict[int, pandas.core.series.Series], pandas.core.indexes.base.Index]",
            "() -> Tuple[Dict[int, numpy.ndarray], pandas.core.indexes.base.Index]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 822,
        "func_name": "FrameApply.wrap_results",
        "type_comments": [
            "(Dict[int, numpy.ndarray], pandas.core.indexes.base.Index) -> pandas.core.frame.DataFrame",
            "(Dict[int, pandas.core.series.Series], pandas.core.indexes.base.Index) -> pandas.core.frame.DataFrame"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 857,
        "func_name": "series_generator",
        "type_comments": [
            "() -> generator"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 861,
        "func_name": "result_index",
        "type_comments": [
            "() -> pandas.core.indexes.base.Index"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 865,
        "func_name": "result_columns",
        "type_comments": [
            "() -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 869,
        "func_name": "FrameRowApply.wrap_results_for_axis",
        "type_comments": [
            "(Dict[int, numpy.ndarray], pandas.core.indexes.base.Index) -> pandas.core.frame.DataFrame",
            "(Dict[int, pandas.core.series.Series], pandas.core.indexes.base.Index) -> pandas.core.frame.DataFrame"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 991,
        "func_name": "SeriesApply.__init__",
        "type_comments": [
            "(pandas.core.series.Series, function, bool, Tuple[], Dict) -> None",
            "(pandas.core.series.Series, functools._lru_cache_wrapper, bool, Tuple[], Dict) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 1010,
        "func_name": "SeriesApply.apply",
        "type_comments": [
            "() -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\apply.py",
        "line": 1061,
        "func_name": "SeriesApply.apply_standard",
        "type_comments": [
            "() -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\putmask.py",
        "line": 29,
        "func_name": "putmask_inplace",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, float) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\putmask.py",
        "line": 62,
        "func_name": "putmask_without_repeat",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, float) -> None",
            "(numpy.ndarray, numpy.ndarray, numpy.float64) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\putmask.py",
        "line": 104,
        "func_name": "validate_putmask",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray) -> Tuple[numpy.ndarray, bool]"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\putmask.py",
        "line": 118,
        "func_name": "extract_bool_array",
        "type_comments": [
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\putmask.py",
        "line": 132,
        "func_name": "setitem_datetimelike_compat",
        "type_comments": [
            "(numpy.ndarray, int, numpy.ndarray) -> numpy.ndarray",
            "(numpy.ndarray, numpy.int32, numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\replace.py",
        "line": 29,
        "func_name": "should_use_regex",
        "type_comments": [
            "(bool, str) -> bool"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\replace.py",
        "line": 43,
        "func_name": "compare_or_regex_search",
        "type_comments": [
            "(numpy.ndarray, str, bool, numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\replace.py",
        "line": 66,
        "func_name": "_check_comparison_types",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, str) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\replace.py",
        "line": 109,
        "func_name": "replace_regex",
        "type_comments": [
            "(numpy.ndarray, re.Pattern, str, None) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\replace.py",
        "line": 139,
        "func_name": "re_replacer",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 23
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\take.py",
        "line": 58,
        "func_name": "take_nd",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, int, float, bool) -> numpy.ndarray",
            "(numpy.ndarray, numpy.ndarray, int, int, bool) -> numpy.ndarray"
        ],
        "samples": 26
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\take.py",
        "line": 120,
        "func_name": "_take_nd_ndarray",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, int, float, bool) -> numpy.ndarray",
            "(numpy.ndarray, numpy.ndarray, int, int, bool) -> numpy.ndarray"
        ],
        "samples": 26
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\take.py",
        "line": 287,
        "func_name": "_get_take_nd_function_cached",
        "type_comments": [
            "(int, numpy.dtypes.Float64DType, numpy.dtypes.Float64DType, int) -> builtin_function_or_method",
            "(int, numpy.dtypes.Int64DType, numpy.dtypes.Int64DType, int) -> builtin_function_or_method",
            "(int, numpy.dtypes.ObjectDType, numpy.dtypes.ObjectDType, int) -> builtin_function_or_method"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\take.py",
        "line": 325,
        "func_name": "_get_take_nd_function",
        "type_comments": [
            "(int, numpy.dtypes.Int64DType, numpy.dtypes.Int64DType, int, Tuple[None, bool]) -> builtin_function_or_method",
            "(int, numpy.dtypes.Int64DType, numpy.dtypes.Int64DType, int, None) -> builtin_function_or_method",
            "(int, numpy.dtypes.ObjectDType, numpy.dtypes.ObjectDType, int, None) -> builtin_function_or_method",
            "(int, numpy.dtypes.Float64DType, numpy.dtypes.Float64DType, int, None) -> builtin_function_or_method"
        ],
        "samples": 26
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\take.py",
        "line": 353,
        "func_name": "wrapper",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.bool_) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\array_algos\\take.py",
        "line": 564,
        "func_name": "_take_preprocess_indexer_and_fill_value",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, int, bool, None) -> Tuple[numpy.dtypes.Int64DType, numpy.int64, Tuple[None, bool]]",
            "(numpy.ndarray, numpy.ndarray, float, bool, None) -> Tuple[numpy.dtypes.ObjectDType, float, None]",
            "(numpy.ndarray, numpy.ndarray, int, bool, None) -> Tuple[numpy.dtypes.Int64DType, numpy.int64, None]",
            "(numpy.ndarray, numpy.ndarray, float, bool, None) -> Tuple[numpy.dtypes.Float64DType, float, None]"
        ],
        "samples": 26
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arraylike.py",
        "line": 38,
        "func_name": "__eq__",
        "type_comments": [
            "(str) -> numpy.ndarray"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arraylike.py",
        "line": 68,
        "func_name": "__and__",
        "type_comments": [
            "(pandas.core.series.Series) -> pandas.core.series.Series"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arraylike.py",
        "line": 76,
        "func_name": "__or__",
        "type_comments": [
            "(pandas.core.series.Series) -> pandas.core.series.Series"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arraylike.py",
        "line": 98,
        "func_name": "__add__",
        "type_comments": [
            "(str) -> pandas.core.arrays.string_.StringArray",
            "(str) -> pyannotate_runtime.collect_types.UnknownType",
            "(pandas.core.series.Series) -> pyannotate_runtime.collect_types.UnknownType",
            "(str) -> pandas.core.indexes.base.Index",
            "(numpy.ndarray) -> pandas.core.arrays.string_.StringArray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\_mixins.py",
        "line": 110,
        "func_name": "NDArrayBackedExtensionArray._box_func",
        "type_comments": [
            "(str) -> str",
            "(pandas._libs.missing.NAType) -> pandas._libs.missing.NAType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\_mixins.py",
        "line": 155,
        "func_name": "NDArrayBackedExtensionArray.take",
        "type_comments": [
            "(numpy.ndarray, bool, pandas._libs.missing.NAType, int) -> pandas.core.arrays.string_.StringArray"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\_mixins.py",
        "line": 215,
        "func_name": "_concat_same_type",
        "type_comments": [
            "(List[pandas.core.arrays.string_.StringArray], int) -> pandas.core.arrays.string_.StringArray"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\_mixins.py",
        "line": 247,
        "func_name": "NDArrayBackedExtensionArray.__setitem__",
        "type_comments": [
            "(numpy.ndarray, pandas._libs.missing.NAType) -> None",
            "(numpy.ndarray, numpy.ndarray) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\_mixins.py",
        "line": 252,
        "func_name": "NDArrayBackedExtensionArray._validate_setitem_value",
        "type_comments": [
            "(float) -> float",
            "(pandas._libs.missing.NAType) -> pandas._libs.missing.NAType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\_mixins.py",
        "line": 266,
        "func_name": "NDArrayBackedExtensionArray.__getitem__",
        "type_comments": [
            "(slice) -> pandas.core.arrays.string_.StringArray",
            "(int) -> str",
            "(numpy.ndarray) -> pandas.core.arrays.string_.StringArray",
            "(int) -> pandas._libs.missing.NAType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\_mixins.py",
        "line": 295,
        "func_name": "NDArrayBackedExtensionArray.fillna",
        "type_comments": [
            "(float, None, None) -> pandas.core.arrays.string_.StringArray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\arrow\\dtype.py",
        "line": 195,
        "func_name": "construct_from_string",
        "type_comments": [
            "(str) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\base.py",
        "line": 407,
        "func_name": "ExtensionArray.__iter__",
        "type_comments": [
            "() -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\base.py",
        "line": 510,
        "func_name": "size",
        "type_comments": [
            "() -> numpy.int32"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\boolean.py",
        "line": 69,
        "func_name": "type",
        "type_comments": [
            "() -> type"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\boolean.py",
        "line": 73,
        "func_name": "kind",
        "type_comments": [
            "() -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\boolean.py",
        "line": 77,
        "func_name": "numpy_dtype",
        "type_comments": [
            "() -> numpy.dtypes.BoolDType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\boolean.py",
        "line": 81,
        "func_name": "construct_array_type",
        "type_comments": [
            "() -> type"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\boolean.py",
        "line": 92,
        "func_name": "BooleanDtype.__repr__",
        "type_comments": [
            "() -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\boolean.py",
        "line": 145,
        "func_name": "coerce_to_array",
        "type_comments": [
            "(List, None, bool) -> Tuple[numpy.ndarray, numpy.ndarray]",
            "(numpy.ndarray, None, bool) -> Tuple[numpy.ndarray, numpy.ndarray]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\boolean.py",
        "line": 294,
        "func_name": "BooleanArray.__init__",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\boolean.py",
        "line": 305,
        "func_name": "dtype",
        "type_comments": [
            "() -> pandas.core.arrays.boolean.BooleanDtype"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\boolean.py",
        "line": 337,
        "func_name": "_coerce_to_array",
        "type_comments": [
            "(List, pandas.core.arrays.boolean.BooleanDtype, bool) -> Tuple[numpy.ndarray, numpy.ndarray]",
            "(numpy.ndarray, pandas.core.arrays.boolean.BooleanDtype, bool) -> Tuple[numpy.ndarray, numpy.ndarray]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\categorical.py",
        "line": 359,
        "func_name": "Categorical.__init__",
        "type_comments": [
            "(Tuple[str, str, str, str, str, str, str, str, str, str], None, bool, None, bool, bool) -> None",
            "(pandas.core.series.Series, None, bool, None, bool, bool) -> None",
            "(pandas.core.indexes.base.Index, None, bool, None, bool, bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\categorical.py",
        "line": 459,
        "func_name": "dtype",
        "type_comments": [
            "() -> pandas.core.dtypes.dtypes.CategoricalDtype"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\categorical.py",
        "line": 697,
        "func_name": "categories",
        "type_comments": [
            "() -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\categorical.py",
        "line": 733,
        "func_name": "codes",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\categorical.py",
        "line": 1772,
        "func_name": "_codes",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\categorical.py",
        "line": 2541,
        "func_name": "factorize_from_iterable",
        "type_comments": [
            "(pandas.core.series.Series) -> Tuple[numpy.ndarray, pandas.core.indexes.base.Index]",
            "(pandas.core.indexes.base.Index) -> Tuple[numpy.ndarray, pandas.core.indexes.base.Index]",
            "(Tuple[str, str, str, str, str, str, str, str, str, str]) -> Tuple[numpy.ndarray, pandas.core.indexes.base.Index]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\categorical.py",
        "line": 2582,
        "func_name": "factorize_from_iterables",
        "type_comments": [
            "(List[pandas.core.series.Series]) -> Tuple[List[numpy.ndarray], List[pandas.core.indexes.base.Index]]",
            "(List[pandas.core.indexes.base.Index]) -> Tuple[List[numpy.ndarray], List[pandas.core.indexes.base.Index]]",
            "(List[Tuple[str, str, str, str, str, str, str, str, str, str]]) -> Tuple[List[numpy.ndarray], List[pandas.core.indexes.base.Index]]"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\integer.py",
        "line": 27,
        "func_name": "construct_array_type",
        "type_comments": [
            "() -> type"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\integer.py",
        "line": 38,
        "func_name": "_str_to_dtype_mapping",
        "type_comments": [
            "() -> Dict[str, Union[pandas.core.arrays.integer.Int16Dtype, pandas.core.arrays.integer.Int32Dtype, pandas.core.arrays.integer.Int64Dtype, pandas.core.arrays.integer.Int8Dtype, pandas.core.arrays.integer.UInt8Dtype]]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\integer.py",
        "line": 42,
        "func_name": "_safe_cast",
        "type_comments": [
            "(numpy.ndarray, type, bool) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 117,
        "func_name": "BaseMaskedArray.__init__",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, bool) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 136,
        "func_name": "_from_sequence",
        "type_comments": [
            "(numpy.ndarray, pandas.core.arrays.boolean.BooleanDtype, bool) -> pandas.core.arrays.boolean.BooleanArray",
            "(numpy.ndarray, pandas.core.arrays.integer.Int8Dtype, bool) -> pandas.core.arrays.integer.IntegerArray",
            "(numpy.ndarray, pandas.core.arrays.integer.Int16Dtype, bool) -> pandas.core.arrays.integer.IntegerArray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 155,
        "func_name": "BaseMaskedArray.__getitem__",
        "type_comments": [
            "(int) -> numpy.bool_",
            "(int) -> numpy.int8",
            "(int) -> numpy.int16"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 169,
        "func_name": "BaseMaskedArray.fillna",
        "type_comments": [
            "(bool, None, None) -> pandas.core.arrays.boolean.BooleanArray",
            "(int, None, None) -> pandas.core.arrays.integer.IntegerArray",
            "(float, None, None) -> pandas.core.arrays.integer.IntegerArray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 206,
        "func_name": "BaseMaskedArray._validate_setitem_value",
        "type_comments": [
            "(bool) -> bool",
            "(int) -> int"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 233,
        "func_name": "BaseMaskedArray.__setitem__",
        "type_comments": [
            "(numpy.ndarray, float) -> None",
            "(numpy.ndarray, int) -> None",
            "(numpy.ndarray, bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 266,
        "func_name": "BaseMaskedArray.__len__",
        "type_comments": [
            "() -> int"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 269,
        "func_name": "shape",
        "type_comments": [
            "() -> Tuple[int]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 273,
        "func_name": "ndim",
        "type_comments": [
            "() -> int"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 349,
        "func_name": "BaseMaskedArray.to_numpy",
        "type_comments": [
            "(numpy.dtypes.StrDType, bool, pandas._libs.lib._NoDefault) -> numpy.ndarray",
            "(numpy.dtypes.ObjectDType, bool, pandas._libs.lib._NoDefault) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 460,
        "func_name": "BaseMaskedArray.astype",
        "type_comments": [
            "(numpy.dtypes.StrDType, bool) -> numpy.ndarray",
            "(type, bool) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 602,
        "func_name": "_hasna",
        "type_comments": [
            "() -> numpy.bool_"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 823,
        "func_name": "BaseMaskedArray.isna",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 834,
        "func_name": "_concat_same_type",
        "type_comments": [
            "(List[pandas.core.arrays.boolean.BooleanArray], int) -> pandas.core.arrays.boolean.BooleanArray",
            "(List[pandas.core.arrays.integer.IntegerArray], int) -> pandas.core.arrays.integer.IntegerArray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 844,
        "func_name": "BaseMaskedArray.take",
        "type_comments": [
            "(numpy.ndarray, bool, pandas._libs.missing.NAType, int) -> pandas.core.arrays.boolean.BooleanArray",
            "(numpy.ndarray, bool, pandas._libs.missing.NAType, int) -> pandas.core.arrays.integer.IntegerArray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\masked.py",
        "line": 900,
        "func_name": "BaseMaskedArray.copy",
        "type_comments": [
            "() -> pandas.core.arrays.boolean.BooleanArray",
            "() -> pandas.core.arrays.integer.IntegerArray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\numeric.py",
        "line": 51,
        "func_name": "NumericDtype.__repr__",
        "type_comments": [
            "() -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\numeric.py",
        "line": 120,
        "func_name": "_standardize_dtype",
        "type_comments": [
            "(pandas.core.arrays.integer.Int16Dtype) -> pandas.core.arrays.integer.Int16Dtype",
            "(pandas.core.arrays.integer.Int8Dtype) -> pandas.core.arrays.integer.Int8Dtype"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\numeric.py",
        "line": 148,
        "func_name": "_coerce_to_data_and_mask",
        "type_comments": [
            "(numpy.ndarray, None, pandas.core.arrays.integer.Int16Dtype, bool, type, numpy.dtypes.Int64DType) -> Tuple[numpy.ndarray, numpy.ndarray, type, None]",
            "(numpy.ndarray, None, pandas.core.arrays.integer.Int8Dtype, bool, type, numpy.dtypes.Int64DType) -> Tuple[numpy.ndarray, numpy.ndarray, type, None]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\numeric.py",
        "line": 245,
        "func_name": "NumericArray.__init__",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\numeric.py",
        "line": 265,
        "func_name": "dtype",
        "type_comments": [
            "() -> pandas.core.arrays.integer.Int16Dtype",
            "() -> pandas.core.arrays.integer.Int8Dtype"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\numeric.py",
        "line": 270,
        "func_name": "_coerce_to_array",
        "type_comments": [
            "(numpy.ndarray, pandas.core.arrays.integer.Int16Dtype, bool) -> Tuple[numpy.ndarray, numpy.ndarray]",
            "(numpy.ndarray, pandas.core.arrays.integer.Int8Dtype, bool) -> Tuple[numpy.ndarray, numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\numpy_.py",
        "line": 79,
        "func_name": "PandasArray.__init__",
        "type_comments": [
            "(numpy.ndarray, bool) -> None"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\numpy_.py",
        "line": 122,
        "func_name": "PandasArray._from_backing_data",
        "type_comments": [
            "(numpy.ndarray) -> pandas.core.arrays.string_.StringArray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\numpy_.py",
        "line": 128,
        "func_name": "dtype",
        "type_comments": [
            "() -> pandas.core.arrays.string_.StringDtype"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\numpy_.py",
        "line": 135,
        "func_name": "PandasArray.__array__",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> numpy.ndarray"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\numpy_.py",
        "line": 193,
        "func_name": "PandasArray.astype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType, bool) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\numpy_.py",
        "line": 204,
        "func_name": "PandasArray.isna",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\numpy_.py",
        "line": 207,
        "func_name": "PandasArray._validate_scalar",
        "type_comments": [
            "(pandas._libs.missing.NAType) -> pandas._libs.missing.NAType"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\sparse\\dtype.py",
        "line": 223,
        "func_name": "construct_from_string",
        "type_comments": [
            "(str) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\string_.py",
        "line": 103,
        "func_name": "na_value",
        "type_comments": [
            "() -> pandas._libs.missing.NAType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\string_.py",
        "line": 109,
        "func_name": "StringDtype.__init__",
        "type_comments": [
            "(None) -> None",
            "(str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\string_.py",
        "line": 122,
        "func_name": "type",
        "type_comments": [
            "() -> type"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\string_.py",
        "line": 126,
        "func_name": "construct_from_string",
        "type_comments": [
            "(str) -> pyannotate_runtime.collect_types.NoReturnType",
            "(str) -> pandas.core.arrays.string_.StringDtype"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\string_.py",
        "line": 170,
        "func_name": "StringDtype.construct_array_type",
        "type_comments": [
            "() -> abc.ABCMeta"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\string_.py",
        "line": 314,
        "func_name": "StringArray.__init__",
        "type_comments": [
            "(numpy.ndarray, bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\string_.py",
        "line": 322,
        "func_name": "StringArray._validate",
        "type_comments": [
            "() -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\string_.py",
        "line": 338,
        "func_name": "_from_sequence",
        "type_comments": [
            "(numpy.ndarray, pandas.core.arrays.string_.StringDtype, bool) -> pandas.core.arrays.string_.StringArray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\string_.py",
        "line": 398,
        "func_name": "StringArray.__setitem__",
        "type_comments": [
            "(numpy.ndarray, float) -> None",
            "(numpy.ndarray, pandas.core.arrays.string_.StringArray) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\string_.py",
        "line": 437,
        "func_name": "StringArray.astype",
        "type_comments": [
            "(pandas.core.arrays.string_.StringDtype, bool) -> pandas.core.arrays.string_.StringArray",
            "(type, bool) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\arrays\\string_.py",
        "line": 519,
        "func_name": "StringArray._cmp_method",
        "type_comments": [
            "(numpy.ndarray, builtin_function_or_method) -> pandas.core.arrays.string_.StringArray",
            "(str, builtin_function_or_method) -> pandas.core.arrays.string_.StringArray"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\base.py",
        "line": 122,
        "func_name": "PandasObject._reset_cache",
        "type_comments": [
            "(None) -> None"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\base.py",
        "line": 159,
        "func_name": "NoNewAttributesMixin._freeze",
        "type_comments": [
            "() -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\base.py",
        "line": 166,
        "func_name": "NoNewAttributesMixin.__setattr__",
        "type_comments": [
            "(str, pandas.core.series.Series) -> None",
            "(str, None) -> None",
            "(str, str) -> None",
            "(str, bool) -> None"
        ],
        "samples": 22
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\base.py",
        "line": 326,
        "func_name": "ndim",
        "type_comments": [
            "() -> int"
        ],
        "samples": 182
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\base.py",
        "line": 359,
        "func_name": "size",
        "type_comments": [
            "() -> int"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\base.py",
        "line": 563,
        "func_name": "empty",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\base.py",
        "line": 746,
        "func_name": "IndexOpsMixin.tolist",
        "type_comments": [
            "() -> List[str]",
            "() -> List[int]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\base.py",
        "line": 767,
        "func_name": "IndexOpsMixin.__iter__",
        "type_comments": [
            "() -> map"
        ],
        "samples": 15
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\base.py",
        "line": 825,
        "func_name": "IndexOpsMixin._map_values",
        "type_comments": [
            "(Dict[str, int], None) -> numpy.ndarray",
            "(Dict[str, str], None) -> numpy.ndarray",
            "(function, None) -> numpy.ndarray"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\base.py",
        "line": 1146,
        "func_name": "IndexOpsMixin.factorize",
        "type_comments": [
            "(bool, bool) -> Tuple[numpy.ndarray, pandas.core.indexes.base.Index]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\base.py",
        "line": 1339,
        "func_name": "IndexOpsMixin._arith_method",
        "type_comments": [
            "(str, builtin_function_or_method) -> pandas.core.indexes.base.Index",
            "(str, builtin_function_or_method) -> pandas.core.series.Series",
            "(pandas.core.series.Series, builtin_function_or_method) -> pandas.core.series.Series"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 95,
        "func_name": "is_bool_indexer",
        "type_comments": [
            "(int) -> bool",
            "(pandas.core.series.Series) -> bool",
            "(numpy.ndarray) -> bool"
        ],
        "samples": 17
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 150,
        "func_name": "cast_scalar_indexer",
        "type_comments": [
            "(int) -> int"
        ],
        "samples": 15
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 172,
        "func_name": "not_none",
        "type_comments": [
            "(*Union[pandas.core.frame.DataFrame, skombo.fd_ops.FrameData]) -> generator",
            "(*pandas.core.frame.DataFrame) -> generator"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 186,
        "func_name": "all_none",
        "type_comments": [
            "(*Optional[int]) -> bool"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 229,
        "func_name": "asarray_tuplesafe",
        "type_comments": [
            "(numpy.ndarray, numpy.dtypes.ObjectDType) -> numpy.ndarray",
            "(List[str], None) -> numpy.ndarray"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 296,
        "func_name": "maybe_iterable_to_list",
        "type_comments": [
            "(List[numpy.ndarray]) -> List[numpy.ndarray]",
            "(float) -> float",
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 15
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 306,
        "func_name": "is_null_slice",
        "type_comments": [
            "(List[str]) -> bool",
            "(Tuple[str, slice]) -> bool",
            "(slice) -> bool",
            "(str) -> bool",
            "(pandas.core.series.Series) -> bool"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 318,
        "func_name": "is_empty_slice",
        "type_comments": [
            "(numpy.ndarray) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 330,
        "func_name": "is_true_slices",
        "type_comments": [
            "(Tuple[str, slice]) -> List[bool]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 338,
        "func_name": "is_full_slice",
        "type_comments": [
            "(numpy.ndarray, int) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 367,
        "func_name": "apply_if_callable",
        "type_comments": [
            "(numpy.int64, pandas.core.series.Series) -> numpy.int64",
            "(numpy.ndarray, skombo.fd_ops.FrameData) -> numpy.ndarray",
            "(str, skombo.fd_ops.FrameData) -> str",
            "(str, pandas.core.frame.DataFrame) -> str",
            "(Tuple[str, str], pandas.core.frame.DataFrame) -> Tuple[str, str]",
            "(pandas.core.series.Series, pandas.core.frame.DataFrame) -> pandas.core.series.Series",
            "(int, pandas.core.frame.DataFrame) -> int",
            "(str, pandas.core.series.Series) -> str"
        ],
        "samples": 182
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 521,
        "func_name": "get_rename_function",
        "type_comments": [
            "(Dict[str, str]) -> function"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 527,
        "func_name": "f",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 536,
        "func_name": "convert_to_list_like",
        "type_comments": [
            "(Tuple[str, str, str, str, str, str, str, str, str, str]) -> List[str]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\common.py",
        "line": 571,
        "func_name": "require_length_match",
        "type_comments": [
            "(numpy.ndarray, pandas.core.indexes.range.RangeIndex) -> None",
            "(numpy.ndarray, pandas.core.indexes.multi.MultiIndex) -> None",
            "(List[numpy.ndarray], pandas.core.indexes.base.Index) -> None",
            "(numpy.ndarray, pandas.core.indexes.base.Index) -> None"
        ],
        "samples": 165
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\computation\\expressions.py",
        "line": 169,
        "func_name": "_where_standard",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\computation\\expressions.py",
        "line": 243,
        "func_name": "where",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, numpy.ndarray, bool) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\construction.py",
        "line": 396,
        "func_name": "extract_array",
        "type_comments": [
            "(Tuple[str, str, str], bool, bool) -> Tuple[str, str, str]",
            "(List[str], bool, bool) -> List[str]",
            "(List[numpy.ndarray], bool, bool) -> List[numpy.ndarray]",
            "(numpy.ndarray, bool, bool) -> numpy.ndarray",
            "(pandas.core.indexes.base.Index, bool, bool) -> numpy.ndarray",
            "(pandas.core.series.Series, bool, bool) -> numpy.ndarray",
            "(float, bool, bool) -> float",
            "(str, bool, bool) -> str"
        ],
        "samples": 477
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\construction.py",
        "line": 458,
        "func_name": "ensure_wrapped_if_datetimelike",
        "type_comments": [
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 212
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\construction.py",
        "line": 494,
        "func_name": "sanitize_array",
        "type_comments": [
            "(numpy.ndarray, pandas.core.indexes.base.Index, None, bool, bool) -> numpy.ndarray",
            "(numpy.ndarray, None, None, bool, bool) -> numpy.ndarray",
            "(List[numpy.ndarray], pandas.core.indexes.base.Index, numpy.dtypes.ObjectDType, bool, bool) -> numpy.ndarray",
            "(List[str], None, None, bool, bool) -> numpy.ndarray",
            "(Tuple[str, str, str], None, None, bool, bool) -> numpy.ndarray",
            "(numpy.ndarray, pandas.core.indexes.multi.MultiIndex, numpy.dtypes.ObjectDType, bool, bool) -> numpy.ndarray",
            "(numpy.ndarray, pandas.core.indexes.range.RangeIndex, numpy.dtypes.ObjectDType, bool, bool) -> numpy.ndarray",
            "(float, pandas.core.indexes.range.RangeIndex, numpy.dtypes.ObjectDType, bool, bool) -> numpy.ndarray"
        ],
        "samples": 321
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\construction.py",
        "line": 636,
        "func_name": "_sanitize_non_ordered",
        "type_comments": [
            "(List[numpy.ndarray]) -> None",
            "(List[str]) -> None",
            "(Tuple[str, str, str]) -> None"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\construction.py",
        "line": 644,
        "func_name": "_sanitize_ndim",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, None, None, bool) -> numpy.ndarray",
            "(numpy.ndarray, numpy.ndarray, numpy.dtypes.ObjectDType, pandas.core.indexes.multi.MultiIndex, bool) -> numpy.ndarray",
            "(numpy.ndarray, numpy.ndarray, None, pandas.core.indexes.base.Index, bool) -> numpy.ndarray",
            "(numpy.ndarray, List[str], None, None, bool) -> numpy.ndarray",
            "(numpy.ndarray, List[numpy.ndarray], numpy.dtypes.ObjectDType, pandas.core.indexes.base.Index, bool) -> numpy.ndarray",
            "(numpy.ndarray, numpy.ndarray, None, pandas.core.indexes.range.RangeIndex, bool) -> numpy.ndarray",
            "(numpy.ndarray, numpy.ndarray, numpy.dtypes.ObjectDType, pandas.core.indexes.range.RangeIndex, bool) -> numpy.ndarray",
            "(numpy.ndarray, List[str], None, pandas.core.indexes.range.RangeIndex, bool) -> numpy.ndarray"
        ],
        "samples": 172
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\construction.py",
        "line": 683,
        "func_name": "_sanitize_str_dtypes",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, numpy.dtypes.ObjectDType, bool) -> numpy.ndarray",
            "(numpy.ndarray, numpy.ndarray, numpy.dtypes.BoolDType, bool) -> numpy.ndarray",
            "(numpy.ndarray, numpy.ndarray, None, bool) -> numpy.ndarray",
            "(numpy.ndarray, List[str], None, bool) -> numpy.ndarray",
            "(numpy.ndarray, List[numpy.ndarray], numpy.dtypes.ObjectDType, bool) -> numpy.ndarray"
        ],
        "samples": 172
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\construction.py",
        "line": 703,
        "func_name": "_maybe_repeat",
        "type_comments": [
            "(numpy.ndarray, pandas.core.indexes.range.RangeIndex) -> numpy.ndarray",
            "(numpy.ndarray, pandas.core.indexes.multi.MultiIndex) -> numpy.ndarray",
            "(numpy.ndarray, None) -> numpy.ndarray",
            "(numpy.ndarray, pandas.core.indexes.base.Index) -> numpy.ndarray"
        ],
        "samples": 172
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\construction.py",
        "line": 714,
        "func_name": "_try_cast",
        "type_comments": [
            "(numpy.ndarray, numpy.dtypes.BoolDType, bool) -> numpy.ndarray",
            "(List[numpy.ndarray], numpy.dtypes.ObjectDType, bool) -> numpy.ndarray",
            "(numpy.ndarray, numpy.dtypes.ObjectDType, bool) -> numpy.ndarray"
        ],
        "samples": 152
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\astype.py",
        "line": 60,
        "func_name": "_astype_nansafe",
        "type_comments": [
            "(numpy.ndarray, numpy.dtypes.ObjectDType, bool, bool) -> numpy.ndarray",
            "(numpy.ndarray, numpy.dtypes.StrDType, bool, bool) -> numpy.ndarray"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\astype.py",
        "line": 162,
        "func_name": "astype_array",
        "type_comments": [
            "(numpy.ndarray, numpy.dtypes.StrDType, bool) -> numpy.ndarray",
            "(numpy.ndarray, numpy.dtypes.BoolDType, bool) -> numpy.ndarray",
            "(numpy.ndarray, numpy.dtypes.ObjectDType, bool) -> numpy.ndarray"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\astype.py",
        "line": 196,
        "func_name": "astype_array_safe",
        "type_comments": [
            "(numpy.ndarray, str, bool, str) -> numpy.ndarray",
            "(numpy.ndarray, type, bool, str) -> numpy.ndarray"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\base.py",
        "line": 106,
        "func_name": "ExtensionDtype.__eq__",
        "type_comments": [
            "(numpy.dtypes.Float64DType) -> bool",
            "(numpy.dtypes.ObjectDType) -> bool",
            "(numpy.dtypes.Int8DType) -> bool"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\base.py",
        "line": 135,
        "func_name": "ExtensionDtype.__hash__",
        "type_comments": [
            "() -> int"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\base.py",
        "line": 166,
        "func_name": "kind",
        "type_comments": [
            "() -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\base.py",
        "line": 229,
        "func_name": "construct_from_string",
        "type_comments": [
            "(str) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\base.py",
        "line": 286,
        "func_name": "is_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool",
            "(numpy.dtypes.Int64DType) -> bool",
            "(pandas.core.series.Series) -> bool"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\base.py",
        "line": 358,
        "func_name": "ExtensionDtype._get_common_dtype",
        "type_comments": [
            "(List[Union[pandas.core.arrays.boolean.BooleanDtype, pandas.core.arrays.integer.Int16Dtype, pandas.core.arrays.integer.Int8Dtype, pandas.core.arrays.string_.StringDtype]]) -> None",
            "(List[Union[numpy.dtypes.BoolDType, numpy.dtypes.Int16DType, numpy.dtypes.Int8DType, pandas.core.arrays.string_.StringDtype]]) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\base.py",
        "line": 386,
        "func_name": "_can_hold_na",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\base.py",
        "line": 403,
        "func_name": "StorageExtensionDtype.__repr__",
        "type_comments": [
            "() -> str"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\base.py",
        "line": 406,
        "func_name": "StorageExtensionDtype.__str__",
        "type_comments": [
            "() -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\base.py",
        "line": 409,
        "func_name": "StorageExtensionDtype.__eq__",
        "type_comments": [
            "(numpy.dtypes.Float64DType) -> bool",
            "(numpy.dtypes.ObjectDType) -> bool"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\base.py",
        "line": 414,
        "func_name": "StorageExtensionDtype.__hash__",
        "type_comments": [
            "() -> int"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\base.py",
        "line": 494,
        "func_name": "Registry.find",
        "type_comments": [
            "(str) -> pandas.core.arrays.integer.Int8Dtype",
            "(type) -> None",
            "(None) -> None"
        ],
        "samples": 28
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 123,
        "func_name": "maybe_convert_platform",
        "type_comments": [
            "(List[str]) -> numpy.ndarray"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 264,
        "func_name": "maybe_downcast_to_dtype",
        "type_comments": [
            "(numpy.ndarray, str) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 334,
        "func_name": "maybe_downcast_numeric",
        "type_comments": [
            "(numpy.ndarray, numpy.dtypes.ObjectDType, bool) -> numpy.ndarray",
            "(numpy.ndarray, numpy.dtypes.Int64DType, bool) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 448,
        "func_name": "maybe_cast_pointwise_result",
        "type_comments": [
            "(numpy.ndarray, numpy.dtypes.ObjectDType, bool, bool) -> numpy.ndarray"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 540,
        "func_name": "ensure_dtype_can_hold_na",
        "type_comments": [
            "(numpy.dtypes.Float64DType) -> numpy.dtypes.Float64DType",
            "(numpy.dtypes.Int64DType) -> numpy.dtypes.Float64DType"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 566,
        "func_name": "maybe_promote",
        "type_comments": [
            "(numpy.dtypes.Int64DType, int) -> Tuple[numpy.dtypes.Int64DType, numpy.int64]",
            "(numpy.dtypes.Float64DType, float) -> Tuple[numpy.dtypes.Float64DType, float]",
            "(numpy.dtypes.ObjectDType, float) -> Tuple[numpy.dtypes.ObjectDType, float]",
            "(numpy.dtypes.BoolDType, bool) -> Tuple[numpy.dtypes.BoolDType, numpy.bool_]"
        ],
        "samples": 25
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 621,
        "func_name": "_maybe_promote_cached",
        "type_comments": [
            "(numpy.dtypes.Float64DType, float, type) -> Tuple[numpy.dtypes.Float64DType, float]",
            "(numpy.dtypes.Int64DType, float, type) -> Tuple[numpy.dtypes.Float64DType, float]",
            "(numpy.dtypes.ObjectDType, pandas._libs.missing.NAType, type) -> Tuple[numpy.dtypes.ObjectDType, pandas._libs.missing.NAType]",
            "(numpy.dtypes.Int64DType, int, type) -> Tuple[numpy.dtypes.Int64DType, numpy.int64]",
            "(numpy.dtypes.ObjectDType, float, type) -> Tuple[numpy.dtypes.ObjectDType, float]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 629,
        "func_name": "_maybe_promote",
        "type_comments": [
            "(numpy.dtypes.Float64DType, float) -> Tuple[numpy.dtypes.Float64DType, float]",
            "(numpy.dtypes.Int64DType, float) -> Tuple[numpy.dtypes.Float64DType, float]",
            "(numpy.dtypes.ObjectDType, pandas._libs.missing.NAType) -> Tuple[numpy.dtypes.ObjectDType, pandas._libs.missing.NAType]",
            "(numpy.dtypes.Int64DType, int) -> Tuple[numpy.dtypes.Int64DType, numpy.int64]",
            "(numpy.dtypes.ObjectDType, float) -> Tuple[numpy.dtypes.ObjectDType, float]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 742,
        "func_name": "_ensure_dtype_type",
        "type_comments": [
            "(bool, numpy.dtypes.BoolDType) -> numpy.bool_",
            "(int, numpy.dtypes.Int8DType) -> numpy.int8",
            "(int, numpy.dtypes.Int16DType) -> numpy.int16",
            "(int, numpy.dtypes.Int64DType) -> numpy.int64"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 767,
        "func_name": "infer_dtype_from",
        "type_comments": [
            "(numpy.ndarray, bool) -> Tuple[numpy.dtypes.ObjectDType, numpy.ndarray]"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 784,
        "func_name": "infer_dtype_from_scalar",
        "type_comments": [
            "(bool, bool) -> Tuple[numpy.dtypes.BoolDType, bool]",
            "(float, bool) -> Tuple[numpy.dtypes.Float64DType, float]",
            "(str, bool) -> Tuple[numpy.dtypes.ObjectDType, str]"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 891,
        "func_name": "infer_dtype_from_array",
        "type_comments": [
            "(numpy.ndarray, bool) -> Tuple[numpy.dtypes.ObjectDType, numpy.ndarray]"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 947,
        "func_name": "_maybe_infer_dtype_type",
        "type_comments": [
            "(numpy.ndarray) -> numpy.dtypes.ObjectDType",
            "(float) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 998,
        "func_name": "coerce_indexer_dtype",
        "type_comments": [
            "(numpy.ndarray, pandas.core.indexes.base.Index) -> numpy.ndarray"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 1171,
        "func_name": "maybe_infer_to_datetimelike",
        "type_comments": [
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 135
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 1302,
        "func_name": "find_result_type",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray) -> numpy.dtypes.ObjectDType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 1388,
        "func_name": "np_find_common_type",
        "type_comments": [
            "(*Union[numpy.dtypes.Float64DType, numpy.dtypes.ObjectDType]) -> numpy.dtypes.ObjectDType",
            "(*numpy.dtypes.ObjectDType) -> numpy.dtypes.ObjectDType",
            "(*numpy.dtypes.Int64DType) -> numpy.dtypes.Int64DType"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 1429,
        "func_name": "find_common_type",
        "type_comments": [
            "(List[Union[numpy.dtypes.Float64DType, numpy.dtypes.ObjectDType]]) -> numpy.dtypes.ObjectDType",
            "(List[Union[numpy.dtypes.BoolDType, numpy.dtypes.Int16DType, numpy.dtypes.Int8DType, pandas.core.arrays.string_.StringDtype]]) -> numpy.dtypes.ObjectDType"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 1512,
        "func_name": "construct_1d_arraylike_from_scalar",
        "type_comments": [
            "(float, int, numpy.dtypes.ObjectDType) -> numpy.ndarray",
            "(float, int, None) -> numpy.ndarray"
        ],
        "samples": 153
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 1573,
        "func_name": "construct_1d_object_array_from_listlike",
        "type_comments": [
            "(List[str]) -> numpy.ndarray",
            "(List[numpy.ndarray]) -> numpy.ndarray"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 1710,
        "func_name": "can_hold_element",
        "type_comments": [
            "(numpy.ndarray, str) -> bool"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\cast.py",
        "line": 1750,
        "func_name": "np_can_hold_element",
        "type_comments": [
            "(numpy.dtypes.Float64DType, numpy.ndarray) -> pyannotate_runtime.collect_types.NoReturnType",
            "(numpy.dtypes.ObjectDType, numpy.ndarray) -> numpy.ndarray",
            "(numpy.dtypes.Float64DType, float) -> numpy.float64",
            "(numpy.dtypes.ObjectDType, float) -> float",
            "(numpy.dtypes.ObjectDType, str) -> str"
        ],
        "samples": 151
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 112,
        "func_name": "ensure_python_int",
        "type_comments": [
            "(int) -> int"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 142,
        "func_name": "classes",
        "type_comments": [
            "(*type) -> function"
        ],
        "samples": 222
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 147,
        "func_name": "classes_and_not_datetimelike",
        "type_comments": [
            "(*type) -> function"
        ],
        "samples": 44
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 158,
        "func_name": "is_object_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool",
            "(numpy.dtypes.BoolDType) -> bool",
            "(numpy.dtypes.Float64DType) -> bool",
            "(numpy.ndarray) -> bool",
            "(pandas.core.series.Series) -> bool"
        ],
        "samples": 205
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 275,
        "func_name": "is_datetime64_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool",
            "(numpy.dtypes.Float64DType) -> bool"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 309,
        "func_name": "is_datetime64tz_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 351,
        "func_name": "is_timedelta64_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool",
            "(numpy.dtypes.Float64DType) -> bool"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 422,
        "func_name": "is_interval_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool",
            "(pandas.core.arrays.integer.Int8Dtype) -> bool"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 460,
        "func_name": "is_categorical_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool",
            "(numpy.dtypes.Int64DType) -> bool",
            "(pandas.core.series.Series) -> bool"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 498,
        "func_name": "is_string_or_object_np_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool",
            "(numpy.dtypes.Int64DType) -> bool",
            "(numpy.dtypes.Float64DType) -> bool"
        ],
        "samples": 16
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 505,
        "func_name": "is_string_dtype",
        "type_comments": [
            "(numpy.dtypes.Int64DType) -> bool",
            "(numpy.dtypes.ObjectDType) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 540,
        "func_name": "condition",
        "type_comments": [
            "(numpy.dtypes.Int64DType) -> bool",
            "(numpy.dtypes.ObjectDType) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 551,
        "func_name": "is_dtype_equal",
        "type_comments": [
            "(numpy.dtypes.BoolDType, numpy.dtypes.BoolDType) -> bool",
            "(numpy.dtypes.ObjectDType, numpy.dtypes.ObjectDType) -> bool",
            "(numpy.dtypes.ObjectDType, type) -> bool",
            "(numpy.dtypes.ObjectDType, numpy.dtypes.StrDType) -> bool",
            "(pandas.core.arrays.string_.StringDtype, pandas.core.arrays.string_.StringDtype) -> bool",
            "(numpy.dtypes.ObjectDType, pandas.core.arrays.string_.StringDtype) -> bool"
        ],
        "samples": 30
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 653,
        "func_name": "is_integer_dtype",
        "type_comments": [
            "(numpy.dtypes.Int64DType) -> bool",
            "(numpy.dtypes.Float64DType) -> bool",
            "(numpy.dtypes.BoolDType) -> bool",
            "(numpy.dtypes.ObjectDType) -> bool",
            "(numpy.dtypes.Int8DType) -> bool"
        ],
        "samples": 43
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 1077,
        "func_name": "needs_i8_conversion",
        "type_comments": [
            "(numpy.dtypes.BoolDType) -> bool",
            "(numpy.dtypes.Int64DType) -> bool",
            "(numpy.dtypes.ObjectDType) -> bool",
            "(numpy.dtypes.Float64DType) -> bool"
        ],
        "samples": 42
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 1127,
        "func_name": "is_numeric_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool",
            "(numpy.dtypes.Int64DType) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 1209,
        "func_name": "is_float_dtype",
        "type_comments": [
            "(numpy.dtypes.Float64DType) -> bool",
            "(numpy.dtypes.BoolDType) -> bool",
            "(numpy.dtypes.ObjectDType) -> bool",
            "(numpy.ndarray) -> bool"
        ],
        "samples": 21
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 1244,
        "func_name": "is_bool_dtype",
        "type_comments": [
            "(numpy.dtypes.BoolDType) -> bool",
            "(numpy.dtypes.ObjectDType) -> bool",
            "(pandas.core.indexes.multi.MultiIndex) -> bool",
            "(numpy.dtypes.Float64DType) -> bool",
            "(numpy.ndarray) -> bool"
        ],
        "samples": 56
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 1322,
        "func_name": "is_1d_only_ea_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool",
            "(numpy.dtypes.BoolDType) -> bool",
            "(numpy.dtypes.Int64DType) -> bool",
            "(pandas.core.arrays.string_.StringDtype) -> bool",
            "(None) -> bool",
            "(numpy.dtypes.Float64DType) -> bool"
        ],
        "samples": 218
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 1335,
        "func_name": "is_extension_array_dtype",
        "type_comments": [
            "(numpy.dtypes.Int64DType) -> bool",
            "(numpy.dtypes.Float64DType) -> bool",
            "(numpy.dtypes.BoolDType) -> bool",
            "(numpy.dtypes.ObjectDType) -> bool",
            "(numpy.ndarray) -> bool"
        ],
        "samples": 33
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 1389,
        "func_name": "is_ea_or_datetimelike_dtype",
        "type_comments": [
            "(None) -> bool"
        ],
        "samples": 18
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 1435,
        "func_name": "_is_dtype",
        "type_comments": [
            "(numpy.dtypes.Float64DType, function) -> bool",
            "(numpy.dtypes.BoolDType, function) -> bool",
            "(numpy.dtypes.ObjectDType, function) -> bool"
        ],
        "samples": 52
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 1459,
        "func_name": "get_dtype",
        "type_comments": [
            "(pandas.core.arrays.string_.StringDtype) -> pandas.core.arrays.string_.StringDtype",
            "(numpy.dtypes.BoolDType) -> numpy.dtypes.BoolDType",
            "(numpy.dtypes.Float64DType) -> numpy.dtypes.Float64DType",
            "(numpy.dtypes.Int64DType) -> numpy.dtypes.Int64DType",
            "(numpy.dtypes.ObjectDType) -> numpy.dtypes.ObjectDType",
            "(pandas.core.indexes.multi.MultiIndex) -> numpy.dtypes.ObjectDType",
            "(pandas.core.arrays.integer.Int8Dtype) -> pandas.core.arrays.integer.Int8Dtype",
            "(numpy.dtypes.StrDType) -> numpy.dtypes.StrDType"
        ],
        "samples": 155
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 1494,
        "func_name": "_is_dtype_type",
        "type_comments": [
            "(numpy.dtypes.Int64DType, function) -> bool",
            "(numpy.dtypes.Float64DType, function) -> bool",
            "(numpy.dtypes.BoolDType, function) -> bool",
            "(numpy.dtypes.ObjectDType, function) -> bool",
            "(pandas.core.series.Series, function) -> bool",
            "(numpy.dtypes.Int8DType, function) -> bool",
            "(numpy.ndarray, function) -> bool"
        ],
        "samples": 261
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 1631,
        "func_name": "validate_all_hashable",
        "type_comments": [
            "(str, *Tuple[str, str]) -> None",
            "(str, *None) -> None",
            "(str, *str) -> None"
        ],
        "samples": 66
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\common.py",
        "line": 1656,
        "func_name": "pandas_dtype",
        "type_comments": [
            "(pandas.core.arrays.string_.StringDtype) -> pandas.core.arrays.string_.StringDtype",
            "(type) -> numpy.dtypes.StrDType",
            "(numpy.dtypes.BoolDType) -> numpy.dtypes.BoolDType",
            "(None) -> numpy.dtypes.Float64DType",
            "(type) -> numpy.dtypes.ObjectDType",
            "(numpy.dtypes.ObjectDType) -> numpy.dtypes.ObjectDType",
            "(str) -> pandas.core.arrays.string_.StringDtype"
        ],
        "samples": 61
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\concat.py",
        "line": 33,
        "func_name": "concat_compat",
        "type_comments": [
            "(List[numpy.ndarray], int, bool) -> numpy.ndarray"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\concat.py",
        "line": 55,
        "func_name": "is_nonempty",
        "type_comments": [
            "(numpy.ndarray) -> bool"
        ],
        "samples": 16
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 186,
        "func_name": "CategoricalDtype.__init__",
        "type_comments": [
            "(None, bool) -> None",
            "(pandas.core.indexes.base.Index, bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 209,
        "func_name": "_from_values_or_dtype",
        "type_comments": [
            "(Tuple[str, str, str, str, str, str, str, str, str, str], None, bool, None) -> pandas.core.dtypes.dtypes.CategoricalDtype",
            "(pandas.core.series.Series, None, bool, None) -> pandas.core.dtypes.dtypes.CategoricalDtype",
            "(pandas.core.indexes.base.Index, None, bool, None) -> pandas.core.dtypes.dtypes.CategoricalDtype"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 308,
        "func_name": "construct_from_string",
        "type_comments": [
            "(str) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 339,
        "func_name": "CategoricalDtype._finalize",
        "type_comments": [
            "(None, bool, bool) -> None",
            "(pandas.core.indexes.base.Index, bool, bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 492,
        "func_name": "validate_ordered",
        "type_comments": [
            "(bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 511,
        "func_name": "validate_categories",
        "type_comments": [
            "(pandas.core.indexes.base.Index, bool) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 547,
        "func_name": "CategoricalDtype.update_dtype",
        "type_comments": [
            "(pandas.core.dtypes.dtypes.CategoricalDtype) -> pandas.core.dtypes.dtypes.CategoricalDtype"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 580,
        "func_name": "categories",
        "type_comments": [
            "() -> pandas.core.indexes.base.Index",
            "() -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 587,
        "func_name": "ordered",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 752,
        "func_name": "construct_from_string",
        "type_comments": [
            "(str) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 911,
        "func_name": "construct_from_string",
        "type_comments": [
            "(str) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 1179,
        "func_name": "construct_from_string",
        "type_comments": [
            "(str) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 1241,
        "func_name": "is_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 1324,
        "func_name": "PandasDtype.__init__",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> None"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 1412,
        "func_name": "na_value",
        "type_comments": [
            "() -> pandas._libs.missing.NAType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 1416,
        "func_name": "numpy_dtype",
        "type_comments": [
            "() -> numpy.dtypes.Int8DType",
            "() -> numpy.dtypes.Int16DType"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 1421,
        "func_name": "kind",
        "type_comments": [
            "() -> str"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 1441,
        "func_name": "from_numpy_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\dtypes.py",
        "line": 1461,
        "func_name": "BaseMaskedDtype._get_common_dtype",
        "type_comments": [
            "(List[Union[pandas.core.arrays.boolean.BooleanDtype, pandas.core.arrays.integer.Int16Dtype, pandas.core.arrays.integer.Int8Dtype, pandas.core.arrays.string_.StringDtype]]) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\generic.py",
        "line": 37,
        "func_name": "_check",
        "type_comments": [
            "(numpy.dtypes.BoolDType) -> bool",
            "(numpy.dtypes.ObjectDType) -> bool",
            "(pandas.core.series.Series) -> bool",
            "(numpy.ndarray) -> bool",
            "(Tuple[str, str]) -> bool",
            "(List[str]) -> bool",
            "(pandas.core.dtypes.dtypes.CategoricalDtype) -> bool",
            "(List[int]) -> bool"
        ],
        "samples": 500
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\generic.py",
        "line": 42,
        "func_name": "_instancecheck",
        "type_comments": [
            "(numpy.dtypes.BoolDType) -> bool",
            "(numpy.dtypes.ObjectDType) -> bool",
            "(pandas.core.series.Series) -> bool",
            "(numpy.ndarray) -> bool",
            "(Tuple[str, str]) -> bool",
            "(List[str]) -> bool",
            "(pandas.core.dtypes.dtypes.CategoricalDtype) -> bool",
            "(List[int]) -> bool"
        ],
        "samples": 500
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\inference.py",
        "line": 99,
        "func_name": "is_file_like",
        "type_comments": [
            "(_io.TextIOWrapper) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\inference.py",
        "line": 135,
        "func_name": "is_re",
        "type_comments": [
            "(str) -> bool",
            "(re.Pattern) -> bool"
        ],
        "samples": 25
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\inference.py",
        "line": 160,
        "func_name": "is_re_compilable",
        "type_comments": [
            "(str) -> bool",
            "(List[str]) -> bool"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\inference.py",
        "line": 189,
        "func_name": "is_array_like",
        "type_comments": [
            "(int) -> bool",
            "(pandas.core.series.Series) -> bool",
            "(numpy.ndarray) -> bool",
            "(float) -> bool",
            "(str) -> bool"
        ],
        "samples": 30
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\inference.py",
        "line": 267,
        "func_name": "is_dict_like",
        "type_comments": [
            "(bool) -> bool",
            "(Dict[str, numpy.ndarray]) -> bool",
            "(List[numpy.ndarray]) -> bool",
            "(pandas.core.series.Series) -> bool",
            "(numpy.ndarray) -> bool",
            "(Dict) -> bool",
            "(float) -> bool",
            "(type) -> bool"
        ],
        "samples": 23
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\inference.py",
        "line": 300,
        "func_name": "is_named_tuple",
        "type_comments": [
            "(List[float]) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\inference.py",
        "line": 328,
        "func_name": "is_hashable",
        "type_comments": [
            "(None) -> bool",
            "(type) -> bool",
            "(str) -> bool",
            "(Tuple[str, str]) -> bool",
            "(numpy.ndarray) -> bool"
        ],
        "samples": 150
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\inference.py",
        "line": 367,
        "func_name": "is_sequence",
        "type_comments": [
            "(pandas.core.indexes.frozen.FrozenList) -> bool",
            "(str) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\inference.py",
        "line": 398,
        "func_name": "is_dataclass",
        "type_comments": [
            "(List[float]) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\missing.py",
        "line": 106,
        "func_name": "isna",
        "type_comments": [
            "(pandas.core.frame.DataFrame) -> pyannotate_runtime.collect_types.UnknownType",
            "(numpy.ndarray) -> numpy.ndarray",
            "(float) -> bool",
            "(str) -> bool",
            "(pandas.core.series.Series) -> pandas.core.series.Series"
        ],
        "samples": 30
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\missing.py",
        "line": 189,
        "func_name": "_isna",
        "type_comments": [
            "(pandas.core.frame.DataFrame, bool) -> pyannotate_runtime.collect_types.UnknownType",
            "(numpy.ndarray, bool) -> numpy.ndarray",
            "(float, bool) -> bool",
            "(str, bool) -> bool",
            "(pandas.core.series.Series, bool) -> pandas.core.series.Series"
        ],
        "samples": 30
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\missing.py",
        "line": 266,
        "func_name": "_isna_array",
        "type_comments": [
            "(numpy.ndarray, bool) -> numpy.ndarray"
        ],
        "samples": 16
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\missing.py",
        "line": 307,
        "func_name": "_isna_string_dtype",
        "type_comments": [
            "(numpy.ndarray, bool) -> numpy.ndarray"
        ],
        "samples": 15
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\missing.py",
        "line": 352,
        "func_name": "notna",
        "type_comments": [
            "(pandas.core.frame.DataFrame) -> pandas.core.frame.DataFrame",
            "(pandas.core.series.Series) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\missing.py",
        "line": 455,
        "func_name": "array_equivalent",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, bool, bool) -> bool"
        ],
        "samples": 15
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\missing.py",
        "line": 553,
        "func_name": "_array_equivalent_object",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, bool) -> bool"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\missing.py",
        "line": 625,
        "func_name": "na_value_for_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType, bool) -> float",
            "(numpy.dtypes.Float64DType, bool) -> float"
        ],
        "samples": 19
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\missing.py",
        "line": 679,
        "func_name": "is_valid_na_for_dtype",
        "type_comments": [
            "(float, numpy.dtypes.ObjectDType) -> bool",
            "(int, numpy.dtypes.Int64DType) -> bool",
            "(float, numpy.dtypes.Float64DType) -> bool",
            "(numpy.ndarray, numpy.dtypes.Float64DType) -> bool"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\dtypes\\missing.py",
        "line": 730,
        "func_name": "isna_all",
        "type_comments": [
            "(numpy.ndarray) -> bool"
        ],
        "samples": 23
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\flags.py",
        "line": 49,
        "func_name": "Flags.__init__",
        "type_comments": [
            "(pandas.core.series.Series, bool) -> None",
            "(pandas.core.frame.DataFrame, bool) -> None"
        ],
        "samples": 75
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\flags.py",
        "line": 53,
        "func_name": "allows_duplicate_labels",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 52
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\flags.py",
        "line": 85,
        "func_name": "allows_duplicate_labels",
        "type_comments": [
            "(bool) -> None"
        ],
        "samples": 47
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 632,
        "func_name": "_constructor",
        "type_comments": [
            "() -> type"
        ],
        "samples": 16
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 641,
        "func_name": "DataFrame.__init__",
        "type_comments": [
            "(numpy.ndarray, pandas.core.indexes.base.Index, pandas.core.indexes.base.Index, None, bool) -> None",
            "(None, None, pandas.core.indexes.base.Index, None, None) -> None",
            "(Dict[str, numpy.ndarray], pandas.core.indexes.range.RangeIndex, List[str], None, None) -> None",
            "(pandas.core.internals.managers.BlockManager, None, None, None, None) -> None"
        ],
        "samples": 27
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 893,
        "func_name": "axes",
        "type_comments": [
            "() -> List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex]]",
            "() -> List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.multi.MultiIndex]]",
            "() -> List[pandas.core.indexes.base.Index]"
        ],
        "samples": 16
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 910,
        "func_name": "shape",
        "type_comments": [
            "() -> Tuple[int, int]"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 970,
        "func_name": "_can_fast_transpose",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 985,
        "func_name": "_values",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 1354,
        "func_name": "DataFrame.iterrows",
        "type_comments": [
            "() -> Iterator[Tuple[Tuple[str, str], pandas.core.series.Series]]",
            "() -> Iterator[Tuple[int, pandas.core.series.Series]]"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 1489,
        "func_name": "DataFrame.__len__",
        "type_comments": [
            "() -> int"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 2716,
        "func_name": "DataFrame.to_markdown",
        "type_comments": [
            "(None, str, bool, None) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 3466,
        "func_name": "DataFrame.transpose",
        "type_comments": [
            "(bool) -> pandas.core.frame.DataFrame"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 3607,
        "func_name": "T",
        "type_comments": [
            "() -> pandas.core.frame.DataFrame"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 3639,
        "func_name": "DataFrame._ixs",
        "type_comments": [
            "(int, int) -> pandas.core.series.Series"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 3713,
        "func_name": "DataFrame.__getitem__",
        "type_comments": [
            "(numpy.ndarray) -> pandas.core.frame.DataFrame",
            "(str) -> pandas.core.series.Series"
        ],
        "samples": 14
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 3786,
        "func_name": "DataFrame._getitem_bool_array",
        "type_comments": [
            "(pandas.core.series.Series) -> pandas.core.frame.DataFrame",
            "(numpy.ndarray) -> pandas.core.frame.DataFrame"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 3921,
        "func_name": "DataFrame.__setitem__",
        "type_comments": [
            "(str, pandas.core.series.Series) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 3959,
        "func_name": "DataFrame._setitem_array",
        "type_comments": [
            "(List[str], pandas.core.frame.DataFrame) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 4101,
        "func_name": "DataFrame._iset_item_mgr",
        "type_comments": [
            "(int, numpy.ndarray, bool) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 4108,
        "func_name": "DataFrame._set_item_mgr",
        "type_comments": [
            "(str, numpy.ndarray) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 4133,
        "func_name": "DataFrame._set_item",
        "type_comments": [
            "(str, pandas.core.series.Series) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 4158,
        "func_name": "DataFrame._set_value",
        "type_comments": [
            "(Tuple[str, str], str, str, bool) -> None"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 4203,
        "func_name": "DataFrame._ensure_valid_index",
        "type_comments": [
            "(pandas.core.series.Series) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 4226,
        "func_name": "DataFrame._box_col_values",
        "type_comments": [
            "(pandas.core.internals.managers.SingleBlockManager, int) -> pandas.core.series.Series"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 4240,
        "func_name": "DataFrame._clear_item_cache",
        "type_comments": [
            "() -> None"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 4243,
        "func_name": "DataFrame._get_item_cache",
        "type_comments": [
            "(str) -> pandas.core.series.Series"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 4711,
        "func_name": "DataFrame.insert",
        "type_comments": [
            "(int, str, numpy.ndarray, pandas._libs.lib._NoDefault) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 4847,
        "func_name": "DataFrame._sanitize_column",
        "type_comments": [
            "(pandas.core.series.Series) -> numpy.ndarray"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 4970,
        "func_name": "DataFrame.align",
        "type_comments": [
            "(skombo.fd_ops.FrameData, str, None, None, bool, None, None, None, int, None) -> Tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]",
            "(pandas.core.frame.DataFrame, str, None, None, bool, None, None, None, int, int) -> Tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 4997,
        "func_name": "DataFrame.set_axis",
        "type_comments": [
            "(pandas.core.indexes.base.Index, int, None) -> pandas.core.frame.DataFrame"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 5036,
        "func_name": "DataFrame.reindex",
        "type_comments": [
            "(pandas.core.indexes.base.Index, None, None, int, None, bool, None, float, None, None) -> pandas.core.frame.DataFrame"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 5313,
        "func_name": "DataFrame.rename",
        "type_comments": [
            "(None, None, Dict[str, str], None, None, bool, None, str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 5482,
        "func_name": "DataFrame.fillna",
        "type_comments": [
            "(bool, None, None, bool, None, None) -> pandas.core.frame.DataFrame",
            "(Dict[str, Union[bool, float, int]], None, None, bool, None, None) -> pandas.core.frame.DataFrame",
            "(float, None, None, bool, None, None) -> None",
            "(skombo.fd_ops.FrameData, None, None, bool, None, None) -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 5571,
        "func_name": "DataFrame.replace",
        "type_comments": [
            "(List[str], float, bool, None, bool, pandas._libs.lib._NoDefault) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 5730,
        "func_name": "DataFrame.set_index",
        "type_comments": [
            "(List[str], bool, bool, bool, bool) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 5976,
        "func_name": "DataFrame.reset_index",
        "type_comments": [
            "(None, bool, bool, int, str, pandas._libs.lib._NoDefault, None) -> pandas.core.frame.DataFrame"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 6225,
        "func_name": "DataFrame.isna",
        "type_comments": [
            "() -> pandas.core.frame.DataFrame"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 6237,
        "func_name": "DataFrame.notna",
        "type_comments": [
            "() -> pandas.core.frame.DataFrame"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 6274,
        "func_name": "DataFrame.dropna",
        "type_comments": [
            "(int, str, pandas._libs.lib._NoDefault, None, bool, bool) -> pandas.core.frame.DataFrame",
            "(int, pandas._libs.lib._NoDefault, pandas._libs.lib._NoDefault, List[str], bool, bool) -> pandas.core.frame.DataFrame",
            "(int, str, pandas._libs.lib._NoDefault, None, bool, bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 9266,
        "func_name": "DataFrame.apply",
        "type_comments": [
            "(function, int, bool, None, Tuple[]) -> pandas.core.frame.DataFrame"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 9425,
        "func_name": "DataFrame.applymap",
        "type_comments": [
            "(function, None) -> pandas.core.frame.DataFrame"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 9503,
        "func_name": "infer",
        "type_comments": [
            "(pandas.core.series.Series) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 10453,
        "func_name": "DataFrame._reduce",
        "type_comments": [
            "(function, str, int, bool, bool, str) -> pandas.core.series.Series"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 10474,
        "func_name": "blk_func",
        "type_comments": [
            "(numpy.ndarray, int) -> numpy.ndarray"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 10532,
        "func_name": "DataFrame._reduce_axis1",
        "type_comments": [
            "(str, function, bool) -> pandas.core.series.Series"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 11286,
        "func_name": "values",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 11518,
        "func_name": "DataFrame.where",
        "type_comments": [
            "(pandas.core.frame.DataFrame, skombo.fd_ops.FrameData, bool, None, None) -> pandas.core.frame.DataFrame"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py",
        "line": 11602,
        "func_name": "_reindex_for_setitem",
        "type_comments": [
            "(pandas.core.series.Series, pandas.core.indexes.range.RangeIndex) -> numpy.ndarray",
            "(pandas.core.series.Series, pandas.core.indexes.multi.MultiIndex) -> numpy.ndarray"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 265,
        "func_name": "NDFrame.__init__",
        "type_comments": [
            "(pandas.core.internals.managers.SingleBlockManager, bool, None) -> None",
            "(pandas.core.internals.managers.BlockManager, bool, None) -> None"
        ],
        "samples": 75
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 283,
        "func_name": "_init_mgr",
        "type_comments": [
            "(pandas.core.internals.managers.BlockManager, Dict[str, Optional[pandas.core.indexes.base.Index]], None, bool) -> pandas.core.internals.managers.BlockManager",
            "(pandas.core.internals.managers.BlockManager, Dict[str, Optional[List[str]]], None, bool) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 338,
        "func_name": "attrs",
        "type_comments": [
            "() -> Dict"
        ],
        "samples": 52
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 359,
        "func_name": "flags",
        "type_comments": [
            "() -> pandas.core.flags.Flags"
        ],
        "samples": 95
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 453,
        "func_name": "_validate_dtype",
        "type_comments": [
            "(numpy.dtypes.BoolDType) -> numpy.dtypes.BoolDType",
            "(type) -> numpy.dtypes.ObjectDType",
            "(numpy.dtypes.ObjectDType) -> numpy.dtypes.ObjectDType"
        ],
        "samples": 24
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 509,
        "func_name": "_get_axis_number",
        "type_comments": [
            "(str) -> int",
            "(int) -> int"
        ],
        "samples": 50
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 517,
        "func_name": "_get_axis_name",
        "type_comments": [
            "(int) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 523,
        "func_name": "NDFrame._get_axis",
        "type_comments": [
            "(int) -> pandas.core.indexes.base.Index",
            "(str) -> pandas.core.indexes.base.Index",
            "(int) -> pandas.core.indexes.multi.MultiIndex",
            "(int) -> pandas.core.indexes.range.RangeIndex"
        ],
        "samples": 34
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 529,
        "func_name": "_get_block_manager_axis",
        "type_comments": [
            "(int) -> int",
            "(str) -> int"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 599,
        "func_name": "_info_axis",
        "type_comments": [
            "() -> pandas.core.indexes.base.Index"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 623,
        "func_name": "ndim",
        "type_comments": [
            "() -> int"
        ],
        "samples": 17
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 646,
        "func_name": "size",
        "type_comments": [
            "() -> numpy.int32"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 672,
        "func_name": "NDFrame.set_axis",
        "type_comments": [
            "(pandas.core.indexes.base.Index, int, None) -> pandas.core.frame.DataFrame"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 710,
        "func_name": "NDFrame._set_axis_nocheck",
        "type_comments": [
            "(pandas.core.indexes.base.Index, int, bool, None) -> pandas.core.frame.DataFrame",
            "(pandas.core.indexes.base.Index, int, bool, bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 723,
        "func_name": "NDFrame._set_axis",
        "type_comments": [
            "(int, pandas.core.indexes.range.RangeIndex) -> None",
            "(int, pandas.core.indexes.multi.MultiIndex) -> None",
            "(int, pandas.core.indexes.base.Index) -> None",
            "(int, List[str]) -> None"
        ],
        "samples": 43
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 787,
        "func_name": "NDFrame.droplevel",
        "type_comments": [
            "(int, int) -> pandas.core.frame.DataFrame"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 973,
        "func_name": "NDFrame._rename",
        "type_comments": [
            "(None, None, Dict[str, str], None, None, bool, None, str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 1329,
        "func_name": "NDFrame._indexed_same",
        "type_comments": [
            "(pandas.core.frame.DataFrame) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 1455,
        "func_name": "NDFrame.__invert__",
        "type_comments": [
            "() -> pandas.core.frame.DataFrame",
            "() -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 1882,
        "func_name": "NDFrame.__iter__",
        "type_comments": [
            "() -> generator",
            "() -> map"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 1924,
        "func_name": "NDFrame.__contains__",
        "type_comments": [
            "(str) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 1929,
        "func_name": "empty",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 3800,
        "func_name": "NDFrame._maybe_update_cacher",
        "type_comments": [
            "(bool, bool, bool) -> None"
        ],
        "samples": 143
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 3832,
        "func_name": "NDFrame.take",
        "type_comments": [
            "(numpy.ndarray, int) -> pandas.core.frame.DataFrame"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 3911,
        "func_name": "NDFrame._take",
        "type_comments": [
            "(numpy.ndarray, int, bool) -> pandas.core.frame.DataFrame"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 3940,
        "func_name": "NDFrame._take_with_is_copy",
        "type_comments": [
            "(numpy.ndarray, int) -> pandas.core.frame.DataFrame"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 3954,
        "func_name": "NDFrame.xs",
        "type_comments": [
            "(str, int, None, bool) -> pandas.core.series.Series"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 4136,
        "func_name": "NDFrame._slice",
        "type_comments": [
            "(slice, int) -> pandas.core.frame.DataFrame"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 4153,
        "func_name": "NDFrame._set_is_copy",
        "type_comments": [
            "(pandas.core.frame.DataFrame, bool) -> None",
            "(skombo.fd_ops.FrameData, bool) -> None"
        ],
        "samples": 15
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 4161,
        "func_name": "NDFrame._check_is_chained_assignment_possible",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 4176,
        "func_name": "NDFrame._check_setitem_copy",
        "type_comments": [
            "(str, bool) -> None"
        ],
        "samples": 145
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 4251,
        "func_name": "NDFrame.__delitem__",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 4291,
        "func_name": "NDFrame._check_inplace_and_allows_duplicate_labels",
        "type_comments": [
            "(bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 4358,
        "func_name": "_is_view",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 4644,
        "func_name": "NDFrame._update_inplace",
        "type_comments": [
            "(skombo.fd_ops.FrameData, bool) -> None",
            "(pandas.core.frame.DataFrame, bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 5106,
        "func_name": "NDFrame.reindex",
        "type_comments": [
            "(pandas.core.indexes.base.Index, None, None, int, None, bool, None, float, None, None) -> pandas.core.frame.DataFrame",
            "(None, pandas.core.indexes.base.Index, None, None, None, bool, None, None, None, None) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 5408,
        "func_name": "NDFrame._reindex_with_indexers",
        "type_comments": [
            "(Dict[int, List[Union[numpy.ndarray, pandas.core.indexes.base.Index]]], None, bool, bool) -> pandas.core.frame.DataFrame",
            "(Dict[int, List], None, bool, bool) -> pandas.core.frame.DataFrame",
            "(Dict[int, Union[List, List[Optional[pandas.core.indexes.multi.MultiIndex]]]], None, bool, bool) -> pandas.core.frame.DataFrame",
            "(Dict[int, Union[List, List[Union[numpy.ndarray, pandas.core.indexes.multi.MultiIndex]]]], None, bool, bool) -> pandas.core.frame.DataFrame"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 5931,
        "func_name": "NDFrame.__finalize__",
        "type_comments": [
            "(skombo.fd_ops.FrameData, str) -> pandas.core.frame.DataFrame",
            "(pandas.core.series.Series, str) -> pandas.core.frame.DataFrame",
            "(pandas.core.frame.DataFrame, None) -> pandas.core.series.Series",
            "(pandas.core.series.Series, str) -> pandas.core.series.Series",
            "(skombo.fd_ops.FrameData, None) -> pandas.core.series.Series",
            "(pandas.core.frame.DataFrame, str) -> pandas.core.frame.DataFrame"
        ],
        "samples": 47
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 5975,
        "func_name": "NDFrame.__getattr__",
        "type_comments": [
            "(str) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 192
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 5991,
        "func_name": "NDFrame.__setattr__",
        "type_comments": [
            "(str, Tuple[str, str]) -> None",
            "(str, str) -> None",
            "(str, Tuple[str, weakref.ReferenceType]) -> None",
            "(str, None) -> None",
            "(str, List[str]) -> None",
            "(str, int) -> None",
            "(str, pandas.core.internals.managers.SingleBlockManager) -> None",
            "(str, weakref.ReferenceType) -> None"
        ],
        "samples": 208
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 6130,
        "func_name": "dtypes",
        "type_comments": [
            "() -> pandas.core.series.Series"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 6161,
        "func_name": "NDFrame.astype",
        "type_comments": [
            "(str, None, str) -> pandas.core.series.Series",
            "(type, None, str) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 6342,
        "func_name": "NDFrame.copy",
        "type_comments": [
            "(None) -> pandas.core.frame.DataFrame",
            "(bool) -> pandas.core.series.Series"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 6735,
        "func_name": "NDFrame.fillna",
        "type_comments": [
            "(bool, None, None, bool, None, None) -> pandas.core.frame.DataFrame",
            "(bool, None, None, bool, None, None) -> pandas.core.series.Series",
            "(float, None, None, bool, None, None) -> None",
            "(skombo.fd_ops.FrameData, None, None, bool, None, None) -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 7202,
        "func_name": "NDFrame.replace",
        "type_comments": [
            "(str, str, bool, None, bool, pandas._libs.lib._NoDefault) -> pandas.core.series.Series",
            "(List[str], float, bool, None, bool, pandas._libs.lib._NoDefault) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 7878,
        "func_name": "NDFrame.isna",
        "type_comments": [
            "() -> pandas.core.series.Series"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 7945,
        "func_name": "NDFrame.notna",
        "type_comments": [
            "() -> pandas.core.series.Series"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 9270,
        "func_name": "NDFrame.align",
        "type_comments": [
            "(skombo.fd_ops.FrameData, str, None, None, bool, None, None, None, int, None) -> Tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]",
            "(pandas.core.frame.DataFrame, str, None, None, bool, None, None, None, int, int) -> Tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 9463,
        "func_name": "NDFrame._align_frame",
        "type_comments": [
            "(skombo.fd_ops.FrameData, str, None, None, bool, None, None, None, int) -> Tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]",
            "(pandas.core.frame.DataFrame, str, None, None, bool, None, None, None, int) -> Tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 9610,
        "func_name": "NDFrame._where",
        "type_comments": [
            "(pandas.core.frame.DataFrame, skombo.fd_ops.FrameData, bool, None, None) -> pandas.core.frame.DataFrame"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 9779,
        "func_name": "NDFrame.where",
        "type_comments": [
            "(pandas.core.frame.DataFrame, skombo.fd_ops.FrameData, bool, None, None) -> pandas.core.frame.DataFrame"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 10967,
        "func_name": "NDFrame._logical_func",
        "type_comments": [
            "(str, function, int, None, bool) -> numpy.bool_",
            "(str, function, None, None, bool) -> numpy.bool_",
            "(str, function, int, bool, bool) -> pandas.core.series.Series"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 11010,
        "func_name": "NDFrame.any",
        "type_comments": [
            "(int, None, bool) -> numpy.bool_",
            "(int, bool, bool) -> pandas.core.series.Series"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 11021,
        "func_name": "NDFrame.all",
        "type_comments": [
            "(None, None, bool) -> numpy.bool_",
            "(int, bool, bool) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 11311,
        "func_name": "DataFrame.any",
        "type_comments": [
            "(int, bool, bool) -> pandas.core.series.Series"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 11311,
        "func_name": "Series.any",
        "type_comments": [
            "(int, None, bool) -> numpy.bool_"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 11339,
        "func_name": "DataFrame.all",
        "type_comments": [
            "(int, bool, bool) -> pandas.core.series.Series"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 11339,
        "func_name": "Series.all",
        "type_comments": [
            "(None, None, bool) -> numpy.bool_"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py",
        "line": 12587,
        "func_name": "_align_as_utc",
        "type_comments": [
            "(pandas.core.frame.DataFrame, pandas.core.frame.DataFrame, pandas.core.indexes.multi.MultiIndex) -> Tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]",
            "(pandas.core.frame.DataFrame, pandas.core.frame.DataFrame, None) -> Tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexers\\utils.py",
        "line": 64,
        "func_name": "is_list_like_indexer",
        "type_comments": [
            "(int) -> bool",
            "(List[str]) -> bool",
            "(Tuple[str, slice]) -> bool",
            "(numpy.ndarray) -> bool",
            "(numpy.int64) -> bool",
            "(str) -> bool"
        ],
        "samples": 151
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexers\\utils.py",
        "line": 125,
        "func_name": "check_setitem_lengths",
        "type_comments": [
            "(Tuple[numpy.ndarray], numpy.ndarray, numpy.ndarray) -> bool",
            "(Tuple[numpy.ndarray], pandas.core.indexes.base.Index, numpy.ndarray) -> bool",
            "(Tuple[numpy.ndarray], str, numpy.ndarray) -> bool",
            "(numpy.int64, numpy.ndarray, numpy.ndarray) -> bool"
        ],
        "samples": 143
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexers\\utils.py",
        "line": 189,
        "func_name": "validate_indices",
        "type_comments": [
            "(numpy.ndarray, int) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexers\\utils.py",
        "line": 241,
        "func_name": "maybe_convert_indices",
        "type_comments": [
            "(numpy.ndarray, int, bool) -> numpy.ndarray"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexers\\utils.py",
        "line": 292,
        "func_name": "length_of_indexer",
        "type_comments": [
            "(numpy.ndarray, pandas.core.indexes.multi.MultiIndex) -> int",
            "(numpy.ndarray, pandas.core.indexes.multi.MultiIndex) -> numpy.int32"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexers\\utils.py",
        "line": 373,
        "func_name": "check_key_length",
        "type_comments": [
            "(pandas.core.indexes.base.Index, List[str], pandas.core.frame.DataFrame) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexers\\utils.py",
        "line": 421,
        "func_name": "check_array_indexer",
        "type_comments": [
            "(pandas.core.arrays.string_.StringArray, numpy.ndarray) -> numpy.ndarray",
            "(pandas.core.indexes.base.Index, numpy.ndarray) -> numpy.ndarray",
            "(pandas.core.indexes.multi.MultiIndex, pandas.core.indexes.base.Index) -> numpy.ndarray",
            "(pandas.core.indexes.range.RangeIndex, pandas.core.series.Series) -> numpy.ndarray",
            "(pandas.core.indexes.multi.MultiIndex, pandas.core.series.Series) -> numpy.ndarray",
            "(pandas.core.indexes.base.Index, pandas.core.series.Series) -> numpy.ndarray"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\api.py",
        "line": 68,
        "func_name": "get_objs_combined_axis",
        "type_comments": [
            "(List[pandas.core.frame.DataFrame], bool, int, bool, bool) -> pandas.core.indexes.base.Index",
            "(List[Union[pandas.core.frame.DataFrame, skombo.fd_ops.FrameData]], bool, int, bool, bool) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\api.py",
        "line": 98,
        "func_name": "_get_distinct_objs",
        "type_comments": [
            "(List[pandas.core.indexes.base.Index]) -> List[pandas.core.indexes.base.Index]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\api.py",
        "line": 112,
        "func_name": "_get_combined_index",
        "type_comments": [
            "(List[pandas.core.indexes.base.Index], bool, bool, bool) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\api.py",
        "line": 194,
        "func_name": "union_indexes",
        "type_comments": [
            "(List[pandas.core.indexes.base.Index], bool) -> pandas.core.indexes.base.Index",
            "(List[pandas.core.indexes.range.RangeIndex], bool) -> pandas.core.indexes.range.RangeIndex"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\api.py",
        "line": 246,
        "func_name": "_find_common_index_dtype",
        "type_comments": [
            "(List[pandas.core.indexes.base.Index]) -> numpy.dtypes.ObjectDType"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\api.py",
        "line": 311,
        "func_name": "_sanitize_and_check",
        "type_comments": [
            "(List[pandas.core.indexes.base.Index]) -> Tuple[List[pandas.core.indexes.base.Index], str]",
            "(List[pandas.core.indexes.range.RangeIndex]) -> Tuple[List[pandas.core.indexes.range.RangeIndex], str]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\api.py",
        "line": 367,
        "func_name": "default_index",
        "type_comments": [
            "(int) -> pandas.core.indexes.range.RangeIndex"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 249,
        "func_name": "Index.join",
        "type_comments": [
            "(pandas.core.indexes.multi.MultiIndex, str, None, bool, bool) -> Tuple[pandas.core.indexes.multi.MultiIndex, None, numpy.ndarray]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 450,
        "func_name": "_engine_type",
        "type_comments": [
            "() -> type"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 469,
        "func_name": "__new__",
        "type_comments": [
            "(Tuple[str, str, str], None, bool, None, bool) -> pandas.core.indexes.base.Index",
            "(numpy.ndarray, None, bool, None, bool) -> pandas.core.indexes.base.Index",
            "(List[str], None, bool, None, bool) -> pandas.core.indexes.base.Index"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 565,
        "func_name": "_ensure_array",
        "type_comments": [
            "(numpy.ndarray, numpy.dtypes.ObjectDType, bool) -> numpy.ndarray",
            "(numpy.ndarray, numpy.dtypes.Int64DType, bool) -> numpy.ndarray"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 583,
        "func_name": "_dtype_to_subclass",
        "type_comments": [
            "(numpy.dtypes.Int64DType) -> type",
            "(numpy.dtypes.ObjectDType) -> type"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 640,
        "func_name": "_simple_new",
        "type_comments": [
            "(numpy.ndarray, None, pandas._libs.internals.BlockValuesRefs) -> pandas.core.indexes.base.Index",
            "(numpy.ndarray, str, pandas._libs.internals.BlockValuesRefs) -> pandas.core.indexes.base.Index",
            "(numpy.ndarray, None, None) -> pandas.core.indexes.base.Index"
        ],
        "samples": 23
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 665,
        "func_name": "_with_infer",
        "type_comments": [
            "(*numpy.ndarray) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 683,
        "func_name": "_constructor",
        "type_comments": [
            "() -> type"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 743,
        "func_name": "Index._shallow_copy",
        "type_comments": [
            "(numpy.ndarray, str) -> pandas.core.indexes.base.Index",
            "(numpy.ndarray, None) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 760,
        "func_name": "Index._view",
        "type_comments": [
            "() -> pandas.core.indexes.base.Index"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 769,
        "func_name": "Index._rename",
        "type_comments": [
            "(str) -> pandas.core.indexes.base.Index"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 778,
        "func_name": "Index.is_",
        "type_comments": [
            "(pandas.core.indexes.base.Index) -> bool",
            "(pandas.core.indexes.range.RangeIndex) -> bool",
            "(pandas.core.indexes.multi.MultiIndex) -> bool",
            "(str) -> bool"
        ],
        "samples": 24
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 809,
        "func_name": "Index._reset_identity",
        "type_comments": [
            "() -> None"
        ],
        "samples": 31
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 816,
        "func_name": "Index._cleanup",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 820,
        "func_name": "_engine",
        "type_comments": [
            "() -> pandas._libs.index.ObjectEngine"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 875,
        "func_name": "Index.__len__",
        "type_comments": [
            "() -> int"
        ],
        "samples": 255
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 881,
        "func_name": "Index.__array__",
        "type_comments": [
            "(None) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 931,
        "func_name": "dtype",
        "type_comments": [
            "() -> numpy.dtypes.Int64DType",
            "() -> numpy.dtypes.ObjectDType"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 953,
        "func_name": "Index.view",
        "type_comments": [
            "(None) -> pandas.core.indexes.base.Index",
            "(None) -> pandas.core.indexes.range.RangeIndex"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 1070,
        "func_name": "Index.take",
        "type_comments": [
            "(numpy.ndarray, int, bool, None) -> pandas.core.indexes.base.Index"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 1101,
        "func_name": "Index._maybe_disallow_fill",
        "type_comments": [
            "(bool, None, numpy.ndarray) -> bool"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 1163,
        "func_name": "Index.repeat",
        "type_comments": [
            "(numpy.ndarray, None) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 1175,
        "func_name": "Index.copy",
        "type_comments": [
            "(None, bool) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 1582,
        "func_name": "name",
        "type_comments": [
            "() -> str",
            "() -> None"
        ],
        "samples": 22
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 1589,
        "func_name": "name",
        "type_comments": [
            "(None) -> None"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 1600,
        "func_name": "Index._validate_names",
        "type_comments": [
            "(None, None, bool) -> pandas.core.indexes.frozen.FrozenList"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 1633,
        "func_name": "Index._get_default_index_names",
        "type_comments": [
            "(None, str) -> List[str]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 1668,
        "func_name": "Index._get_names",
        "type_comments": [
            "() -> pandas.core.indexes.frozen.FrozenList"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 1877,
        "func_name": "nlevels",
        "type_comments": [
            "() -> int"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 1890,
        "func_name": "Index._validate_index_level",
        "type_comments": [
            "(int) -> None"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 1953,
        "func_name": "Index._get_level_values",
        "type_comments": [
            "(int) -> pandas.core.indexes.base.Index"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 1994,
        "func_name": "Index.droplevel",
        "type_comments": [
            "(int) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 2046,
        "func_name": "Index._drop_level_numbers",
        "type_comments": [
            "(List[int]) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 2107,
        "func_name": "_can_hold_na",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 2121,
        "func_name": "is_monotonic_increasing",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 2205,
        "func_name": "is_unique",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 2636,
        "func_name": "inferred_type",
        "type_comments": [
            "() -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 2660,
        "func_name": "_is_multi",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 2678,
        "func_name": "_na_value",
        "type_comments": [
            "() -> float"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 2688,
        "func_name": "_isnan",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 2701,
        "func_name": "hasnans",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 2885,
        "func_name": "Index.unique",
        "type_comments": [
            "(None) -> pandas.core.indexes.base.Index"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 3044,
        "func_name": "Index._get_reconciled_name_object",
        "type_comments": [
            "(pandas.core.indexes.range.RangeIndex) -> pandas.core.indexes.range.RangeIndex"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 3055,
        "func_name": "Index._validate_sort_keyword",
        "type_comments": [
            "(bool) -> None",
            "(None) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 3082,
        "func_name": "Index.union",
        "type_comments": [
            "(List[str], bool) -> pandas.core.indexes.base.Index",
            "(pandas.core.indexes.base.Index, bool) -> pandas.core.indexes.base.Index",
            "(pandas.core.indexes.range.RangeIndex, None) -> pandas.core.indexes.range.RangeIndex"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 3204,
        "func_name": "Index._union",
        "type_comments": [
            "(pandas.core.indexes.base.Index, bool) -> numpy.ndarray"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 3282,
        "func_name": "Index._wrap_setop_result",
        "type_comments": [
            "(pandas.core.indexes.base.Index, numpy.ndarray) -> pandas.core.indexes.base.Index"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 3442,
        "func_name": "Index.difference",
        "type_comments": [
            "(pandas.core.indexes.base.Index, bool) -> pandas.core.indexes.base.Index"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 3504,
        "func_name": "Index._difference",
        "type_comments": [
            "(pandas.core.indexes.base.Index, bool) -> numpy.ndarray"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 3523,
        "func_name": "Index._wrap_difference_result",
        "type_comments": [
            "(pandas.core.indexes.base.Index, numpy.ndarray) -> pandas.core.indexes.base.Index"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 3608,
        "func_name": "Index._assert_can_do_setop",
        "type_comments": [
            "(pandas.core.indexes.base.Index) -> bool",
            "(List[str]) -> bool",
            "(pandas.core.indexes.range.RangeIndex) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 3614,
        "func_name": "Index._convert_can_do_setop",
        "type_comments": [
            "(pandas.core.indexes.range.RangeIndex) -> Tuple[pandas.core.indexes.range.RangeIndex, None]",
            "(List[str]) -> Tuple[pandas.core.indexes.base.Index, None]",
            "(pandas.core.indexes.base.Index) -> Tuple[pandas.core.indexes.base.Index, None]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 3625,
        "func_name": "Index.get_loc",
        "type_comments": [
            "(str) -> int"
        ],
        "samples": 32
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 3716,
        "func_name": "Index.get_indexer",
        "type_comments": [
            "(numpy.ndarray, None, None, None) -> numpy.ndarray",
            "(Dict[str, str], None, None, None) -> numpy.ndarray",
            "(pandas.core.indexes.base.Index, None, None, None) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 3804,
        "func_name": "Index._get_indexer",
        "type_comments": [
            "(pandas.core.indexes.base.Index, None, None, None) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 3849,
        "func_name": "Index._check_indexing_method",
        "type_comments": [
            "(None, None, None) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 4049,
        "func_name": "Index._validate_positional_slice",
        "type_comments": [
            "(slice) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 4157,
        "func_name": "Index._validate_can_reindex",
        "type_comments": [
            "(numpy.ndarray) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 4174,
        "func_name": "Index.reindex",
        "type_comments": [
            "(numpy.ndarray, None, None, None, None) -> Tuple[pandas.core.indexes.base.Index, numpy.ndarray]",
            "(pandas.core.indexes.multi.MultiIndex, None, None, None, None) -> Tuple[pandas.core.indexes.multi.MultiIndex, numpy.ndarray]",
            "(pandas.core.indexes.base.Index, None, None, None, None) -> Tuple[pandas.core.indexes.base.Index, None]",
            "(pandas.core.indexes.base.Index, None, None, None, None) -> Tuple[pandas.core.indexes.base.Index, numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 4282,
        "func_name": "Index._wrap_reindex_result",
        "type_comments": [
            "(pandas.core.indexes.base.Index, None, bool) -> pandas.core.indexes.base.Index",
            "(pandas.core.indexes.base.Index, numpy.ndarray, bool) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 4286,
        "func_name": "Index._maybe_preserve_names",
        "type_comments": [
            "(pandas.core.indexes.base.Index, bool) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 4403,
        "func_name": "join",
        "type_comments": [
            "(pandas.core.indexes.multi.MultiIndex, str, None, bool, bool) -> Tuple[pandas.core.indexes.multi.MultiIndex, None, numpy.ndarray]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 4528,
        "func_name": "Index._join_via_get_indexer",
        "type_comments": [
            "(pandas.core.indexes.multi.MultiIndex, str, bool) -> Tuple[pandas.core.indexes.multi.MultiIndex, None, numpy.ndarray]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 4927,
        "func_name": "array",
        "type_comments": [
            "() -> pandas.core.arrays.numpy_.PandasArray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 4937,
        "func_name": "_values",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 71
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 4963,
        "func_name": "Index._get_engine_target",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 5071,
        "func_name": "Index._validate_fill_value",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 5109,
        "func_name": "Index.__contains__",
        "type_comments": [
            "(str) -> bool"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 5159,
        "func_name": "Index.__getitem__",
        "type_comments": [
            "(int) -> str",
            "(int) -> None",
            "(int) -> numpy.int64"
        ],
        "samples": 15
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 5205,
        "func_name": "Index._getitem_slice",
        "type_comments": [
            "(slice) -> pandas.core.indexes.base.Index"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 5212,
        "func_name": "Index._can_hold_identifiers_and_holds_name",
        "type_comments": [
            "(str) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 5230,
        "func_name": "Index.append",
        "type_comments": [
            "(List[pandas.core.indexes.base.Index]) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 5260,
        "func_name": "Index._concat",
        "type_comments": [
            "(List[pandas.core.indexes.base.Index], None) -> pandas.core.indexes.base.Index",
            "(List[pandas.core.indexes.base.Index], str) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 5314,
        "func_name": "Index.equals",
        "type_comments": [
            "(pandas.core.indexes.base.Index) -> bool",
            "(pandas.core.indexes.range.RangeIndex) -> bool"
        ],
        "samples": 17
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 5401,
        "func_name": "Index.identical",
        "type_comments": [
            "(pandas.core.indexes.base.Index) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 5839,
        "func_name": "Index.get_indexer_for",
        "type_comments": [
            "(pandas.core.indexes.base.Index) -> numpy.ndarray",
            "(Dict[str, str]) -> numpy.ndarray",
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 5863,
        "func_name": "Index._get_indexer_strict",
        "type_comments": [
            "(pandas.core.indexes.base.Index, str) -> Tuple[pandas.core.indexes.base.Index, numpy.ndarray]",
            "(pandas.core.indexes.multi.MultiIndex, str) -> Tuple[pandas.core.indexes.multi.MultiIndex, numpy.ndarray]",
            "(List[str], str) -> Tuple[pandas.core.indexes.base.Index, numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 5896,
        "func_name": "Index._raise_if_missing",
        "type_comments": [
            "(pandas.core.indexes.base.Index, numpy.ndarray, str) -> None",
            "(pandas.core.indexes.multi.MultiIndex, numpy.ndarray, str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 6001,
        "func_name": "_index_as_unique",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 6013,
        "func_name": "Index._maybe_promote",
        "type_comments": [
            "(pandas.core.indexes.base.Index) -> Tuple[pandas.core.indexes.base.Index, pandas.core.indexes.base.Index]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 6083,
        "func_name": "Index._should_compare",
        "type_comments": [
            "(pandas.core.indexes.base.Index) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 6101,
        "func_name": "Index._is_comparable_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 6140,
        "func_name": "Index.map",
        "type_comments": [
            "(function, None) -> pandas.core.indexes.base.Index",
            "(Dict[str, str], None) -> pandas.core.indexes.base.Index"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 6190,
        "func_name": "Index._transform_index",
        "type_comments": [
            "(function, None) -> pandas.core.indexes.base.Index"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 6354,
        "func_name": "Index._maybe_cast_indexer",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 32
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 6361,
        "func_name": "Index._maybe_cast_listlike_indexer",
        "type_comments": [
            "(pandas.core.indexes.base.Index) -> pandas.core.indexes.base.Index",
            "(numpy.ndarray) -> pandas.core.indexes.base.Index",
            "(Dict[str, str]) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 6367,
        "func_name": "Index._validate_indexer",
        "type_comments": [
            "(str, int, str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 6614,
        "func_name": "Index.insert",
        "type_comments": [
            "(int, str) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 6740,
        "func_name": "Index._cmp_method",
        "type_comments": [
            "(str, builtin_function_or_method) -> numpy.ndarray"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 6797,
        "func_name": "Index._construct_result",
        "type_comments": [
            "(numpy.ndarray, str) -> pandas.core.indexes.base.Index"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 6806,
        "func_name": "Index._arith_method",
        "type_comments": [
            "(str, builtin_function_or_method) -> pandas.core.indexes.base.Index"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 7032,
        "func_name": "ensure_index_from_sequences",
        "type_comments": [
            "(List[pandas.core.series.Series], List[str]) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 7072,
        "func_name": "ensure_index",
        "type_comments": [
            "(Tuple[str, str, str], bool) -> pandas.core.indexes.base.Index",
            "(pandas.core.indexes.base.Index, bool) -> pandas.core.indexes.base.Index",
            "(List[str], bool) -> pandas.core.indexes.base.Index",
            "(pandas.core.indexes.range.RangeIndex, bool) -> pandas.core.indexes.range.RangeIndex",
            "(pandas.core.indexes.multi.MultiIndex, bool) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 113
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 7131,
        "func_name": "ensure_has_len",
        "type_comments": [
            "(pandas.core.indexes.base.Index) -> pandas.core.indexes.base.Index",
            "(pandas.core.indexes.multi.MultiIndex) -> pandas.core.indexes.multi.MultiIndex",
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 7162,
        "func_name": "_validate_join_method",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 7167,
        "func_name": "maybe_extract_name",
        "type_comments": [
            "(None, Tuple[str, str, str], type) -> None",
            "(None, List[str], type) -> None",
            "(None, List[numpy.ndarray], type) -> None",
            "(None, int, type) -> None",
            "(None, Dict[str, numpy.ndarray], type) -> None",
            "(None, numpy.ndarray, type) -> None",
            "(Tuple[str, str], numpy.ndarray, type) -> Tuple[str, str]",
            "(str, numpy.ndarray, type) -> str"
        ],
        "samples": 49
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 7183,
        "func_name": "get_unanimous_names",
        "type_comments": [
            "(*pandas.core.indexes.base.Index) -> Tuple[None]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 7202,
        "func_name": "_unpack_nested_dtype",
        "type_comments": [
            "(pandas.core.indexes.base.Index) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py",
        "line": 7231,
        "func_name": "_maybe_try_sort",
        "type_comments": [
            "(numpy.ndarray, bool) -> numpy.ndarray"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\frozen.py",
        "line": 73,
        "func_name": "FrozenList.__getitem__",
        "type_comments": [
            "(int) -> numpy.ndarray"
        ],
        "samples": 22
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\frozen.py",
        "line": 83,
        "func_name": "FrozenList.__eq__",
        "type_comments": [
            "(pandas.core.indexes.frozen.FrozenList) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\frozen.py",
        "line": 108,
        "func_name": "FrozenList.__str__",
        "type_comments": [
            "() -> str"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 125,
        "func_name": "MultiIndexUIntEngine._codes_to_ints",
        "type_comments": [
            "(numpy.ndarray) -> numpy.uint64",
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 204,
        "func_name": "new_meth",
        "type_comments": [
            "(type, *Tuple[Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str]]) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 314,
        "func_name": "__new__",
        "type_comments": [
            "(pandas.core.indexes.frozen.FrozenList, List[numpy.ndarray], None, pandas.core.indexes.frozen.FrozenList, None, bool, None, bool) -> pandas.core.indexes.multi.MultiIndex",
            "(pandas.core.indexes.frozen.FrozenList, pandas.core.indexes.frozen.FrozenList, None, pandas.core.indexes.frozen.FrozenList, None, bool, None, bool) -> pandas.core.indexes.multi.MultiIndex",
            "(List[pandas.core.indexes.base.Index], List[numpy.ndarray], None, List[str], None, bool, None, bool) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 361,
        "func_name": "MultiIndex._validate_codes",
        "type_comments": [
            "(pandas.core.indexes.base.Index, numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 385,
        "func_name": "MultiIndex._verify_integrity",
        "type_comments": [
            "(None, pandas.core.indexes.frozen.FrozenList) -> pandas.core.indexes.frozen.FrozenList"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 447,
        "func_name": "from_arrays",
        "type_comments": [
            "(List[pandas.core.indexes.base.Index], None, List[str]) -> pandas.core.indexes.multi.MultiIndex",
            "(zip, None, None) -> pandas.core.indexes.multi.MultiIndex",
            "(List[pandas.core.series.Series], None, List[str]) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 518,
        "func_name": "from_tuples",
        "type_comments": [
            "(Tuple[Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str]], None, None) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 726,
        "func_name": "_values",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 752,
        "func_name": "values",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 781,
        "func_name": "MultiIndex.__len__",
        "type_comments": [
            "() -> int"
        ],
        "samples": 20
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 795,
        "func_name": "levels",
        "type_comments": [
            "() -> pandas.core.indexes.frozen.FrozenList"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 806,
        "func_name": "MultiIndex._set_levels",
        "type_comments": [
            "(List[pandas.core.indexes.base.Index], None, bool, bool, bool) -> None",
            "(pandas.core.indexes.frozen.FrozenList, None, bool, bool, bool) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 848,
        "func_name": "MultiIndex.set_levels",
        "type_comments": [
            "(pandas.core.indexes.base.Index, int, bool) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 942,
        "func_name": "nlevels",
        "type_comments": [
            "() -> int"
        ],
        "samples": 16
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 977,
        "func_name": "codes",
        "type_comments": [
            "() -> pandas.core.indexes.frozen.FrozenList"
        ],
        "samples": 23
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 981,
        "func_name": "MultiIndex._set_codes",
        "type_comments": [
            "(List[numpy.ndarray], None, bool, bool, bool) -> None",
            "(pandas.core.indexes.frozen.FrozenList, None, bool, bool, bool) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 1083,
        "func_name": "_engine",
        "type_comments": [
            "() -> pandas.core.indexes.multi.MultiIndexUIntEngine"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 1127,
        "func_name": "MultiIndex._view",
        "type_comments": [
            "() -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 1142,
        "func_name": "MultiIndex.copy",
        "type_comments": [
            "(None, bool, None) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 1206,
        "func_name": "MultiIndex.__array__",
        "type_comments": [
            "(None) -> numpy.ndarray"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 1210,
        "func_name": "MultiIndex.view",
        "type_comments": [
            "(None) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 1225,
        "func_name": "dtype",
        "type_comments": [
            "() -> numpy.dtypes.ObjectDType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 1395,
        "func_name": "MultiIndex._get_names",
        "type_comments": [
            "() -> pandas.core.indexes.frozen.FrozenList"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 1398,
        "func_name": "MultiIndex._set_names",
        "type_comments": [
            "(List[str], None, bool) -> None",
            "(pandas.core.indexes.frozen.FrozenList, None, bool) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 1477,
        "func_name": "inferred_type",
        "type_comments": [
            "() -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 1481,
        "func_name": "MultiIndex._get_level_number",
        "type_comments": [
            "(int) -> int"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 1508,
        "func_name": "is_monotonic_increasing",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 1582,
        "func_name": "MultiIndex._get_level_values",
        "type_comments": [
            "(int, bool) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 1607,
        "func_name": "MultiIndex.get_level_values",
        "type_comments": [
            "(int) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 1825,
        "func_name": "_lexsort_depth",
        "type_comments": [
            "() -> int"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 2006,
        "func_name": "MultiIndex.__getitem__",
        "type_comments": [
            "(int) -> Tuple[str, str]",
            "(numpy.ndarray) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 2058,
        "func_name": "MultiIndex.take",
        "type_comments": [
            "(numpy.ndarray, int, bool, None) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 2090,
        "func_name": "MultiIndex.append",
        "type_comments": [
            "(List[pandas.core.indexes.multi.MultiIndex]) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 2482,
        "func_name": "MultiIndex._wrap_reindex_result",
        "type_comments": [
            "(pandas.core.indexes.multi.MultiIndex, numpy.ndarray, bool) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 2498,
        "func_name": "MultiIndex._maybe_preserve_names",
        "type_comments": [
            "(pandas.core.indexes.multi.MultiIndex, bool) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 2511,
        "func_name": "MultiIndex._check_indexing_error",
        "type_comments": [
            "(Tuple[str, str]) -> None"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 2526,
        "func_name": "MultiIndex._get_indexer_strict",
        "type_comments": [
            "(pandas.core.indexes.multi.MultiIndex, str) -> Tuple[pandas.core.indexes.multi.MultiIndex, numpy.ndarray]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 2541,
        "func_name": "MultiIndex._raise_if_missing",
        "type_comments": [
            "(pandas.core.indexes.multi.MultiIndex, numpy.ndarray, str) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 2729,
        "func_name": "MultiIndex._get_loc_single_level_index",
        "type_comments": [
            "(pandas.core.indexes.base.Index, str) -> int"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 2754,
        "func_name": "MultiIndex.get_loc",
        "type_comments": [
            "(Tuple[str, str]) -> int"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 3077,
        "func_name": "MultiIndex._get_level_indexer",
        "type_comments": [
            "(str, int, None) -> slice"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 3190,
        "func_name": "MultiIndex.get_locs",
        "type_comments": [
            "(Tuple[str, slice]) -> numpy.ndarray"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 3240,
        "func_name": "_to_bool_indexer",
        "type_comments": [
            "(slice) -> numpy.ndarray"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 3323,
        "func_name": "MultiIndex._reorder_indexer",
        "type_comments": [
            "(Tuple[str, slice], numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 3454,
        "func_name": "MultiIndex.equals",
        "type_comments": [
            "(pandas.core.indexes.multi.MultiIndex) -> bool"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 3566,
        "func_name": "MultiIndex._is_comparable_dtype",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 3802,
        "func_name": "_lexsort_depth",
        "type_comments": [
            "(pandas.core.indexes.frozen.FrozenList, int) -> int"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 3881,
        "func_name": "_coerce_indexer_frozen",
        "type_comments": [
            "(numpy.ndarray, pandas.core.indexes.base.Index, bool) -> numpy.ndarray"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\multi.py",
        "line": 3904,
        "func_name": "_require_listlike",
        "type_comments": [
            "(int, pandas.core.indexes.base.Index, str) -> Tuple[List[int], List[pandas.core.indexes.base.Index]]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py",
        "line": 108,
        "func_name": "__new__",
        "type_comments": [
            "(int, int, None, None, bool, None) -> pandas.core.indexes.range.RangeIndex"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py",
        "line": 166,
        "func_name": "_simple_new",
        "type_comments": [
            "(range, None) -> pandas.core.indexes.range.RangeIndex"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py",
        "line": 181,
        "func_name": "_validate_dtype",
        "type_comments": [
            "(None) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py",
        "line": 196,
        "func_name": "_constructor",
        "type_comments": [
            "() -> type"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py",
        "line": 202,
        "func_name": "_data",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py",
        "line": 249,
        "func_name": "start",
        "type_comments": [
            "() -> int"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py",
        "line": 257,
        "func_name": "stop",
        "type_comments": [
            "() -> int"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py",
        "line": 264,
        "func_name": "step",
        "type_comments": [
            "() -> int"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py",
        "line": 308,
        "func_name": "dtype",
        "type_comments": [
            "() -> numpy.dtypes.Int64DType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py",
        "line": 395,
        "func_name": "RangeIndex.__iter__",
        "type_comments": [
            "() -> Iterator[int]"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py",
        "line": 415,
        "func_name": "RangeIndex._view",
        "type_comments": [
            "() -> pandas.core.indexes.range.RangeIndex"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py",
        "line": 485,
        "func_name": "RangeIndex.equals",
        "type_comments": [
            "(pandas.core.indexes.range.RangeIndex) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py",
        "line": 892,
        "func_name": "RangeIndex.__len__",
        "type_comments": [
            "() -> int"
        ],
        "samples": 290
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\range.py",
        "line": 902,
        "func_name": "RangeIndex.__getitem__",
        "type_comments": [
            "(numpy.ndarray) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 148,
        "func_name": "iloc",
        "type_comments": [
            "() -> pandas.core.indexing._iLocIndexer"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 287,
        "func_name": "loc",
        "type_comments": [
            "() -> pandas.core.indexing._LocIndexer"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 550,
        "func_name": "at",
        "type_comments": [
            "() -> pandas.core.indexing._AtIndexer"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 615,
        "func_name": "iat",
        "type_comments": [
            "() -> pandas.core.indexing._iAtIndexer"
        ],
        "samples": 281
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 671,
        "func_name": "_LocationIndexer.__call__",
        "type_comments": [
            "(int) -> pandas.core.indexing._LocIndexer"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 685,
        "func_name": "_LocationIndexer._get_setitem_indexer",
        "type_comments": [
            "(Tuple[pandas.core.indexes.base.Index, str]) -> Tuple[numpy.ndarray, int]",
            "(Tuple[pandas.core.series.Series, List[str]]) -> Tuple[numpy.ndarray, numpy.ndarray]",
            "(Tuple[pandas.core.series.Series, str]) -> Tuple[numpy.ndarray, int]",
            "(Tuple[pandas.core.indexes.multi.MultiIndex, pandas.core.indexes.base.Index]) -> Tuple[numpy.ndarray, numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 718,
        "func_name": "_LocationIndexer._maybe_mask_setitem_value",
        "type_comments": [
            "(Tuple[numpy.ndarray, int], pandas.core.indexes.base.Index) -> Tuple[Tuple[numpy.ndarray, int], pandas.core.indexes.base.Index]",
            "(Tuple[numpy.ndarray, int], str) -> Tuple[Tuple[numpy.ndarray, int], str]",
            "(Tuple[numpy.ndarray, numpy.ndarray], pandas.core.frame.DataFrame) -> Tuple[Tuple[numpy.ndarray, numpy.ndarray], pandas.core.frame.DataFrame]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 777,
        "func_name": "_LocationIndexer._ensure_listlike_indexer",
        "type_comments": [
            "(Tuple[pandas.core.series.Series, str], None, None) -> None",
            "(Tuple[pandas.core.series.Series, List[str]], None, None) -> None",
            "(Tuple[pandas.core.indexes.multi.MultiIndex, pandas.core.indexes.base.Index], None, None) -> None",
            "(Tuple[pandas.core.indexes.base.Index, str], None, None) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 831,
        "func_name": "_LocationIndexer.__setitem__",
        "type_comments": [
            "(Tuple[pandas.core.series.Series, str], str) -> None",
            "(Tuple[pandas.core.series.Series, List[str]], pandas.core.frame.DataFrame) -> None",
            "(Tuple[pandas.core.indexes.multi.MultiIndex, pandas.core.indexes.base.Index], pandas.core.frame.DataFrame) -> None",
            "(Tuple[pandas.core.indexes.base.Index, str], pandas.core.indexes.base.Index) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 873,
        "func_name": "_LocationIndexer._expand_ellipsis",
        "type_comments": [
            "(Tuple[Tuple[str, slice], List[str]]) -> Tuple[Tuple[str, slice], List[str]]",
            "(Tuple[slice, slice]) -> Tuple[slice, slice]",
            "(Tuple[numpy.ndarray, slice]) -> Tuple[numpy.ndarray, slice]",
            "(Tuple[slice, numpy.ndarray]) -> Tuple[slice, numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 895,
        "func_name": "_LocationIndexer._validate_tuple_indexer",
        "type_comments": [
            "(Tuple[slice, numpy.ndarray]) -> Tuple[slice, numpy.ndarray]",
            "(Tuple[slice, slice]) -> Tuple[slice, slice]",
            "(Tuple[numpy.ndarray, slice]) -> Tuple[numpy.ndarray, slice]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 912,
        "func_name": "_LocationIndexer._is_nested_tuple_indexer",
        "type_comments": [
            "(Tuple[Tuple[str, slice], List[str]]) -> bool",
            "(Tuple[numpy.ndarray, slice]) -> bool",
            "(Tuple[slice, numpy.ndarray]) -> bool",
            "(Tuple[slice, slice]) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 923,
        "func_name": "_LocationIndexer._convert_tuple",
        "type_comments": [
            "(Tuple[pandas.core.indexes.base.Index, str]) -> Tuple[numpy.ndarray, int]",
            "(Tuple[pandas.core.series.Series, List[str]]) -> Tuple[numpy.ndarray, numpy.ndarray]",
            "(Tuple[pandas.core.series.Series, str]) -> Tuple[numpy.ndarray, int]",
            "(Tuple[pandas.core.indexes.multi.MultiIndex, pandas.core.indexes.base.Index]) -> Tuple[numpy.ndarray, numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 930,
        "func_name": "_LocationIndexer._validate_key_length",
        "type_comments": [
            "(Tuple[pandas.core.indexes.multi.MultiIndex, pandas.core.indexes.base.Index]) -> Tuple[pandas.core.indexes.multi.MultiIndex, pandas.core.indexes.base.Index]",
            "(Tuple[slice, numpy.ndarray]) -> Tuple[slice, numpy.ndarray]",
            "(Tuple[slice, slice]) -> Tuple[slice, slice]",
            "(Tuple[numpy.ndarray, slice]) -> Tuple[numpy.ndarray, slice]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 967,
        "func_name": "_LocationIndexer._getitem_lowerdim",
        "type_comments": [
            "(Tuple[numpy.ndarray, slice]) -> pandas.core.frame.DataFrame",
            "(Tuple[slice, numpy.ndarray]) -> pandas.core.frame.DataFrame",
            "(Tuple[slice, slice]) -> pandas.core.frame.DataFrame",
            "(Tuple[Tuple[str, slice], List[str]]) -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1028,
        "func_name": "_LocationIndexer._getitem_nested_tuple",
        "type_comments": [
            "(Tuple[numpy.ndarray, slice]) -> pandas.core.frame.DataFrame",
            "(Tuple[slice, numpy.ndarray]) -> pandas.core.frame.DataFrame",
            "(Tuple[slice, slice]) -> pandas.core.frame.DataFrame",
            "(Tuple[Tuple[str, slice], List[str]]) -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1089,
        "func_name": "_LocationIndexer.__getitem__",
        "type_comments": [
            "(Tuple[numpy.ndarray, slice]) -> pandas.core.frame.DataFrame",
            "(Tuple[pandas.core.series.Series, str]) -> pyannotate_runtime.collect_types.UnknownType",
            "(Tuple[Tuple[str, slice], List[str]]) -> pyannotate_runtime.collect_types.UnknownType",
            "(int) -> pandas.core.series.Series",
            "(str) -> pandas.core.series.Series",
            "(pandas.core.series.Series) -> pandas.core.frame.DataFrame"
        ],
        "samples": 13
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1117,
        "func_name": "_LocationIndexer._getbool_axis",
        "type_comments": [
            "(pandas.core.series.Series, int) -> pandas.core.frame.DataFrame",
            "(pandas.core.indexes.base.Index, int) -> pandas.core.frame.DataFrame",
            "(numpy.ndarray, int) -> pandas.core.frame.DataFrame",
            "(pandas.core.series.Series, int) -> pandas.core.series.Series"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1138,
        "func_name": "_LocIndexer._validate_key",
        "type_comments": [
            "(List[str], int) -> None",
            "(str, int) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1160,
        "func_name": "_LocIndexer._has_valid_setitem_indexer",
        "type_comments": [
            "(Tuple[pandas.core.indexes.multi.MultiIndex, pandas.core.indexes.base.Index]) -> bool",
            "(Tuple[pandas.core.indexes.base.Index, str]) -> bool",
            "(Tuple[pandas.core.series.Series, str]) -> bool",
            "(Tuple[pandas.core.series.Series, List[str]]) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1163,
        "func_name": "_LocIndexer._is_scalar_access",
        "type_comments": [
            "(Tuple[Tuple[str, slice], List[str]]) -> bool",
            "(Tuple[pandas.core.series.Series, List[str]]) -> bool",
            "(Tuple[pandas.core.series.Series, str]) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1246,
        "func_name": "_LocIndexer._getitem_iterable",
        "type_comments": [
            "(List[str], int) -> pandas.core.frame.DataFrame"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1277,
        "func_name": "_LocIndexer._getitem_tuple",
        "type_comments": [
            "(Tuple[Tuple[str, slice], List[str]]) -> pandas.core.frame.DataFrame",
            "(Tuple[pandas.core.series.Series, List[str]]) -> pandas.core.frame.DataFrame",
            "(Tuple[pandas.core.series.Series, str]) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1291,
        "func_name": "_LocIndexer._get_label",
        "type_comments": [
            "(str, int) -> pandas.core.series.Series"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1309,
        "func_name": "_LocIndexer._getitem_axis",
        "type_comments": [
            "(List[str], int) -> pandas.core.frame.DataFrame",
            "(Tuple[str, slice], int) -> pandas.core.frame.DataFrame",
            "(pandas.core.indexes.base.Index, int) -> pandas.core.frame.DataFrame",
            "(str, int) -> pandas.core.series.Series",
            "(pandas.core.series.Series, int) -> pandas.core.series.Series",
            "(pandas.core.series.Series, int) -> pandas.core.frame.DataFrame"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1364,
        "func_name": "_LocIndexer._convert_to_indexer",
        "type_comments": [
            "(str, int) -> int",
            "(pandas.core.series.Series, int) -> numpy.ndarray",
            "(pandas.core.indexes.multi.MultiIndex, int) -> numpy.ndarray",
            "(pandas.core.indexes.base.Index, int) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1436,
        "func_name": "_LocIndexer._get_listlike_indexer",
        "type_comments": [
            "(pandas.core.indexes.base.Index, int) -> Tuple[pandas.core.indexes.base.Index, numpy.ndarray]",
            "(pandas.core.indexes.multi.MultiIndex, int) -> Tuple[pandas.core.indexes.multi.MultiIndex, numpy.ndarray]",
            "(List[str], int) -> Tuple[pandas.core.indexes.base.Index, numpy.ndarray]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1478,
        "func_name": "_iLocIndexer._validate_key",
        "type_comments": [
            "(numpy.ndarray, int) -> None",
            "(slice, int) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1520,
        "func_name": "_iLocIndexer._has_valid_setitem_indexer",
        "type_comments": [
            "(int) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1556,
        "func_name": "_iLocIndexer._is_scalar_access",
        "type_comments": [
            "(Tuple[numpy.ndarray, slice]) -> bool",
            "(Tuple[slice, numpy.ndarray]) -> bool",
            "(Tuple[slice, slice]) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1571,
        "func_name": "_iLocIndexer._validate_integer",
        "type_comments": [
            "(int, int) -> None"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1593,
        "func_name": "_iLocIndexer._getitem_tuple",
        "type_comments": [
            "(Tuple[numpy.ndarray, slice]) -> pandas.core.frame.DataFrame",
            "(Tuple[slice, numpy.ndarray]) -> pandas.core.frame.DataFrame",
            "(Tuple[slice, slice]) -> pandas.core.frame.DataFrame"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1600,
        "func_name": "_iLocIndexer._get_list_axis",
        "type_comments": [
            "(numpy.ndarray, int) -> pandas.core.frame.DataFrame"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1623,
        "func_name": "_iLocIndexer._getitem_axis",
        "type_comments": [
            "(numpy.ndarray, int) -> pandas.core.frame.DataFrame",
            "(int, int) -> pandas.core.series.Series"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1660,
        "func_name": "_iLocIndexer._get_slice_axis",
        "type_comments": [
            "(slice, int) -> pandas.core.frame.DataFrame"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1677,
        "func_name": "_iLocIndexer._get_setitem_indexer",
        "type_comments": [
            "(int) -> int"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1689,
        "func_name": "_iLocIndexer._setitem_with_indexer",
        "type_comments": [
            "(Tuple[numpy.ndarray, int], str, str) -> None",
            "(Tuple[numpy.ndarray, numpy.ndarray], pandas.core.frame.DataFrame, str) -> None",
            "(Tuple[numpy.ndarray, int], pandas.core.indexes.base.Index, str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1839,
        "func_name": "_iLocIndexer._setitem_with_indexer_split_path",
        "type_comments": [
            "(Tuple[numpy.ndarray, int], str, str) -> None",
            "(Tuple[numpy.ndarray, numpy.ndarray], pandas.core.frame.DataFrame, str) -> None",
            "(Tuple[numpy.ndarray, int], pandas.core.indexes.base.Index, str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 1952,
        "func_name": "_iLocIndexer._setitem_with_indexer_frame_value",
        "type_comments": [
            "(Tuple[numpy.ndarray, numpy.ndarray], pandas.core.frame.DataFrame, str) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2001,
        "func_name": "_iLocIndexer._setitem_single_column",
        "type_comments": [
            "(int, str, numpy.ndarray) -> None",
            "(numpy.int64, numpy.ndarray, numpy.ndarray) -> None",
            "(int, pandas.core.indexes.base.Index, numpy.ndarray) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2038,
        "func_name": "_iLocIndexer._setitem_single_block",
        "type_comments": [
            "(int, pandas.core.series.Series, str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2183,
        "func_name": "_iLocIndexer._ensure_iterable_column_indexer",
        "type_comments": [
            "(int) -> List[int]",
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2200,
        "func_name": "_iLocIndexer._align_series",
        "type_comments": [
            "(Tuple[numpy.ndarray, str], pandas.core.series.Series, bool) -> numpy.ndarray",
            "(Tuple[numpy.ndarray, int], pandas.core.series.Series, bool) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2222,
        "func_name": "ravel",
        "type_comments": [
            "(str) -> str",
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2362,
        "func_name": "_ScalarAccessIndexer.__getitem__",
        "type_comments": [
            "(numpy.int64) -> float"
        ],
        "samples": 143
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2373,
        "func_name": "_ScalarAccessIndexer.__setitem__",
        "type_comments": [
            "(Tuple[Tuple[str, str], str], str) -> None",
            "(numpy.int64, numpy.ndarray) -> None"
        ],
        "samples": 147
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2393,
        "func_name": "_AtIndexer._convert_key",
        "type_comments": [
            "(Tuple[Tuple[str, str], str]) -> Tuple[Tuple[str, str], str]"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2406,
        "func_name": "_axes_are_unique",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2421,
        "func_name": "_AtIndexer.__setitem__",
        "type_comments": [
            "(Tuple[Tuple[str, str], str], str) -> None"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2437,
        "func_name": "_iAtIndexer._convert_key",
        "type_comments": [
            "(Tuple[numpy.int64]) -> Tuple[numpy.int64]"
        ],
        "samples": 281
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2447,
        "func_name": "_tuplify",
        "type_comments": [
            "(int, numpy.int64) -> Tuple[numpy.int64]"
        ],
        "samples": 143
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2476,
        "func_name": "check_bool_indexer",
        "type_comments": [
            "(pandas.core.indexes.base.Index, numpy.ndarray) -> numpy.ndarray",
            "(pandas.core.indexes.base.Index, pandas.core.series.Series) -> numpy.ndarray",
            "(pandas.core.indexes.multi.MultiIndex, pandas.core.indexes.base.Index) -> numpy.ndarray",
            "(pandas.core.indexes.range.RangeIndex, pandas.core.series.Series) -> numpy.ndarray",
            "(pandas.core.indexes.multi.MultiIndex, pandas.core.series.Series) -> numpy.ndarray"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2528,
        "func_name": "convert_missing_indexer",
        "type_comments": [
            "(int) -> Tuple[int, bool]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2565,
        "func_name": "is_nested_tuple",
        "type_comments": [
            "(Tuple[Tuple[str, slice], List[str]], pandas.core.indexes.multi.MultiIndex) -> bool",
            "(Tuple[str, slice], pandas.core.indexes.multi.MultiIndex) -> bool",
            "(Tuple[numpy.ndarray, slice], pandas.core.indexes.multi.MultiIndex) -> bool",
            "(pandas.core.indexes.multi.MultiIndex, pandas.core.indexes.multi.MultiIndex) -> bool",
            "(pandas.core.indexes.base.Index, pandas.core.indexes.base.Index) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2582,
        "func_name": "is_label_like",
        "type_comments": [
            "(pandas.core.series.Series) -> bool",
            "(str) -> bool"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2596,
        "func_name": "need_slice",
        "type_comments": [
            "(slice) -> bool"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py",
        "line": 2609,
        "func_name": "check_dict_or_set_indexers",
        "type_comments": [
            "(pandas.core.indexes.multi.MultiIndex) -> None",
            "(str) -> None",
            "(pandas.core.indexes.base.Index) -> None",
            "(int) -> None",
            "(pandas.core.series.Series) -> None",
            "(numpy.ndarray) -> None"
        ],
        "samples": 34
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\base.py",
        "line": 46,
        "func_name": "DataManager.__len__",
        "type_comments": [
            "() -> int"
        ],
        "samples": 20
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\base.py",
        "line": 54,
        "func_name": "shape",
        "type_comments": [
            "() -> Tuple[int, int]"
        ],
        "samples": 23
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\base.py",
        "line": 58,
        "func_name": "DataManager._validate_set_axis",
        "type_comments": [
            "(int, pandas.core.indexes.multi.MultiIndex) -> None",
            "(int, pandas.core.indexes.base.Index) -> None",
            "(int, pandas.core.indexes.range.RangeIndex) -> None"
        ],
        "samples": 43
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\base.py",
        "line": 87,
        "func_name": "DataManager.reindex_axis",
        "type_comments": [
            "(pandas.core.indexes.base.Index, int, None, bool) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\base.py",
        "line": 140,
        "func_name": "DataManager.isna",
        "type_comments": [
            "(function) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\base.py",
        "line": 153,
        "func_name": "DataManager._consolidate_inplace",
        "type_comments": [
            "() -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\base.py",
        "line": 162,
        "func_name": "array",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 18
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\base.py",
        "line": 171,
        "func_name": "SingleDataManager.setitem_inplace",
        "type_comments": [
            "(int, str) -> None"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\base.py",
        "line": 208,
        "func_name": "interleaved_dtype",
        "type_comments": [
            "(List[Union[numpy.dtypes.Int64DType, numpy.dtypes.ObjectDType]]) -> numpy.dtypes.ObjectDType",
            "(List[pandas.core.arrays.string_.StringDtype]) -> numpy.dtypes.ObjectDType",
            "(List[Union[numpy.dtypes.Float64DType, numpy.dtypes.ObjectDType]]) -> numpy.dtypes.ObjectDType",
            "(List[numpy.dtypes.ObjectDType]) -> numpy.dtypes.ObjectDType"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 133,
        "func_name": "newfunc",
        "type_comments": [
            "() -> List[pandas.core.internals.blocks.ObjectBlock]",
            "(*Union[bool, str]) -> List[pandas.core.internals.blocks.ObjectBlock]"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 164,
        "func_name": "_consolidate_key",
        "type_comments": [
            "() -> Tuple[bool, str]"
        ],
        "samples": 13
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 169,
        "func_name": "_can_hold_na",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 180,
        "func_name": "is_bool",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 188,
        "func_name": "Block.external_values",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 192,
        "func_name": "fill_value",
        "type_comments": [
            "() -> float"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 198,
        "func_name": "Block._standardize_fill_value",
        "type_comments": [
            "(float) -> float",
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 145
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 205,
        "func_name": "mgr_locs",
        "type_comments": [
            "() -> pandas._libs.internals.BlockPlacement"
        ],
        "samples": 34
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 209,
        "func_name": "mgr_locs",
        "type_comments": [
            "(pandas._libs.internals.BlockPlacement) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 213,
        "func_name": "Block.make_block",
        "type_comments": [
            "(numpy.ndarray, None, None) -> pandas.core.internals.blocks.NumericBlock",
            "(numpy.ndarray, None, None) -> pandas.core.internals.blocks.ObjectBlock"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 230,
        "func_name": "Block.make_block_same_class",
        "type_comments": [
            "(numpy.ndarray, pandas._libs.internals.BlockPlacement, None) -> pandas.core.internals.blocks.NumericBlock",
            "(numpy.ndarray, pandas._libs.internals.BlockPlacement, None) -> pandas.core.internals.blocks.ObjectBlock"
        ],
        "samples": 25
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 258,
        "func_name": "Block.__len__",
        "type_comments": [
            "() -> int"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 262,
        "func_name": "Block.getitem_block",
        "type_comments": [
            "(slice) -> pandas.core.internals.blocks.ObjectBlock"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 279,
        "func_name": "Block.getitem_block_columns",
        "type_comments": [
            "(slice, pandas._libs.internals.BlockPlacement) -> pandas.core.internals.blocks.ObjectBlock"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 295,
        "func_name": "Block._can_hold_element",
        "type_comments": [
            "(str) -> bool"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 301,
        "func_name": "Block.should_store",
        "type_comments": [
            "(numpy.ndarray) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 323,
        "func_name": "Block.apply",
        "type_comments": [
            "(function) -> List[pandas.core.internals.blocks.NumericBlock]",
            "(builtin_function_or_method) -> List[pandas.core.internals.blocks.NumericBlock]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 333,
        "func_name": "Block.reduce",
        "type_comments": [
            "(function) -> List[pandas.core.internals.blocks.NumericBlock]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 350,
        "func_name": "Block._split_op_result",
        "type_comments": [
            "(numpy.ndarray) -> List[pandas.core.internals.blocks.NumericBlock]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 371,
        "func_name": "Block._split",
        "type_comments": [
            "() -> List[pandas.core.internals.blocks.ObjectBlock]",
            "() -> List[pandas.core.internals.blocks.NumericBlock]"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 387,
        "func_name": "Block.split_and_operate",
        "type_comments": [
            "(function) -> List[pandas.core.internals.blocks.ObjectBlock]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 413,
        "func_name": "Block.coerce_to_target_dtype",
        "type_comments": [
            "(numpy.ndarray) -> pandas.core.internals.blocks.ObjectBlock"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 426,
        "func_name": "Block._maybe_downcast",
        "type_comments": [
            "(List[pandas.core.internals.blocks.ObjectBlock], None, bool) -> List[pandas.core.internals.blocks.ObjectBlock]",
            "(List[pandas.core.internals.blocks.NumericBlock], None, bool) -> List[pandas.core.internals.blocks.NumericBlock]",
            "(List[pandas.core.internals.blocks.ExtensionBlock], None, bool) -> List[pandas.core.internals.blocks.ExtensionBlock]"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 449,
        "func_name": "_downcast_2d",
        "type_comments": [
            "(str, bool) -> List[pandas.core.internals.blocks.ObjectBlock]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 479,
        "func_name": "dtype",
        "type_comments": [
            "() -> numpy.dtypes.BoolDType",
            "() -> numpy.dtypes.Float64DType",
            "() -> numpy.dtypes.Int64DType",
            "() -> numpy.dtypes.ObjectDType",
            "() -> pandas.core.arrays.integer.Int8Dtype",
            "() -> pandas.core.arrays.string_.StringDtype"
        ],
        "samples": 51
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 483,
        "func_name": "Block.astype",
        "type_comments": [
            "(str, bool, str, bool) -> pandas.core.internals.blocks.NumericBlock",
            "(type, bool, str, bool) -> pandas.core.internals.blocks.ObjectBlock"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 534,
        "func_name": "Block.copy",
        "type_comments": [
            "(bool) -> pandas.core.internals.blocks.NumericBlock",
            "(bool) -> pandas.core.internals.blocks.ObjectBlock",
            "(bool) -> pandas.core.internals.blocks.ExtensionBlock"
        ],
        "samples": 18
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 549,
        "func_name": "Block.replace",
        "type_comments": [
            "(str, float, bool, numpy.ndarray, bool) -> List[pandas.core.internals.blocks.ObjectBlock]"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 649,
        "func_name": "Block._replace_regex",
        "type_comments": [
            "(str, str, bool, None, bool) -> List[pandas.core.internals.blocks.ObjectBlock]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 703,
        "func_name": "Block.replace_list",
        "type_comments": [
            "(List[str], List[float], bool, bool, bool) -> List[pandas.core.internals.blocks.ObjectBlock]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 808,
        "func_name": "Block._replace_coerce",
        "type_comments": [
            "(str, float, numpy.ndarray, bool, bool, bool) -> List[pandas.core.internals.blocks.ObjectBlock]"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 888,
        "func_name": "shape",
        "type_comments": [
            "() -> Tuple[int]",
            "() -> Tuple[int, int]"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 892,
        "func_name": "Block.iget",
        "type_comments": [
            "(Tuple[int, int]) -> List[str]",
            "(Tuple[slice, int]) -> numpy.ndarray",
            "(numpy.int64) -> numpy.ndarray",
            "(Tuple[int, int]) -> numpy.float64",
            "(Tuple[int, int]) -> float",
            "(Tuple[int, int]) -> str"
        ],
        "samples": 138
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 901,
        "func_name": "Block._slice",
        "type_comments": [
            "(slice) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 908,
        "func_name": "Block.set_inplace",
        "type_comments": [
            "(slice, numpy.ndarray, bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 926,
        "func_name": "Block.take_nd",
        "type_comments": [
            "(numpy.ndarray, int, pandas._libs.internals.BlockPlacement, pandas._libs.lib._NoDefault) -> pandas.core.internals.blocks.NumericBlock",
            "(numpy.ndarray, int, pandas._libs.internals.BlockPlacement, pandas._libs.lib._NoDefault) -> pandas.core.internals.blocks.ObjectBlock",
            "(numpy.ndarray, int, None, float) -> pandas.core.internals.blocks.ObjectBlock"
        ],
        "samples": 24
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 1011,
        "func_name": "Block.setitem",
        "type_comments": [
            "(Tuple[numpy.ndarray], str, bool) -> pandas.core.internals.blocks.ObjectBlock",
            "(Tuple[numpy.ndarray], pandas.core.indexes.base.Index, bool) -> pandas.core.internals.blocks.ObjectBlock",
            "(Tuple[numpy.ndarray], numpy.ndarray, bool) -> pandas.core.internals.blocks.ObjectBlock",
            "(numpy.int64, numpy.ndarray, bool) -> pandas.core.internals.blocks.ObjectBlock"
        ],
        "samples": 143
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 1070,
        "func_name": "Block.putmask",
        "type_comments": [
            "(numpy.ndarray, float, bool) -> List[pandas.core.internals.blocks.ObjectBlock]",
            "(numpy.ndarray, float, bool) -> List[pandas.core.internals.blocks.NumericBlock]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 1143,
        "func_name": "Block.where",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, str, bool) -> List[pandas.core.internals.blocks.ObjectBlock]",
            "(numpy.ndarray, numpy.ndarray, str, bool) -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 1262,
        "func_name": "Block.fillna",
        "type_comments": [
            "(float, None, bool, None, bool) -> List[pandas.core.internals.blocks.ObjectBlock]",
            "(float, None, bool, None, bool) -> List[pandas.core.internals.blocks.NumericBlock]",
            "(bool, None, bool, None, bool) -> List[pandas.core.internals.blocks.NumericBlock]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 1505,
        "func_name": "Block.delete",
        "type_comments": [
            "(numpy.ndarray) -> List[pandas.core.internals.blocks.ObjectBlock]"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 1795,
        "func_name": "EABackedBlock.get_values",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 1846,
        "func_name": "ExtensionBlock.fillna",
        "type_comments": [
            "(int, None, bool, None, bool) -> List[pandas.core.internals.blocks.ExtensionBlock]",
            "(bool, None, bool, None, bool) -> List[pandas.core.internals.blocks.ExtensionBlock]",
            "(float, None, bool, None, bool) -> List[pandas.core.internals.blocks.ExtensionBlock]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 1872,
        "func_name": "shape",
        "type_comments": [
            "() -> Tuple[int]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 1879,
        "func_name": "ExtensionBlock.iget",
        "type_comments": [
            "(numpy.int64) -> pandas.core.arrays.boolean.BooleanArray",
            "(numpy.int64) -> pandas.core.arrays.integer.IntegerArray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 2100,
        "func_name": "is_view",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 2105,
        "func_name": "array_values",
        "type_comments": [
            "() -> pandas.core.arrays.numpy_.PandasArray"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 2109,
        "func_name": "NumpyBlock.get_values",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> numpy.ndarray",
            "(None) -> numpy.ndarray"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 2260,
        "func_name": "convert",
        "type_comments": [
            "(bool, bool) -> List[pandas.core.internals.blocks.ObjectBlock]"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 2305,
        "func_name": "maybe_coerce_values",
        "type_comments": [
            "(pandas.core.arrays.string_.StringArray) -> pandas.core.arrays.string_.StringArray",
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 56
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 2334,
        "func_name": "get_block_type",
        "type_comments": [
            "(numpy.dtypes.Float64DType) -> type",
            "(numpy.dtypes.Int64DType) -> type",
            "(numpy.dtypes.BoolDType) -> type",
            "(pandas.core.arrays.string_.StringDtype) -> type",
            "(numpy.dtypes.ObjectDType) -> type"
        ],
        "samples": 59
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 2372,
        "func_name": "new_block_2d",
        "type_comments": [
            "(numpy.ndarray, pandas._libs.internals.BlockPlacement, None) -> pandas.core.internals.blocks.NumericBlock",
            "(numpy.ndarray, pandas._libs.internals.BlockPlacement, None) -> pandas.core.internals.blocks.ObjectBlock"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 2385,
        "func_name": "new_block",
        "type_comments": [
            "(numpy.ndarray, pandas._libs.internals.BlockPlacement, int, None) -> pandas.core.internals.blocks.ObjectBlock",
            "(numpy.ndarray, pandas._libs.internals.BlockPlacement, int, None) -> pandas.core.internals.blocks.NumericBlock",
            "(numpy.ndarray, slice, int, None) -> pandas.core.internals.blocks.NumericBlock",
            "(numpy.ndarray, slice, int, None) -> pandas.core.internals.blocks.ObjectBlock"
        ],
        "samples": 46
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 2401,
        "func_name": "check_ndim",
        "type_comments": [
            "(numpy.ndarray, pandas._libs.internals.BlockPlacement, int) -> None"
        ],
        "samples": 46
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 2465,
        "func_name": "extend_blocks",
        "type_comments": [
            "(pandas.core.internals.blocks.ObjectBlock, List) -> List[pandas.core.internals.blocks.ObjectBlock]",
            "(List[pandas.core.internals.blocks.NumericBlock], List) -> List[pandas.core.internals.blocks.NumericBlock]",
            "(pandas.core.internals.blocks.ObjectBlock, List[pandas.core.internals.blocks.ObjectBlock]) -> List[pandas.core.internals.blocks.ObjectBlock]",
            "(List[pandas.core.internals.blocks.NumericBlock], List[pandas.core.internals.blocks.NumericBlock]) -> List[pandas.core.internals.blocks.NumericBlock]",
            "(List[List[pandas.core.internals.blocks.ObjectBlock]], None) -> List[pandas.core.internals.blocks.ObjectBlock]",
            "(List[pandas.core.internals.blocks.ObjectBlock], List[pandas.core.internals.blocks.ObjectBlock]) -> List[pandas.core.internals.blocks.ObjectBlock]",
            "(pandas.core.internals.blocks.ObjectBlock, List[Union[pandas.core.internals.blocks.NumericBlock, pandas.core.internals.blocks.ObjectBlock]]) -> List[Union[pandas.core.internals.blocks.NumericBlock, pandas.core.internals.blocks.ObjectBlock]]",
            "(List[pandas.core.internals.blocks.ObjectBlock], List[pandas.core.internals.blocks.NumericBlock]) -> List[Union[pandas.core.internals.blocks.NumericBlock, pandas.core.internals.blocks.ObjectBlock]]"
        ],
        "samples": 162
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 2481,
        "func_name": "ensure_block_shape",
        "type_comments": [
            "(numpy.ndarray, int) -> numpy.ndarray"
        ],
        "samples": 13
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py",
        "line": 2584,
        "func_name": "external_values",
        "type_comments": [
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 176,
        "func_name": "concatenate_managers",
        "type_comments": [
            "(List[Tuple[pandas.core.internals.managers.BlockManager, Dict]], List[pandas.core.indexes.base.Index], int, bool) -> pandas.core.internals.managers.BlockManager",
            "(List[Tuple[pandas.core.internals.managers.BlockManager, Dict]], List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex]], int, bool) -> pandas.core.internals.managers.BlockManager",
            "(List[Tuple[pandas.core.internals.managers.BlockManager, Dict]], List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.multi.MultiIndex]], int, bool) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 293,
        "func_name": "_maybe_reindex_columns_na_proxy",
        "type_comments": [
            "(List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.multi.MultiIndex]], List[Tuple[pandas.core.internals.managers.BlockManager, Dict]]) -> List[Tuple[pandas.core.internals.managers.BlockManager, Dict]]",
            "(List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex]], List[Tuple[pandas.core.internals.managers.BlockManager, Dict]]) -> List[Tuple[pandas.core.internals.managers.BlockManager, Dict]]",
            "(List[pandas.core.indexes.base.Index], List[Tuple[pandas.core.internals.managers.BlockManager, Dict]]) -> List[Tuple[pandas.core.internals.managers.BlockManager, Dict]]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 322,
        "func_name": "_get_mgr_concatenation_plan",
        "type_comments": [
            "(pandas.core.internals.managers.BlockManager, Dict) -> List[Tuple[pandas._libs.internals.BlockPlacement, pandas.core.internals.concat.JoinUnit]]"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 399,
        "func_name": "JoinUnit.__init__",
        "type_comments": [
            "(pandas.core.internals.blocks.NumericBlock, Tuple[int, int], Dict) -> None",
            "(pandas.core.internals.blocks.ObjectBlock, Tuple[int, int], Dict) -> None",
            "(pandas.core.internals.blocks.NumericBlock, Tuple[int, int], Dict[int, numpy.ndarray]) -> None"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 411,
        "func_name": "needs_filling",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 420,
        "func_name": "dtype",
        "type_comments": [
            "() -> numpy.dtypes.Float64DType",
            "() -> numpy.dtypes.ObjectDType"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 430,
        "func_name": "JoinUnit._is_valid_na_for",
        "type_comments": [
            "(numpy.dtypes.ObjectDType) -> bool"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 460,
        "func_name": "is_na",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 489,
        "func_name": "JoinUnit.get_reindexed_values",
        "type_comments": [
            "(numpy.dtypes.ObjectDType, float) -> numpy.ndarray"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 572,
        "func_name": "_concatenate_join_units",
        "type_comments": [
            "(Tuple[pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit], bool) -> numpy.ndarray",
            "(List[pandas.core.internals.concat.JoinUnit], bool) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 618,
        "func_name": "_dtype_to_na_value",
        "type_comments": [
            "(numpy.dtypes.ObjectDType, bool) -> float"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 641,
        "func_name": "_get_empty_dtype",
        "type_comments": [
            "(Tuple[pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit]) -> numpy.dtypes.ObjectDType",
            "(List[pandas.core.internals.concat.JoinUnit]) -> numpy.dtypes.ObjectDType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 671,
        "func_name": "_is_uniform_join_units",
        "type_comments": [
            "(Tuple[pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit]) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 706,
        "func_name": "_is_uniform_reindex",
        "type_comments": [
            "(Tuple[pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit]) -> bool",
            "(List[pandas.core.internals.concat.JoinUnit]) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 714,
        "func_name": "_trim_join_unit",
        "type_comments": [
            "(pandas.core.internals.concat.JoinUnit, int) -> pandas.core.internals.concat.JoinUnit"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 741,
        "func_name": "_combine_concat_plans",
        "type_comments": [
            "(List[List[Tuple[pandas._libs.internals.BlockPlacement, pandas.core.internals.concat.JoinUnit]]]) -> Iterator[Tuple[pandas._libs.internals.BlockPlacement, Tuple[pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit]]]",
            "(List[list_iterator]) -> Iterator[Tuple[pandas._libs.internals.BlockPlacement, Tuple[pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit]]]",
            "(List[List[Tuple[pandas._libs.internals.BlockPlacement, pandas.core.internals.concat.JoinUnit]]]) -> Iterator[Tuple[pandas._libs.internals.BlockPlacement, Tuple[pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit, pandas.core.internals.concat.JoinUnit]]]"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\concat.py",
        "line": 757,
        "func_name": "_next_or_none",
        "type_comments": [
            "(list_iterator) -> None",
            "(list_iterator) -> Tuple[pandas._libs.internals.BlockPlacement, pandas.core.internals.concat.JoinUnit]"
        ],
        "samples": 16
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 97,
        "func_name": "arrays_to_mgr",
        "type_comments": [
            "(List[numpy.ndarray], pandas.core.indexes.base.Index, pandas.core.indexes.multi.MultiIndex, numpy.dtypes.ObjectDType, bool, str, bool) -> pandas.core.internals.managers.BlockManager",
            "(List[numpy.ndarray], pandas.core.indexes.base.Index, None, None, bool, str, bool) -> pandas.core.internals.managers.BlockManager",
            "(List[numpy.ndarray], pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex, None, bool, str, bool) -> pandas.core.internals.managers.BlockManager",
            "(List[numpy.ndarray], pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex, numpy.dtypes.ObjectDType, bool, str, bool) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 197,
        "func_name": "mgr_to_mgr",
        "type_comments": [
            "(pandas.core.internals.managers.BlockManager, str, bool) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 15
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 238,
        "func_name": "ndarray_to_mgr",
        "type_comments": [
            "(numpy.ndarray, pandas.core.indexes.base.Index, pandas.core.indexes.base.Index, None, bool, str) -> pandas.core.internals.managers.BlockManager",
            "(numpy.ndarray, pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex, None, bool, str) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 393,
        "func_name": "_check_values_indices_shape_match",
        "type_comments": [
            "(numpy.ndarray, pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex) -> None",
            "(numpy.ndarray, pandas.core.indexes.base.Index, pandas.core.indexes.base.Index) -> None"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 411,
        "func_name": "dict_to_mgr",
        "type_comments": [
            "(Dict, pandas.core.indexes.range.RangeIndex, List[str], numpy.dtypes.ObjectDType, str, bool) -> pandas.core.internals.managers.BlockManager",
            "(Dict[int, numpy.ndarray], None, None, None, str, bool) -> pandas.core.internals.managers.BlockManager",
            "(Dict[str, numpy.ndarray], pandas.core.indexes.range.RangeIndex, List[str], None, str, bool) -> pandas.core.internals.managers.BlockManager",
            "(Dict, pandas.core.indexes.range.RangeIndex, pandas.core.indexes.base.Index, numpy.dtypes.ObjectDType, str, bool) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 484,
        "func_name": "nested_data_to_arrays",
        "type_comments": [
            "(List[List[float]], pandas.core.indexes.base.Index, pandas.core.indexes.multi.MultiIndex, numpy.dtypes.ObjectDType) -> Tuple[List[numpy.ndarray], pandas.core.indexes.base.Index, pandas.core.indexes.multi.MultiIndex]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 510,
        "func_name": "treat_as_nested",
        "type_comments": [
            "(List[List[float]]) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 563,
        "func_name": "_ensure_2d",
        "type_comments": [
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 574,
        "func_name": "_homogenize",
        "type_comments": [
            "(List[numpy.ndarray], pandas.core.indexes.range.RangeIndex, None) -> Tuple[List[numpy.ndarray], List]",
            "(List[numpy.ndarray], pandas.core.indexes.multi.MultiIndex, numpy.dtypes.ObjectDType) -> Tuple[List[numpy.ndarray], List]",
            "(List[numpy.ndarray], pandas.core.indexes.range.RangeIndex, numpy.dtypes.ObjectDType) -> Tuple[List[numpy.ndarray], List]"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 616,
        "func_name": "_extract_index",
        "type_comments": [
            "(List[pandas.core.series.Series]) -> pandas.core.indexes.range.RangeIndex",
            "(List[numpy.ndarray]) -> pandas.core.indexes.range.RangeIndex"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 724,
        "func_name": "_get_axes",
        "type_comments": [
            "(int, int, pandas.core.indexes.base.Index, pandas.core.indexes.base.Index) -> Tuple[pandas.core.indexes.base.Index, pandas.core.indexes.base.Index]",
            "(int, int, pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex) -> Tuple[pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex]"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 775,
        "func_name": "to_arrays",
        "type_comments": [
            "(List[List[float]], pandas.core.indexes.base.Index, numpy.dtypes.ObjectDType) -> Tuple[List[numpy.ndarray], pandas.core.indexes.base.Index]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 844,
        "func_name": "_list_to_arrays",
        "type_comments": [
            "(List[List[float]]) -> numpy.ndarray"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 923,
        "func_name": "_finalize_columns_and_data",
        "type_comments": [
            "(numpy.ndarray, pandas.core.indexes.base.Index, numpy.dtypes.ObjectDType) -> Tuple[List[numpy.ndarray], pandas.core.indexes.base.Index]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 945,
        "func_name": "_validate_or_indexify_columns",
        "type_comments": [
            "(List[numpy.ndarray], pandas.core.indexes.base.Index) -> pandas.core.indexes.base.Index"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 1001,
        "func_name": "convert_object_array",
        "type_comments": [
            "(List[numpy.ndarray], numpy.dtypes.ObjectDType, str, bool) -> List[numpy.ndarray]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\construction.py",
        "line": 1023,
        "func_name": "convert",
        "type_comments": [
            "(numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 167,
        "func_name": "blknos",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 24
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 183,
        "func_name": "blklocs",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 17
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 223,
        "func_name": "BaseBlockManager.set_axis",
        "type_comments": [
            "(int, pandas.core.indexes.multi.MultiIndex) -> None",
            "(int, pandas.core.indexes.base.Index) -> None",
            "(int, pandas.core.indexes.range.RangeIndex) -> None"
        ],
        "samples": 43
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 228,
        "func_name": "is_single_block",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 233,
        "func_name": "items",
        "type_comments": [
            "() -> pandas.core.indexes.base.Index",
            "() -> pandas.core.indexes.range.RangeIndex"
        ],
        "samples": 22
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 276,
        "func_name": "BaseBlockManager.get_dtypes",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 280,
        "func_name": "arrays",
        "type_comments": [
            "() -> List[numpy.ndarray]"
        ],
        "samples": 19
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 306,
        "func_name": "BaseBlockManager.apply",
        "type_comments": [
            "(str, None) -> pandas.core.internals.managers.SingleBlockManager",
            "(builtin_function_or_method, None) -> pandas.core.internals.managers.BlockManager",
            "(str, None) -> pandas.core.internals.managers.BlockManager",
            "(builtin_function_or_method, None) -> pandas.core.internals.managers.SingleBlockManager"
        ],
        "samples": 148
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 358,
        "func_name": "BaseBlockManager.where",
        "type_comments": [
            "(pandas.core.frame.DataFrame, pandas.core.frame.DataFrame, bool) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 380,
        "func_name": "BaseBlockManager.setitem",
        "type_comments": [
            "(Tuple[numpy.ndarray], numpy.ndarray) -> pandas.core.internals.managers.SingleBlockManager",
            "(Tuple[numpy.ndarray], str) -> pandas.core.internals.managers.SingleBlockManager",
            "(Tuple[numpy.ndarray], pandas.core.indexes.base.Index) -> pandas.core.internals.managers.SingleBlockManager",
            "(numpy.int64, numpy.ndarray) -> pandas.core.internals.managers.SingleBlockManager"
        ],
        "samples": 143
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 428,
        "func_name": "BaseBlockManager.fillna",
        "type_comments": [
            "(bool, None, bool, None) -> pandas.core.internals.managers.SingleBlockManager",
            "(bool, None, bool, None) -> pandas.core.internals.managers.BlockManager",
            "(float, None, bool, None) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 442,
        "func_name": "BaseBlockManager.astype",
        "type_comments": [
            "(str, None, str) -> pandas.core.internals.managers.SingleBlockManager",
            "(type, None, str) -> pandas.core.internals.managers.SingleBlockManager"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 483,
        "func_name": "BaseBlockManager.replace_regex",
        "type_comments": [
            "() -> pandas.core.internals.managers.SingleBlockManager"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 486,
        "func_name": "BaseBlockManager.replace_list",
        "type_comments": [
            "(List[str], List[float], bool, bool) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 523,
        "func_name": "is_view",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 620,
        "func_name": "BaseBlockManager.copy",
        "type_comments": [
            "(bool) -> pandas.core.internals.managers.SingleBlockManager",
            "(None) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 646,
        "func_name": "copy_func",
        "type_comments": [
            "(pandas.core.indexes.base.Index) -> pandas.core.indexes.base.Index",
            "(pandas.core.indexes.range.RangeIndex) -> pandas.core.indexes.range.RangeIndex"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 683,
        "func_name": "BaseBlockManager.reindex_indexer",
        "type_comments": [
            "(pandas.core.indexes.multi.MultiIndex, numpy.ndarray, int, None, bool, None, bool, bool) -> pandas.core.internals.managers.BlockManager",
            "(pandas.core.indexes.base.Index, numpy.ndarray, int, None, bool, bool, bool, bool) -> pandas.core.internals.managers.BlockManager",
            "(pandas.core.indexes.base.Index, numpy.ndarray, int, None, bool, None, bool, bool) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 768,
        "func_name": "BaseBlockManager._slice_take_blocks_ax0",
        "type_comments": [
            "(numpy.ndarray, pandas._libs.lib._NoDefault, bool, bool) -> List[pandas.core.internals.blocks.ObjectBlock]",
            "(numpy.ndarray, None, bool, bool) -> List[Union[pandas.core.internals.blocks.NumericBlock, pandas.core.internals.blocks.ObjectBlock]]",
            "(numpy.ndarray, None, bool, bool) -> List[pandas.core.internals.blocks.ObjectBlock]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 903,
        "func_name": "BaseBlockManager._make_na_block",
        "type_comments": [
            "(pandas._libs.internals.BlockPlacement, None, bool) -> pandas.core.internals.blocks.NumericBlock"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 929,
        "func_name": "BaseBlockManager.take",
        "type_comments": [
            "(numpy.ndarray, int, bool, bool) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 982,
        "func_name": "BlockManager.__init__",
        "type_comments": [
            "(List[Union[pandas.core.internals.blocks.NumericBlock, pandas.core.internals.blocks.ObjectBlock]], List[pandas.core.indexes.base.Index], bool) -> None",
            "(List[pandas.core.internals.blocks.ObjectBlock], List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex]], bool) -> None",
            "(List[pandas.core.internals.blocks.ObjectBlock], List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.multi.MultiIndex]], bool) -> None",
            "(List[Union[pandas.core.internals.blocks.NumericBlock, pandas.core.internals.blocks.ObjectBlock]], List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex]], bool) -> None",
            "(List[pandas.core.internals.blocks.NumericBlock], List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex]], bool) -> None",
            "(List[pandas.core.internals.blocks.ObjectBlock], List[pandas.core.indexes.base.Index], bool) -> None",
            "(List[pandas.core.internals.blocks.NumericBlock], List[pandas.core.indexes.base.Index], bool) -> None"
        ],
        "samples": 27
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1004,
        "func_name": "BlockManager._verify_integrity",
        "type_comments": [
            "() -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1017,
        "func_name": "from_blocks",
        "type_comments": [
            "(List[Union[pandas.core.internals.blocks.NumericBlock, pandas.core.internals.blocks.ObjectBlock]], List[pandas.core.indexes.base.Index]) -> pandas.core.internals.managers.BlockManager",
            "(List[Union[pandas.core.internals.blocks.NumericBlock, pandas.core.internals.blocks.ObjectBlock]], List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex]]) -> pandas.core.internals.managers.BlockManager",
            "(List[pandas.core.internals.blocks.NumericBlock], List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex]]) -> pandas.core.internals.managers.BlockManager",
            "(List[Union[pandas.core.internals.blocks.NumericBlock, pandas.core.internals.blocks.ObjectBlock]], List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.multi.MultiIndex]]) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1027,
        "func_name": "BlockManager.fast_xs",
        "type_comments": [
            "(int) -> pandas.core.internals.managers.SingleBlockManager"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1084,
        "func_name": "BlockManager.iget",
        "type_comments": [
            "(int, bool) -> pandas.core.internals.managers.SingleBlockManager"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1138,
        "func_name": "BlockManager.iset",
        "type_comments": [
            "(int, numpy.ndarray, bool) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1195,
        "func_name": "value_getitem",
        "type_comments": [
            "(pandas._libs.internals.BlockPlacement) -> numpy.ndarray"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1281,
        "func_name": "BlockManager._iset_split_block",
        "type_comments": [
            "(int, numpy.ndarray, None) -> None"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1328,
        "func_name": "BlockManager._iset_single",
        "type_comments": [
            "(int, numpy.ndarray, bool, numpy.int64, pandas.core.internals.blocks.ObjectBlock) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1355,
        "func_name": "BlockManager.column_setitem",
        "type_comments": [
            "(int, numpy.ndarray, str, bool) -> None",
            "(int, int, str, bool) -> None",
            "(numpy.int64, numpy.ndarray, numpy.ndarray, bool) -> None",
            "(int, numpy.ndarray, pandas.core.indexes.base.Index, bool) -> None"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1387,
        "func_name": "BlockManager.insert",
        "type_comments": [
            "(int, str, numpy.ndarray) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1436,
        "func_name": "BlockManager._insert_update_mgr_locs",
        "type_comments": [
            "(int) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1446,
        "func_name": "BlockManager._insert_update_blklocs_and_blknos",
        "type_comments": [
            "(int) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1468,
        "func_name": "BlockManager.idelete",
        "type_comments": [
            "(int) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1517,
        "func_name": "BlockManager.reduce",
        "type_comments": [
            "(function) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1677,
        "func_name": "BlockManager.as_array",
        "type_comments": [
            "(None, bool, pandas._libs.lib._NoDefault) -> numpy.ndarray"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1741,
        "func_name": "BlockManager._interleave",
        "type_comments": [
            "(None, pandas._libs.lib._NoDefault) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1805,
        "func_name": "BlockManager.is_consolidated",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 16
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1813,
        "func_name": "BlockManager._consolidate_check",
        "type_comments": [
            "() -> None"
        ],
        "samples": 16
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1823,
        "func_name": "BlockManager._consolidate_inplace",
        "type_comments": [
            "() -> None"
        ],
        "samples": 16
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1838,
        "func_name": "ndim",
        "type_comments": [
            "() -> int"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1847,
        "func_name": "SingleBlockManager.__init__",
        "type_comments": [
            "(pandas.core.internals.blocks.ExtensionBlock, pandas.core.indexes.range.RangeIndex, bool) -> None",
            "(pandas.core.internals.blocks.NumericBlock, pandas.core.indexes.range.RangeIndex, bool) -> None",
            "(pandas.core.internals.blocks.ObjectBlock, pandas.core.indexes.multi.MultiIndex, bool) -> None",
            "(pandas.core.internals.blocks.ObjectBlock, pandas.core.indexes.base.Index, bool) -> None",
            "(pandas.core.internals.blocks.NumericBlock, pandas.core.indexes.base.Index, bool) -> None",
            "(pandas.core.internals.blocks.ObjectBlock, pandas.core.indexes.range.RangeIndex, bool) -> None"
        ],
        "samples": 190
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1860,
        "func_name": "from_blocks",
        "type_comments": [
            "(List[pandas.core.internals.blocks.ObjectBlock], List[pandas.core.indexes.range.RangeIndex]) -> pandas.core.internals.managers.SingleBlockManager",
            "(List[pandas.core.internals.blocks.ObjectBlock], List[pandas.core.indexes.multi.MultiIndex]) -> pandas.core.internals.managers.SingleBlockManager",
            "(List[pandas.core.internals.blocks.NumericBlock], List[pandas.core.indexes.range.RangeIndex]) -> pandas.core.internals.managers.SingleBlockManager",
            "(List[pandas.core.internals.blocks.ExtensionBlock], List[pandas.core.indexes.range.RangeIndex]) -> pandas.core.internals.managers.SingleBlockManager",
            "(List[pandas.core.internals.blocks.ObjectBlock], List[pandas.core.indexes.base.Index]) -> pandas.core.internals.managers.SingleBlockManager"
        ],
        "samples": 146
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1873,
        "func_name": "from_array",
        "type_comments": [
            "(numpy.ndarray, pandas.core.indexes.base.Index, None) -> pandas.core.internals.managers.SingleBlockManager",
            "(numpy.ndarray, pandas.core.indexes.multi.MultiIndex, None) -> pandas.core.internals.managers.SingleBlockManager",
            "(numpy.ndarray, pandas.core.indexes.range.RangeIndex, None) -> pandas.core.internals.managers.SingleBlockManager"
        ],
        "samples": 36
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1883,
        "func_name": "SingleBlockManager.to_2d_mgr",
        "type_comments": [
            "(pandas.core.indexes.range.RangeIndex) -> pandas.core.internals.managers.BlockManager",
            "(pandas.core.indexes.base.Index) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1944,
        "func_name": "_block",
        "type_comments": [
            "() -> pandas.core.internals.blocks.NumericBlock",
            "() -> pandas.core.internals.blocks.ObjectBlock",
            "() -> pandas.core.internals.blocks.ExtensionBlock"
        ],
        "samples": 173
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1958,
        "func_name": "SingleBlockManager.getitem_mgr",
        "type_comments": [
            "(numpy.ndarray) -> pandas.core.internals.managers.SingleBlockManager"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 1996,
        "func_name": "index",
        "type_comments": [
            "() -> pandas.core.indexes.range.RangeIndex"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 2000,
        "func_name": "dtype",
        "type_comments": [
            "() -> numpy.dtypes.BoolDType",
            "() -> numpy.dtypes.ObjectDType"
        ],
        "samples": 24
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 2007,
        "func_name": "SingleBlockManager.external_values",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 2011,
        "func_name": "SingleBlockManager.internal_values",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 206
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 2015,
        "func_name": "SingleBlockManager.array_values",
        "type_comments": [
            "() -> pandas.core.arrays.numpy_.PandasArray"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 2028,
        "func_name": "SingleBlockManager.setitem_inplace",
        "type_comments": [
            "(int, str) -> None"
        ],
        "samples": 8
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 2093,
        "func_name": "create_block_manager_from_blocks",
        "type_comments": [
            "(List[pandas.core.internals.blocks.ObjectBlock], List[pandas.core.indexes.base.Index], bool, bool) -> pandas.core.internals.managers.BlockManager",
            "(List[pandas.core.internals.blocks.NumericBlock], List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex]], bool, bool) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 2119,
        "func_name": "create_block_manager_from_column_arrays",
        "type_comments": [
            "(List[numpy.ndarray], List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.multi.MultiIndex]], bool, List) -> pandas.core.internals.managers.BlockManager",
            "(List[numpy.ndarray], List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex]], bool, List) -> pandas.core.internals.managers.BlockManager"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 2175,
        "func_name": "_grouping_func",
        "type_comments": [
            "(Tuple[int, numpy.ndarray]) -> Tuple[int, bool, numpy.dtypes.Float64DType]",
            "(Tuple[int, numpy.ndarray]) -> Tuple[int, bool, numpy.dtypes.ObjectDType]",
            "(Tuple[int, numpy.ndarray]) -> Tuple[int, bool, numpy.dtypes.Int64DType]"
        ],
        "samples": 144
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 2191,
        "func_name": "_form_blocks",
        "type_comments": [
            "(List[numpy.ndarray], bool, List) -> List[Union[pandas.core.internals.blocks.NumericBlock, pandas.core.internals.blocks.ObjectBlock]]",
            "(List[numpy.ndarray], bool, List) -> List[pandas.core.internals.blocks.ObjectBlock]"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 2249,
        "func_name": "_stack_arrays",
        "type_comments": [
            "(List[Tuple[int, numpy.ndarray]], numpy.dtypes.Int64DType) -> Tuple[numpy.ndarray, Tuple[int]]",
            "(List[Tuple[int, numpy.ndarray]], numpy.dtypes.ObjectDType) -> Tuple[numpy.ndarray, Tuple[int, int, int, int, int, int]]",
            "(List[Tuple[int, numpy.ndarray]], numpy.dtypes.ObjectDType) -> Tuple[numpy.ndarray, Tuple[int, int]]",
            "(List[Tuple[int, numpy.ndarray]], numpy.dtypes.ObjectDType) -> Tuple[numpy.ndarray, Tuple[int, int, int, int, int, int, int, int, int, int]]"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 2262,
        "func_name": "_consolidate",
        "type_comments": [
            "(Tuple[pandas.core.internals.blocks.NumericBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock]) -> Tuple[pandas.core.internals.blocks.NumericBlock, pandas.core.internals.blocks.ObjectBlock]",
            "(Tuple[pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock]) -> Tuple[pandas.core.internals.blocks.ObjectBlock]",
            "(Tuple[pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock, pandas.core.internals.blocks.ObjectBlock]) -> Tuple[pandas.core.internals.blocks.NumericBlock, pandas.core.internals.blocks.ObjectBlock]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 2279,
        "func_name": "_merge_blocks",
        "type_comments": [
            "(List[pandas.core.internals.blocks.ObjectBlock], str, bool) -> Tuple[List[pandas.core.internals.blocks.ObjectBlock], bool]",
            "(List[pandas.core.internals.blocks.NumericBlock], str, bool) -> Tuple[List[pandas.core.internals.blocks.NumericBlock], bool]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 2314,
        "func_name": "_fast_count_smallints",
        "type_comments": [
            "(numpy.ndarray) -> zip"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\internals\\managers.py",
        "line": 2323,
        "func_name": "_preprocess_slice_or_indexer",
        "type_comments": [
            "(numpy.ndarray, int, bool) -> Tuple[str, numpy.ndarray, int]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\missing.py",
        "line": 49,
        "func_name": "check_value_size",
        "type_comments": [
            "(float, numpy.ndarray, int) -> float"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\missing.py",
        "line": 121,
        "func_name": "clean_fill_method",
        "type_comments": [
            "(None, bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\missing.py",
        "line": 949,
        "func_name": "clean_reindex_fill_method",
        "type_comments": [
            "(None) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\nanops.py",
        "line": 198,
        "func_name": "_get_fill_value",
        "type_comments": [
            "(numpy.dtypes.BoolDType, bool, None) -> bool"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\nanops.py",
        "line": 220,
        "func_name": "_maybe_get_mask",
        "type_comments": [
            "(numpy.ndarray, bool, None) -> None"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\nanops.py",
        "line": 264,
        "func_name": "_get_values",
        "type_comments": [
            "(numpy.ndarray, bool, bool, None, None) -> Tuple[numpy.ndarray, None, numpy.dtypes.BoolDType, numpy.dtypes.Int64DType, bool]"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\nanops.py",
        "line": 353,
        "func_name": "_na_ok_dtype",
        "type_comments": [
            "(numpy.dtypes.BoolDType) -> bool"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\nanops.py",
        "line": 499,
        "func_name": "nanany",
        "type_comments": [
            "(numpy.ndarray, None, bool, None) -> numpy.bool_",
            "(numpy.ndarray, int, bool, None) -> numpy.ndarray"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\nanops.py",
        "line": 554,
        "func_name": "nanall",
        "type_comments": [
            "(numpy.ndarray, None, bool, None) -> numpy.bool_",
            "(numpy.ndarray, int, bool, None) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\ops\\__init__.py",
        "line": 157,
        "func_name": "align_method_SERIES",
        "type_comments": [
            "(pandas.core.series.Series, str, bool) -> Tuple[pandas.core.series.Series, str]",
            "(pandas.core.series.Series, pandas.core.series.Series, bool) -> Tuple[pandas.core.series.Series, pandas.core.series.Series]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\ops\\array_ops.py",
        "line": 67,
        "func_name": "comp_method_OBJECT_ARRAY",
        "type_comments": [
            "(builtin_function_or_method, numpy.ndarray, str) -> numpy.ndarray"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\ops\\array_ops.py",
        "line": 142,
        "func_name": "_na_arithmetic_op",
        "type_comments": [
            "(numpy.ndarray, str, builtin_function_or_method, bool) -> numpy.ndarray"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\ops\\array_ops.py",
        "line": 191,
        "func_name": "arithmetic_op",
        "type_comments": [
            "(pandas.core.arrays.string_.StringArray, numpy.ndarray, builtin_function_or_method) -> pandas.core.arrays.string_.StringArray",
            "(pandas.core.arrays.string_.StringArray, str, builtin_function_or_method) -> pandas.core.arrays.string_.StringArray",
            "(numpy.ndarray, str, builtin_function_or_method) -> numpy.ndarray"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\ops\\array_ops.py",
        "line": 301,
        "func_name": "na_logical_op",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, builtin_function_or_method) -> numpy.ndarray"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\ops\\array_ops.py",
        "line": 342,
        "func_name": "logical_op",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray, builtin_function_or_method) -> numpy.ndarray"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\ops\\array_ops.py",
        "line": 360,
        "func_name": "fill_bool",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray) -> numpy.ndarray",
            "(numpy.ndarray, None) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\ops\\array_ops.py",
        "line": 451,
        "func_name": "maybe_prepare_scalar_for_op",
        "type_comments": [
            "(str, Tuple[int]) -> str",
            "(numpy.ndarray, Tuple[int]) -> numpy.ndarray"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\ops\\array_ops.py",
        "line": 532,
        "func_name": "_bool_arith_check",
        "type_comments": [
            "(builtin_function_or_method, numpy.ndarray, str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\ops\\common.py",
        "line": 67,
        "func_name": "new_method",
        "type_comments": [
            "(str) -> pandas.core.indexes.base.Index",
            "(pandas.core.series.Series) -> pandas.core.series.Series",
            "(str) -> numpy.ndarray"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\ops\\common.py",
        "line": 86,
        "func_name": "get_op_result_name",
        "type_comments": [
            "(pandas.core.series.Series, pandas.core.series.Series) -> str",
            "(pandas.core.series.Series, pandas.core.series.Series) -> None",
            "(pandas.core.indexes.base.Index, pandas.core.indexes.base.Index) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\ops\\common.py",
        "line": 108,
        "func_name": "_maybe_match_name",
        "type_comments": [
            "(pandas.core.series.Series, pandas.core.series.Series) -> str",
            "(pandas.core.series.Series, pandas.core.series.Series) -> None",
            "(pandas.core.indexes.base.Index, pandas.core.indexes.base.Index) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\ops\\dispatch.py",
        "line": 13,
        "func_name": "should_extension_dispatch",
        "type_comments": [
            "(numpy.ndarray, numpy.ndarray) -> bool",
            "(numpy.ndarray, str) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\ops\\missing.py",
        "line": 137,
        "func_name": "dispatch_fill_zeros",
        "type_comments": [
            "(builtin_function_or_method, numpy.ndarray, str, numpy.ndarray) -> numpy.ndarray"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\reshape\\concat.py",
        "line": 149,
        "func_name": "concat",
        "type_comments": [
            "(List[Union[pandas.core.frame.DataFrame, skombo.fd_ops.FrameData]], int, str, bool, None, None, None, bool, bool, None) -> pandas.core.frame.DataFrame",
            "(List[pandas.core.frame.DataFrame], int, str, bool, None, None, None, bool, bool, None) -> pandas.core.frame.DataFrame",
            "(generator, int, str, bool, None, None, None, bool, bool, None) -> pandas.core.frame.DataFrame"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\reshape\\concat.py",
        "line": 393,
        "func_name": "_Concatenator.__init__",
        "type_comments": [
            "(generator, int, str, None, None, None, bool, bool, bool, bool) -> None",
            "(List[Union[pandas.core.frame.DataFrame, skombo.fd_ops.FrameData]], int, str, None, None, None, bool, bool, bool, bool) -> None",
            "(List[pandas.core.frame.DataFrame], int, str, None, None, None, bool, bool, bool, bool) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\reshape\\concat.py",
        "line": 565,
        "func_name": "_Concatenator.get_result",
        "type_comments": [
            "() -> pandas.core.frame.DataFrame"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\reshape\\concat.py",
        "line": 625,
        "func_name": "_Concatenator._get_result_dim",
        "type_comments": [
            "() -> int"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\reshape\\concat.py",
        "line": 631,
        "func_name": "_Concatenator._get_new_axes",
        "type_comments": [
            "() -> List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.multi.MultiIndex]]",
            "() -> List[Union[pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex]]",
            "() -> List[pandas.core.indexes.base.Index]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\reshape\\concat.py",
        "line": 638,
        "func_name": "_Concatenator._get_comb_axis",
        "type_comments": [
            "(int) -> pandas.core.indexes.base.Index"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\reshape\\concat.py",
        "line": 648,
        "func_name": "_get_concat_axis",
        "type_comments": [
            "() -> pandas.core.indexes.base.Index",
            "() -> pandas.core.indexes.multi.MultiIndex",
            "() -> pandas.core.indexes.range.RangeIndex"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\reshape\\concat.py",
        "line": 701,
        "func_name": "_Concatenator._maybe_check_integrity",
        "type_comments": [
            "(pandas.core.indexes.multi.MultiIndex) -> None",
            "(pandas.core.indexes.base.Index) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\reshape\\concat.py",
        "line": 708,
        "func_name": "_concat_indexes",
        "type_comments": [
            "(List[pandas.core.indexes.base.Index]) -> pandas.core.indexes.base.Index",
            "(List[pandas.core.indexes.multi.MultiIndex]) -> pandas.core.indexes.multi.MultiIndex"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 368,
        "func_name": "Series.__init__",
        "type_comments": [
            "(Dict[str, numpy.ndarray], List[str], type, None, None, bool) -> pyannotate_runtime.collect_types.UnknownType",
            "(numpy.ndarray, pandas.core.indexes.range.RangeIndex, None, None, bool, bool) -> None",
            "(pandas.core.internals.managers.SingleBlockManager, None, None, None, None, bool) -> None",
            "(numpy.ndarray, pandas.core.indexes.base.Index, None, None, bool, bool) -> None",
            "(List[numpy.ndarray], Tuple[str, str, str], numpy.dtypes.ObjectDType, None, None, bool) -> None",
            "(numpy.ndarray, pandas.core.indexes.multi.MultiIndex, numpy.dtypes.ObjectDType, str, None, bool) -> None",
            "(pandas.core.series.Series, None, None, None, None, bool) -> None",
            "(numpy.ndarray, pandas.core.indexes.base.Index, None, Tuple[str, str], None, bool) -> None"
        ],
        "samples": 52
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 521,
        "func_name": "Series._init_dict",
        "type_comments": [
            "(Dict[str, str], None, None) -> Tuple[pandas.core.internals.managers.SingleBlockManager, pandas.core.indexes.base.Index]",
            "(Dict[str, numpy.ndarray], pandas.core.indexes.base.Index, numpy.dtypes.ObjectDType) -> Tuple[pandas.core.internals.managers.SingleBlockManager, pandas.core.indexes.base.Index]",
            "(Dict[str, int], None, None) -> Tuple[pandas.core.internals.managers.SingleBlockManager, pandas.core.indexes.base.Index]",
            "(Dict, pandas.core.indexes.base.Index, numpy.dtypes.ObjectDType) -> Tuple[pandas.core.internals.managers.SingleBlockManager, pandas.core.indexes.base.Index]"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 574,
        "func_name": "_constructor",
        "type_comments": [
            "() -> type"
        ],
        "samples": 17
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 578,
        "func_name": "_constructor_expanddim",
        "type_comments": [
            "() -> type"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 594,
        "func_name": "dtype",
        "type_comments": [
            "() -> numpy.dtypes.BoolDType",
            "() -> numpy.dtypes.ObjectDType"
        ],
        "samples": 24
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 621,
        "func_name": "name",
        "type_comments": [
            "() -> str",
            "() -> pyannotate_runtime.collect_types.NoReturnType",
            "() -> None"
        ],
        "samples": 85
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 671,
        "func_name": "name",
        "type_comments": [
            "(Tuple[str, str]) -> None",
            "(int) -> None",
            "(None) -> None",
            "(str) -> None"
        ],
        "samples": 66
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 676,
        "func_name": "values",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 718,
        "func_name": "_values",
        "type_comments": [
            "() -> numpy.ndarray"
        ],
        "samples": 206
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 752,
        "func_name": "_references",
        "type_comments": [
            "() -> pandas._libs.internals.BlockValuesRefs"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 759,
        "func_name": "array",
        "type_comments": [
            "() -> pandas.core.arrays.numpy_.PandasArray"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 783,
        "func_name": "Series.__len__",
        "type_comments": [
            "() -> int"
        ],
        "samples": 16
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 869,
        "func_name": "Series.__array__",
        "type_comments": [
            "(numpy.dtypes.BoolDType) -> numpy.ndarray"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 943,
        "func_name": "Series.take",
        "type_comments": [
            "(numpy.ndarray, int) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 962,
        "func_name": "Series._take_with_is_copy",
        "type_comments": [
            "(numpy.ndarray, int) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 992,
        "func_name": "Series.__getitem__",
        "type_comments": [
            "(str) -> float",
            "(str) -> int",
            "(str) -> str"
        ],
        "samples": 16
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 1095,
        "func_name": "Series._get_values",
        "type_comments": [
            "(numpy.ndarray) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 1099,
        "func_name": "Series._get_value",
        "type_comments": [
            "(numpy.int64, bool) -> float",
            "(str, bool) -> int",
            "(str, bool) -> str",
            "(str, bool) -> float"
        ],
        "samples": 154
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 1258,
        "func_name": "Series._set_values",
        "type_comments": [
            "(numpy.int64, numpy.ndarray) -> None"
        ],
        "samples": 143
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 1265,
        "func_name": "Series._set_value",
        "type_comments": [
            "(numpy.int64, numpy.ndarray, bool) -> None"
        ],
        "samples": 143
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 1314,
        "func_name": "Series._set_as_cached",
        "type_comments": [
            "(str, skombo.fd_ops.FrameData) -> None",
            "(str, pandas.core.frame.DataFrame) -> None"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 1323,
        "func_name": "Series._clear_item_cache",
        "type_comments": [
            "() -> None"
        ],
        "samples": 43
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 1338,
        "func_name": "Series._maybe_update_cacher",
        "type_comments": [
            "(bool, bool, bool) -> None"
        ],
        "samples": 143
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 1744,
        "func_name": "Series.to_markdown",
        "type_comments": [
            "(None, str, bool, None) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 1903,
        "func_name": "Series.to_frame",
        "type_comments": [
            "(pandas._libs.lib._NoDefault) -> pandas.core.frame.DataFrame"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 1943,
        "func_name": "Series._set_name",
        "type_comments": [
            "(str, bool, None) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 3075,
        "func_name": "Series._construct_result",
        "type_comments": [
            "(pandas.core.arrays.string_.StringArray, str) -> pandas.core.series.Series",
            "(numpy.ndarray, str) -> pandas.core.series.Series",
            "(numpy.ndarray, None) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 4201,
        "func_name": "Series.explode",
        "type_comments": [
            "(bool) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 4318,
        "func_name": "Series.map",
        "type_comments": [
            "(Dict[str, int], None) -> pandas.core.series.Series"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 4520,
        "func_name": "Series.apply",
        "type_comments": [
            "(function, bool, Tuple[]) -> pandas.core.series.Series",
            "(functools._lru_cache_wrapper, bool, Tuple[]) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 4632,
        "func_name": "Series._reduce",
        "type_comments": [
            "(function, str, int, bool, None, str) -> numpy.bool_",
            "(function, str, None, bool, None, str) -> numpy.bool_"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 4772,
        "func_name": "Series.rename",
        "type_comments": [
            "(str, None, None, bool, None, str) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 4901,
        "func_name": "Series.reindex",
        "type_comments": [
            "(pandas.core.indexes.base.Index, None, None, bool, None, None, None, None) -> pandas.core.series.Series",
            "(pandas.core.indexes.range.RangeIndex, None, None, bool, None, None, None, None) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 5134,
        "func_name": "Series.fillna",
        "type_comments": [
            "(bool, None, None, bool, None, None) -> pandas.core.series.Series",
            "(int, None, None, bool, None, None) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 5207,
        "func_name": "Series.replace",
        "type_comments": [
            "(str, str, bool, None, bool, pandas._libs.lib._NoDefault) -> pandas.core.series.Series"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 5540,
        "func_name": "Series.isna",
        "type_comments": [
            "() -> pandas.core.series.Series"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 5553,
        "func_name": "Series.notna",
        "type_comments": [
            "() -> pandas.core.series.Series"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 6100,
        "func_name": "Series._logical_method",
        "type_comments": [
            "(pandas.core.series.Series, builtin_function_or_method) -> pandas.core.series.Series"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\series.py",
        "line": 6110,
        "func_name": "Series._arith_method",
        "type_comments": [
            "(str, builtin_function_or_method) -> pandas.core.series.Series",
            "(pandas.core.series.Series, builtin_function_or_method) -> pandas.core.series.Series"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py",
        "line": 121,
        "func_name": "wrapper",
        "type_comments": [
            "(*str) -> pandas.core.series.Series",
            "() -> pandas.core.series.Series"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py",
        "line": 178,
        "func_name": "StringMethods.__init__",
        "type_comments": [
            "(pandas.core.series.Series) -> None"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py",
        "line": 197,
        "func_name": "_validate",
        "type_comments": [
            "(pandas.core.series.Series) -> str"
        ],
        "samples": 6
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py",
        "line": 242,
        "func_name": "StringMethods._wrap_result",
        "type_comments": [
            "(numpy.ndarray, None, None, None, bool, bool) -> pandas.core.series.Series",
            "(numpy.ndarray, None, None, float, bool, bool) -> pandas.core.series.Series",
            "(numpy.ndarray, None, bool, float, bool, bool) -> pandas.core.series.Series"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py",
        "line": 809,
        "func_name": "split",
        "type_comments": [
            "(str, int, bool, None) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py",
        "line": 1154,
        "func_name": "contains",
        "type_comments": [
            "(str, bool, re.RegexFlag, None, bool) -> pandas.core.series.Series",
            "(str, bool, int, None, bool) -> pandas.core.series.Series",
            "(str, bool, int, bool, bool) -> pandas.core.series.Series"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py",
        "line": 1357,
        "func_name": "replace",
        "type_comments": [
            "(str, str, int, None, int, bool) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py",
        "line": 2004,
        "func_name": "strip",
        "type_comments": [
            "(None) -> pandas.core.series.Series"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py",
        "line": 2295,
        "func_name": "startswith",
        "type_comments": [
            "(str, None) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py",
        "line": 2365,
        "func_name": "endswith",
        "type_comments": [
            "(str, None) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py",
        "line": 2528,
        "func_name": "extract",
        "type_comments": [
            "(str, int, bool) -> pandas.core.frame.DataFrame",
            "(str, int, bool) -> pandas.core.series.Series"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py",
        "line": 3304,
        "func_name": "_result_dtype",
        "type_comments": [
            "(pandas.core.series.Series) -> type"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py",
        "line": 3316,
        "func_name": "_get_single_group_name",
        "type_comments": [
            "(re.Pattern) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py",
        "line": 3323,
        "func_name": "_get_group_names",
        "type_comments": [
            "(re.Pattern) -> List[int]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\object_array.py",
        "line": 44,
        "func_name": "ObjectStringArrayMixin._str_map",
        "type_comments": [
            "(function, None, numpy.dtypes.BoolDType, bool) -> numpy.ndarray",
            "(function, None, None, bool) -> numpy.ndarray",
            "(function, None, type, bool) -> numpy.ndarray"
        ],
        "samples": 9
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\object_array.py",
        "line": 127,
        "func_name": "ObjectStringArrayMixin._str_contains",
        "type_comments": [
            "(str, bool, re.RegexFlag, None, bool) -> numpy.ndarray",
            "(str, bool, int, None, bool) -> numpy.ndarray",
            "(str, bool, int, bool, bool) -> numpy.ndarray"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\object_array.py",
        "line": 145,
        "func_name": "ObjectStringArrayMixin._str_startswith",
        "type_comments": [
            "(str, None) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\object_array.py",
        "line": 149,
        "func_name": "ObjectStringArrayMixin._str_endswith",
        "type_comments": [
            "(str, None) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\object_array.py",
        "line": 153,
        "func_name": "ObjectStringArrayMixin._str_replace",
        "type_comments": [
            "(str, str, int, bool, int, bool) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\object_array.py",
        "line": 321,
        "func_name": "ObjectStringArrayMixin._str_split",
        "type_comments": [
            "(str, int, bool, None) -> numpy.ndarray"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\object_array.py",
        "line": 444,
        "func_name": "ObjectStringArrayMixin._str_strip",
        "type_comments": [
            "(None) -> numpy.ndarray"
        ],
        "samples": 3
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\object_array.py",
        "line": 475,
        "func_name": "ObjectStringArrayMixin._str_extract",
        "type_comments": [
            "(str, int, bool) -> List[List[float]]",
            "(str, int, bool) -> numpy.ndarray"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\object_array.py",
        "line": 481,
        "func_name": "g",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\core\\strings\\object_array.py",
        "line": 489,
        "func_name": "f",
        "type_comments": [
            "(str) -> List[float]",
            "(str) -> List[str]",
            "(float) -> List[float]"
        ],
        "samples": 23
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 117,
        "func_name": "IOHandles.close",
        "type_comments": [
            "() -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 141,
        "func_name": "is_url",
        "type_comments": [
            "(str) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 169,
        "func_name": "_expand_user",
        "type_comments": [
            "(_io.TextIOWrapper) -> _io.TextIOWrapper",
            "(str) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 188,
        "func_name": "validate_header_arg",
        "type_comments": [
            "(int) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 229,
        "func_name": "stringify_path",
        "type_comments": [
            "(_io.TextIOWrapper, bool) -> _io.TextIOWrapper"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 273,
        "func_name": "is_fsspec_url",
        "type_comments": [
            "(_io.TextIOWrapper) -> bool",
            "(str) -> bool"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 285,
        "func_name": "_get_filepath_or_buffer",
        "type_comments": [
            "(str, str, str, str, None) -> pandas.io.common.IOArgs",
            "(_io.TextIOWrapper, str, str, str, None) -> pandas.io.common.IOArgs"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 499,
        "func_name": "get_compression_method",
        "type_comments": [
            "(str) -> Tuple[str, Dict]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 534,
        "func_name": "infer_compression",
        "type_comments": [
            "(_io.TextIOWrapper, str) -> None",
            "(str, str) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 648,
        "func_name": "get_handle",
        "type_comments": [
            "(str, str, None, str, bool, bool, str, None) -> pandas.io.common.IOHandles",
            "(_io.TextIOWrapper, str, str, str, bool, bool, str, None) -> pandas.io.common.IOHandles"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 1103,
        "func_name": "_maybe_memory_map",
        "type_comments": [
            "(_io.TextIOWrapper, bool) -> Tuple[_io.TextIOWrapper, bool, List]",
            "(str, bool) -> Tuple[str, bool, List]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 1151,
        "func_name": "_is_binary_mode",
        "type_comments": [
            "(_io.TextIOWrapper, str) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 1172,
        "func_name": "_get_binary_io_classes",
        "type_comments": [
            "() -> Tuple[abc.ABCMeta, abc.ABCMeta]"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 1190,
        "func_name": "is_potential_multi_index",
        "type_comments": [
            "(List[str], None) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\common.py",
        "line": 1219,
        "func_name": "dedup_names",
        "type_comments": [
            "(List[str], bool) -> List[str]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\formats\\printing.py",
        "line": 98,
        "func_name": "_pprint_seq",
        "type_comments": [
            "(pandas.core.indexes.frozen.FrozenList, int, None) -> str"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\formats\\printing.py",
        "line": 164,
        "func_name": "pprint_thing",
        "type_comments": [
            "(str, int, Tuple[str, str, str], bool, bool, None) -> str",
            "(pandas.core.indexes.frozen.FrozenList, int, Tuple[str, str, str], bool, bool, None) -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\formats\\printing.py",
        "line": 195,
        "func_name": "as_escaped_string",
        "type_comments": [
            "(str, Tuple[str, str, str]) -> str"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py",
        "line": 108,
        "func_name": "ParserBase.__init__",
        "type_comments": [
            "(Dict[str, Optional[Union[bool, int, str]]]) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py",
        "line": 178,
        "func_name": "ParserBase._validate_parse_dates_presence",
        "type_comments": [
            "(List[str]) -> List"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py",
        "line": 242,
        "func_name": "_has_complex_date_col",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py",
        "line": 271,
        "func_name": "ParserBase._extract_multi_indexer_columns",
        "type_comments": [
            "(List[List[str]], None, bool) -> Tuple[List[str], None, None, bool]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py",
        "line": 342,
        "func_name": "ParserBase._maybe_make_multi_index_columns",
        "type_comments": [
            "(List[str], None) -> List[str]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py",
        "line": 354,
        "func_name": "ParserBase._make_index",
        "type_comments": [
            "(Dict[str, numpy.ndarray], List[numpy.ndarray], List[str], None) -> Tuple[None, List[str]]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py",
        "line": 595,
        "func_name": "ParserBase._set_noconvert_dtype_columns",
        "type_comments": [
            "(List[int], List[str]) -> Set"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py",
        "line": 855,
        "func_name": "ParserBase._do_date_conversions",
        "type_comments": [
            "(List[str], Dict[str, numpy.ndarray]) -> Tuple[List[str], Dict[str, numpy.ndarray]]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py",
        "line": 876,
        "func_name": "ParserBase._check_data_length",
        "type_comments": [
            "(List[str], List[numpy.ndarray]) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py",
        "line": 966,
        "func_name": "ParserBase._validate_usecols_arg",
        "type_comments": [
            "(None) -> Tuple[None, None]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py",
        "line": 1099,
        "func_name": "_make_date_converter",
        "type_comments": [
            "(pandas._libs.lib._NoDefault, bool, bool, None) -> function"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py",
        "line": 1211,
        "func_name": "_process_date_conversion",
        "type_comments": [
            "(Dict[str, numpy.ndarray], function, bool, None, None, List[str], bool, pandas._libs.lib._NoDefault) -> Tuple[Dict[str, numpy.ndarray], List[str]]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py",
        "line": 1365,
        "func_name": "_validate_parse_dates_arg",
        "type_comments": [
            "(bool) -> bool"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\base_parser.py",
        "line": 1387,
        "func_name": "is_index_col",
        "type_comments": [
            "(None) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\c_parser_wrapper.py",
        "line": 60,
        "func_name": "CParserWrapper.__init__",
        "type_comments": [
            "(_io.TextIOWrapper) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\c_parser_wrapper.py",
        "line": 194,
        "func_name": "CParserWrapper.close",
        "type_comments": [
            "() -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\c_parser_wrapper.py",
        "line": 201,
        "func_name": "CParserWrapper._set_noconvert_columns",
        "type_comments": [
            "() -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\c_parser_wrapper.py",
        "line": 222,
        "func_name": "CParserWrapper.read",
        "type_comments": [
            "(None) -> Tuple[None, List[str], Dict[str, numpy.ndarray]]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\c_parser_wrapper.py",
        "line": 368,
        "func_name": "_concatenate_chunks",
        "type_comments": [
            "(List[Dict[int, numpy.ndarray]]) -> Dict[int, numpy.ndarray]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\c_parser_wrapper.py",
        "line": 405,
        "func_name": "ensure_dtype_objs",
        "type_comments": [
            "(None) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 486,
        "func_name": "validate_integer",
        "type_comments": [
            "(str, None, int) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 516,
        "func_name": "_validate_names",
        "type_comments": [
            "(None) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 540,
        "func_name": "_read",
        "type_comments": [
            "(_io.TextIOWrapper, Dict[str, Optional[str]]) -> pandas.core.frame.DataFrame",
            "(str, Dict[str, Optional[str]]) -> pandas.core.frame.DataFrame"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 814,
        "func_name": "read_csv",
        "type_comments": [
            "(_io.TextIOWrapper, pandas._libs.lib._NoDefault, None, str, pandas._libs.lib._NoDefault, None, None, None, None, None, None, None, bool, None, int, None, None, bool, bool, bool, bool, None, pandas._libs.lib._NoDefault, bool, pandas._libs.lib._NoDefault, None, bool, bool, bool, None, str, None, str, None, str, int, bool, None, None, str, str, None, str, bool, bool, bool, None, None, pandas._libs.lib._NoDefault) -> pandas.core.frame.DataFrame",
            "(str, pandas._libs.lib._NoDefault, None, str, pandas._libs.lib._NoDefault, None, None, None, None, None, None, None, bool, None, int, None, None, bool, bool, bool, bool, None, pandas._libs.lib._NoDefault, bool, pandas._libs.lib._NoDefault, None, bool, bool, bool, None, str, None, str, None, str, int, bool, None, None, None, str, None, str, bool, bool, bool, None, None, pandas._libs.lib._NoDefault) -> pandas.core.frame.DataFrame"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 1362,
        "func_name": "TextFileReader.__init__",
        "type_comments": [
            "(_io.TextIOWrapper, str) -> None",
            "(str, str) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 1409,
        "func_name": "TextFileReader.close",
        "type_comments": [
            "() -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 1414,
        "func_name": "TextFileReader._get_options_with_defaults",
        "type_comments": [
            "(str) -> Dict[str, Optional[Union[bool, int, str]]]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 1458,
        "func_name": "TextFileReader._check_file_or_buffer",
        "type_comments": [
            "(_io.TextIOWrapper, str) -> None",
            "(str, str) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 1469,
        "func_name": "TextFileReader._clean_options",
        "type_comments": [
            "(Dict[str, Optional[Union[bool, int, str]]], str) -> Tuple[Dict[str, Optional[Union[bool, int, str]]], str]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 1629,
        "func_name": "TextFileReader._make_engine",
        "type_comments": [
            "(str, str) -> pandas.io.parsers.c_parser_wrapper.CParserWrapper",
            "(_io.TextIOWrapper, str) -> pandas.io.parsers.c_parser_wrapper.CParserWrapper"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 1688,
        "func_name": "TextFileReader.read",
        "type_comments": [
            "(None) -> pandas.core.frame.DataFrame"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 1735,
        "func_name": "TextFileReader.__enter__",
        "type_comments": [
            "() -> pandas.io.parsers.readers.TextFileReader"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 1738,
        "func_name": "TextFileReader.__exit__",
        "type_comments": [
            "(None, None, None) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 1806,
        "func_name": "_clean_na_values",
        "type_comments": [
            "(None, bool) -> Tuple[Set[str], Set]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 1881,
        "func_name": "_refine_defaults_read",
        "type_comments": [
            "(None, None, bool, None, pandas._libs.lib._NoDefault, str, pandas._libs.lib._NoDefault, Dict[str, str], pandas._libs.lib._NoDefault) -> Dict[str, Optional[Union[bool, pandas.io.parsers.base_parser:ParserBase.BadLineHandleMethod, str]]]"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 2011,
        "func_name": "_extract_dialect",
        "type_comments": [
            "(Dict[str, Optional[str]]) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py",
        "line": 2109,
        "func_name": "_validate_skipfooter",
        "type_comments": [
            "(Dict[str, Optional[str]]) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\util\\_exceptions.py",
        "line": 30,
        "func_name": "find_stack_level",
        "type_comments": [
            "() -> int"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\util\\_validators.py",
        "line": 27,
        "func_name": "_check_arg_length",
        "type_comments": [
            "(str, Tuple[None], int, Dict[str, None]) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\util\\_validators.py",
        "line": 47,
        "func_name": "_check_for_default_values",
        "type_comments": [
            "(str, Dict[str, None], Dict[str, Optional[bool]]) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\util\\_validators.py",
        "line": 126,
        "func_name": "_check_for_invalid_keys",
        "type_comments": [
            "(str, Dict[str, None], Dict[str, Optional[bool]]) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\util\\_validators.py",
        "line": 139,
        "func_name": "validate_kwargs",
        "type_comments": [
            "(str, Dict[str, None], Dict[str, Optional[bool]]) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\util\\_validators.py",
        "line": 166,
        "func_name": "validate_args_and_kwargs",
        "type_comments": [
            "(str, Tuple[], Dict[str, None], int, Dict[str, None]) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\util\\_validators.py",
        "line": 224,
        "func_name": "validate_bool_kwarg",
        "type_comments": [
            "(bool, str, bool, bool) -> bool"
        ],
        "samples": 13
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\util\\_validators.py",
        "line": 266,
        "func_name": "validate_fillna_kwargs",
        "type_comments": [
            "(bool, None, bool) -> Tuple[bool, None]",
            "(float, None, bool) -> Tuple[float, None]",
            "(skombo.fd_ops.FrameData, None, bool) -> Tuple[skombo.fd_ops.FrameData, None]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\util\\_validators.py",
        "line": 445,
        "func_name": "check_dtype_backend",
        "type_comments": [
            "(pandas._libs.lib._NoDefault) -> None"
        ],
        "samples": 4
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\util\\version\\__init__.py",
        "line": 144,
        "func_name": "_BaseVersion.__lt__",
        "type_comments": [
            "(pandas.util.version.Version) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\util\\version\\__init__.py",
        "line": 334,
        "func_name": "Version.__init__",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\util\\version\\__init__.py",
        "line": 465,
        "func_name": "_parse_letter_version",
        "type_comments": [
            "(None, None) -> None"
        ],
        "samples": 7
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\util\\version\\__init__.py",
        "line": 503,
        "func_name": "_parse_local_version",
        "type_comments": [
            "(None) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pandas\\util\\version\\__init__.py",
        "line": 515,
        "func_name": "_cmpkey",
        "type_comments": [
            "(int, Tuple[int, int, int], None, None, None, None) -> Tuple[int, Tuple[int, int, int], pandas.util.version.InfinityType, pandas.util.version.NegativeInfinityType, pandas.util.version.InfinityType, pandas.util.version.NegativeInfinityType]",
            "(int, Tuple[int, int, int], None, None, None, None) -> Tuple[int, Tuple[int, int], pandas.util.version.InfinityType, pandas.util.version.NegativeInfinityType, pandas.util.version.InfinityType, pandas.util.version.NegativeInfinityType]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pluggy\\_callers.py",
        "line": 30,
        "func_name": "_multicall",
        "type_comments": [
            "(str, List[pluggy._hooks.HookImpl], Dict[str, Union[_pytest.python.Function, _pytest.runner.CallInfo]], bool) -> _pytest.reports.TestReport",
            "(str, List[pluggy._hooks.HookImpl], Dict[str, Union[_pytest.config.Config, _pytest.reports.TestReport]], bool) -> Tuple[str, str, str]",
            "(str, List[pluggy._hooks.HookImpl], Dict[str, _pytest.reports.TestReport], bool) -> pyannotate_runtime.collect_types.UnknownType",
            "(str, List[pluggy._hooks.HookImpl], Dict[str, _pytest.python.Function], bool) -> pyannotate_runtime.collect_types.UnknownType",
            "(str, List[pluggy._hooks.HookImpl], Dict[str, _pytest.python.Function], bool) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pluggy\\_hooks.py",
        "line": 369,
        "func_name": "_HookCaller.is_historic",
        "type_comments": [
            "() -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pluggy\\_hooks.py",
        "line": 409,
        "func_name": "_HookCaller._verify_all_args_are_provided",
        "type_comments": [
            "(Dict[str, Union[_pytest.config.Config, _pytest.reports.TestReport]]) -> None",
            "(Dict[str, _pytest.python.Function]) -> None",
            "(Dict[str, Union[_pytest.python.Function, _pytest.runner.CallInfo]]) -> None",
            "(Dict[str, _pytest.reports.TestReport]) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pluggy\\_hooks.py",
        "line": 427,
        "func_name": "_HookCaller.__call__",
        "type_comments": [
            "() -> bool",
            "() -> _pytest.reports.TestReport",
            "() -> Tuple[str, str, str]",
            "() -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pluggy\\_manager.py",
        "line": 103,
        "func_name": "PluginManager._hookexec",
        "type_comments": [
            "(str, List[pluggy._hooks.HookImpl], Dict[str, Union[_pytest.python.Function, _pytest.runner.CallInfo]], bool) -> _pytest.reports.TestReport",
            "(str, List[pluggy._hooks.HookImpl], Dict[str, Union[_pytest.config.Config, _pytest.reports.TestReport]], bool) -> Tuple[str, str, str]",
            "(str, List[pluggy._hooks.HookImpl], Dict[str, _pytest.reports.TestReport], bool) -> pyannotate_runtime.collect_types.UnknownType",
            "(str, List[pluggy._hooks.HookImpl], Dict[str, _pytest.python.Function], bool) -> pyannotate_runtime.collect_types.UnknownType",
            "(str, List[pluggy._hooks.HookImpl], Dict[str, _pytest.python.Function], bool) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pluggy\\_result.py",
        "line": 45,
        "func_name": "_Result.__init__",
        "type_comments": [
            "(_pytest.reports.TestReport, None) -> None",
            "(None, None) -> None",
            "(List, None) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pluggy\\_result.py",
        "line": 97,
        "func_name": "_Result.get_result",
        "type_comments": [
            "() -> List",
            "() -> _pytest.reports.TestReport",
            "() -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pluggy\\_tracing.py",
        "line": 42,
        "func_name": "TagTracer._processmessage",
        "type_comments": [
            "(Tuple[str], Tuple[str]) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pluggy\\_tracing.py",
        "line": 68,
        "func_name": "TagTracerSub.__call__",
        "type_comments": [
            "(*str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pytest_cov\\embed.py",
        "line": 66,
        "func_name": "_cleanup",
        "type_comments": [
            "(None) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pytest_cov\\embed.py",
        "line": 77,
        "func_name": "cleanup",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pytest_cov\\plugin.py",
        "line": 360,
        "func_name": "CovPlugin.pytest_runtest_teardown",
        "type_comments": [
            "(_pytest.python.Function) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\pytest_cov\\plugin.py",
        "line": 363,
        "func_name": "CovPlugin.pytest_runtest_call",
        "type_comments": [
            "(_pytest.python.Function) -> Iterator",
            "(_pytest.python.Function) -> Iterator"
        ],
        "samples": 2
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\six.py",
        "line": 194,
        "func_name": "_SixMetaPathImporter.find_spec",
        "type_comments": [
            "(str, None, None) -> None"
        ],
        "samples": 1
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 104,
        "func_name": "_is_separating_line",
        "type_comments": [
            "(List[Union[pandas._libs.missing.NAType, str]]) -> bool",
            "(List[float]) -> bool",
            "(List[str]) -> bool",
            "(List[Union[int, str]]) -> bool",
            "(List[int]) -> bool"
        ],
        "samples": 30
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 113,
        "func_name": "_pipe_segment_with_colons",
        "type_comments": [
            "(str, int) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 127,
        "func_name": "_pipe_line_with_colons",
        "type_comments": [
            "(List[int], List[str]) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 825,
        "func_name": "_isconvertible",
        "type_comments": [
            "(type, str) -> bool",
            "(type, pandas._libs.missing.NAType) -> bool"
        ],
        "samples": 30
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 833,
        "func_name": "_isnumber",
        "type_comments": [
            "(str) -> bool",
            "(pandas._libs.missing.NAType) -> bool"
        ],
        "samples": 18
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 855,
        "func_name": "_isint",
        "type_comments": [
            "(int, type) -> bool",
            "(str, type) -> bool",
            "(float, type) -> bool"
        ],
        "samples": 24
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 869,
        "func_name": "_isbool",
        "type_comments": [
            "(int) -> bool",
            "(pandas._libs.missing.NAType) -> bool",
            "(str) -> bool",
            "(bool) -> bool"
        ],
        "samples": 19
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 883,
        "func_name": "_type",
        "type_comments": [
            "(str, bool, bool) -> type",
            "(pandas._libs.missing.NAType, bool, bool) -> type",
            "(bool, bool, bool) -> type",
            "(int, bool, bool) -> type"
        ],
        "samples": 19
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 918,
        "func_name": "_afterpoint",
        "type_comments": [
            "(str) -> int"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 947,
        "func_name": "_padleft",
        "type_comments": [
            "(int, str) -> str"
        ],
        "samples": 10
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 958,
        "func_name": "_padright",
        "type_comments": [
            "(int, str) -> str"
        ],
        "samples": 15
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 984,
        "func_name": "_strip_ansi",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 12
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1022,
        "func_name": "_is_multiline",
        "type_comments": [
            "(str) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1034,
        "func_name": "_choose_width_fn",
        "type_comments": [
            "(bool, bool, bool) -> builtin_function_or_method"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1049,
        "func_name": "_align_column_choose_padfn",
        "type_comments": [
            "(List[str], str, bool) -> Tuple[List[str], function]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1075,
        "func_name": "_align_column_choose_width_fn",
        "type_comments": [
            "(bool, bool, bool) -> builtin_function_or_method"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1094,
        "func_name": "_flat_list",
        "type_comments": [
            "(List[int]) -> List[int]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1105,
        "func_name": "_align_column",
        "type_comments": [
            "(List[str], str, int, bool, bool, bool) -> List[str]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1154,
        "func_name": "_more_generic",
        "type_comments": [
            "(type, type) -> type"
        ],
        "samples": 19
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1175,
        "func_name": "_column_type",
        "type_comments": [
            "(Tuple[pandas._libs.missing.NAType, pandas._libs.missing.NAType, pandas._libs.missing.NAType, pandas._libs.missing.NAType, pandas._libs.missing.NAType, pandas._libs.missing.NAType, pandas._libs.missing.NAType, pandas._libs.missing.NAType, pandas._libs.missing.NAType], bool, bool) -> type",
            "(Tuple[str, str, str, str, str, str, str, str, str], bool, bool) -> type",
            "(Tuple[int, int, int, int, int, int, int, int, int], bool, bool) -> type"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1201,
        "func_name": "_format",
        "type_comments": [
            "(pandas._libs.missing.NAType, type, str, str, str, bool) -> str",
            "(bool, type, str, str, str, bool) -> str",
            "(int, type, str, str, str, bool) -> str",
            "(str, type, str, str, str, bool) -> str"
        ],
        "samples": 19
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1237,
        "func_name": "_align_header",
        "type_comments": [
            "(str, str, int, int, bool, builtin_function_or_method) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1260,
        "func_name": "_remove_separating_lines",
        "type_comments": [
            "(List[List[Union[pandas._libs.missing.NAType, str]]]) -> Tuple[List[List[Union[pandas._libs.missing.NAType, str]]], List]",
            "(List[List[Union[int, pandas._libs.missing.NAType, str]]]) -> Tuple[List[List[Union[int, pandas._libs.missing.NAType, str]]], List]",
            "(List[List[str]]) -> Tuple[List[List[str]], List]",
            "(List[Union[List[float], List[str]]]) -> Tuple[List[Union[List[float], List[str]]], List]",
            "(List[Union[List[Union[float, str]], List[str]]]) -> Tuple[List[Union[List[Union[float, str]], List[str]]], List]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1274,
        "func_name": "_reinsert_separating_lines",
        "type_comments": [
            "(List[List[Union[int, str]]], List) -> None",
            "(List[Union[List[Union[float, str]], List[str]]], List) -> None",
            "(List[Tuple[str, str]], List) -> None",
            "(List[List[Union[int, pandas._libs.missing.NAType, str]]], List) -> None",
            "(List[Tuple[str, str, str, str, str, str, str, str, str, str]], List) -> None"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1280,
        "func_name": "_prepend_row_index",
        "type_comments": [
            "(List[List[Union[pandas._libs.missing.NAType, str]]], List[int]) -> List[List[Union[int, pandas._libs.missing.NAType, str]]]",
            "(List[Union[List[float], List[str]]], List[str]) -> List[Union[List[Union[float, str]], List[str]]]",
            "(List[List[str]], List[int]) -> List[List[Union[int, str]]]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1300,
        "func_name": "_bool",
        "type_comments": [
            "(bool) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1308,
        "func_name": "_normalize_tabular_data",
        "type_comments": [
            "(pandas.core.frame.DataFrame, str, bool) -> Tuple[List[List[Union[int, pandas._libs.missing.NAType, str]]], List[str]]",
            "(pandas.core.frame.DataFrame, str, bool) -> Tuple[List[Union[List[Union[float, str]], List[str]]], List[str]]",
            "(pandas.core.frame.DataFrame, str, bool) -> Tuple[List[List[Union[int, str]]], List[str]]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1527,
        "func_name": "_to_str",
        "type_comments": [
            "(pandas._libs.missing.NAType, str, str) -> str",
            "(str, str, str) -> str",
            "(int, str, str) -> str"
        ],
        "samples": 20
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 1552,
        "func_name": "tabulate",
        "type_comments": [
            "(pandas.core.frame.DataFrame, str, str, str, str, str, str, str, bool, bool, None, None, None, None) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 2203,
        "func_name": "_expand_numparse",
        "type_comments": [
            "(bool, int) -> List[bool]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 2220,
        "func_name": "_expand_iterable",
        "type_comments": [
            "(None, int, None) -> List"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 2234,
        "func_name": "_pad_row",
        "type_comments": [
            "(List[str], int) -> List[str]",
            "(Tuple[str, str, str, str, str, str, str, str, str, str], int) -> List[str]",
            "(Tuple[str, str], int) -> List[str]"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 2243,
        "func_name": "_build_simple_row",
        "type_comments": [
            "(List[str], tabulate.DataRow) -> str"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 2249,
        "func_name": "_build_row",
        "type_comments": [
            "(List[str], List[int], List[str], tabulate.DataRow) -> str"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 2259,
        "func_name": "_append_basic_row",
        "type_comments": [
            "(List, List[str], List[int], List[str], tabulate.DataRow, None) -> List[str]",
            "(List[str], List[str], List[int], List[str], tabulate.DataRow, None) -> List[str]"
        ],
        "samples": 11
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 2300,
        "func_name": "_build_line",
        "type_comments": [
            "(List[int], List[str], function) -> str"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 2312,
        "func_name": "_append_line",
        "type_comments": [
            "(List[str], List[int], List[str], function) -> List[str]"
        ],
        "samples": 5
    },
    {
        "path": "c:\\Users\\micah\\repos\\skugs\\.venv\\Lib\\site-packages\\tabulate\\__init__.py",
        "line": 2330,
        "func_name": "_format_table",
        "type_comments": [
            "(tabulate.TableFormat, List[str], List[Tuple[str, str]], List[int], List[str], bool, List) -> str",
            "(tabulate.TableFormat, List[str], List[Tuple[str, str, str, str, str, str, str, str, str, str]], List[int], List[str], bool, List) -> str"
        ],
        "samples": 5
    },
    {
        "path": "src\\skombo\\combo_calc.py",
        "line": 35,
        "func_name": "Combo.__init__",
        "type_comments": [
            "(pandas.core.series.Series, List[skombo.fd_ops.Character]) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src\\skombo\\combo_calc.py",
        "line": 49,
        "func_name": "Combo.process_notation",
        "type_comments": [
            "() -> None"
        ],
        "samples": 5
    },
    {
        "path": "src\\skombo\\combo_calc.py",
        "line": 65,
        "func_name": "_combo_csv_to_df",
        "type_comments": [
            "(str) -> pandas.core.frame.DataFrame"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\combo_calc.py",
        "line": 75,
        "func_name": "_clean_validate_combo_csv",
        "type_comments": [
            "(pandas.core.frame.DataFrame) -> pandas.core.frame.DataFrame"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\combo_calc.py",
        "line": 127,
        "func_name": "ComboCalculator.__init__",
        "type_comments": [
            "(skombo.fd_ops.CharacterManager, pathlib.WindowsPath) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\combo_calc.py",
        "line": 138,
        "func_name": "ComboCalculator.load_combos_from_csv",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\combo_calc.py",
        "line": 145,
        "func_name": "ComboCalculator.add_combos",
        "type_comments": [
            "(pandas.core.frame.DataFrame) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\combo_calc.py",
        "line": 152,
        "func_name": "ComboCalculator.process_combos",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\combo_calc.py",
        "line": 253,
        "func_name": "character_specific_move_name_check",
        "type_comments": [
            "(str, str) -> str"
        ],
        "samples": 5
    },
    {
        "path": "src\\skombo\\combo_calc.py",
        "line": 265,
        "func_name": "get_fd_for_single_move",
        "type_comments": [
            "(pandas.core.frame.DataFrame, str) -> pandas.core.series.Series"
        ],
        "samples": 9
    },
    {
        "path": "src\\skombo\\combo_calc.py",
        "line": 317,
        "func_name": "find_move_repeats_follow_ups",
        "type_comments": [
            "(pandas.core.series.Series) -> pandas.core.series.Series"
        ],
        "samples": 5
    },
    {
        "path": "src\\skombo\\combo_calc.py",
        "line": 321,
        "func_name": "process_move",
        "type_comments": [
            "(str) -> List[str]",
            "(str) -> str"
        ],
        "samples": 8
    },
    {
        "path": "src\\skombo\\combo_calc.py",
        "line": 353,
        "func_name": "character_specific_operations",
        "type_comments": [
            "(str, pandas.core.frame.DataFrame, pandas.core.frame.DataFrame) -> pandas.core.frame.DataFrame"
        ],
        "samples": 5
    },
    {
        "path": "src\\skombo\\combo_calc.py",
        "line": 385,
        "func_name": "find_combo_moves",
        "type_comments": [
            "(str, pandas.core.frame.DataFrame, pandas.core.series.Series) -> pandas.core.frame.DataFrame"
        ],
        "samples": 5
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 27,
        "func_name": "CsvManager.__init__",
        "type_comments": [
            "(pathlib.WindowsPath, Dict[str, str]) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 37,
        "func_name": "CsvManager.open_csv",
        "type_comments": [
            "(str) -> pandas.core.frame.DataFrame"
        ],
        "samples": 3
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 70,
        "func_name": "FdBotCsvManager.__init__",
        "type_comments": [
            "(pathlib.WindowsPath) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 79,
        "func_name": "FrameData.__init__",
        "type_comments": [
            "(*pandas.core.frame.DataFrame) -> None",
            "() -> None"
        ],
        "samples": 3
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 82,
        "func_name": "FrameData.re_index",
        "type_comments": [
            "() -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 95,
        "func_name": "FrameData.rename_cols",
        "type_comments": [
            "(Dict[str, str]) -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 110,
        "func_name": "FrameData.remove_chars_from_cols",
        "type_comments": [
            "(List[str], List[str]) -> skombo.fd_ops.FrameData",
            "(str, str) -> skombo.fd_ops.FrameData",
            "(str, List[str]) -> skombo.fd_ops.FrameData"
        ],
        "samples": 3
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 119,
        "func_name": "FrameData.bulk_remove_chars_from_cols",
        "type_comments": [
            "(List[Union[Tuple[List[str], List[str]], Tuple[str, List[str]], Tuple[str, str]]]) -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 127,
        "func_name": "FrameData.strings_to_nan",
        "type_comments": [
            "(List[str]) -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 138,
        "func_name": "FrameData.expand_xn_cols",
        "type_comments": [
            "(List[str]) -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 144,
        "func_name": "FrameData.separate_annie_stars",
        "type_comments": [
            "() -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 190,
        "func_name": "FrameData.separate_damage_chip_damage",
        "type_comments": [
            "() -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 206,
        "func_name": "FrameData.separate_meter",
        "type_comments": [
            "() -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 218,
        "func_name": "FrameData.split_cols_on_comma",
        "type_comments": [
            "(List[str]) -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 228,
        "func_name": "FrameData.separate_on_hit",
        "type_comments": [
            "() -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 242,
        "func_name": "FrameData.categorise_moves",
        "type_comments": [
            "() -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 278,
        "func_name": "FrameData.add_undizzy_values",
        "type_comments": [
            "() -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 283,
        "func_name": "FrameData.split_on_pushblock",
        "type_comments": [
            "() -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 289,
        "func_name": "FrameData.extract_damage_scaling",
        "type_comments": [
            "() -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 318,
        "func_name": "FrameData.separate_hitstop_blockstop",
        "type_comments": [
            "() -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 351,
        "func_name": "FrameData.clean_fd",
        "type_comments": [
            "() -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 381,
        "func_name": "Character.__init__",
        "type_comments": [
            "(pandas.core.series.Series, pandas.core.frame.DataFrame) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 395,
        "func_name": "CharacterManager.__init__",
        "type_comments": [
            "(pandas.core.frame.DataFrame, skombo.fd_ops.FrameData) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 407,
        "func_name": "CharacterManager.get_character",
        "type_comments": [
            "(str) -> skombo.fd_ops.Character"
        ],
        "samples": 5
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 441,
        "func_name": "get_fd_bot_csv_manager",
        "type_comments": [
            "() -> skombo.fd_ops.FdBotCsvManager"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 447,
        "func_name": "get_fd_bot_frame_data",
        "type_comments": [
            "() -> skombo.fd_ops.FrameData"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\fd_ops.py",
        "line": 453,
        "func_name": "get_fd_bot_character_manager",
        "type_comments": [
            "() -> skombo.fd_ops.CharacterManager"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\utils.py",
        "line": 22,
        "func_name": "extract_blockstop",
        "type_comments": [
            "(str) -> re.Match"
        ],
        "samples": 7
    },
    {
        "path": "src\\skombo\\utils.py",
        "line": 26,
        "func_name": "split_meter",
        "type_comments": [
            "(str) -> Tuple[str, str]",
            "(str) -> Tuple[str, None]"
        ],
        "samples": 23
    },
    {
        "path": "src\\skombo\\utils.py",
        "line": 37,
        "func_name": "filter_dict",
        "type_comments": [
            "(Dict[str, str], pandas.core.indexes.frozen.FrozenList, bool) -> Dict[str, str]"
        ],
        "samples": 1
    },
    {
        "path": "src\\skombo\\utils.py",
        "line": 59,
        "func_name": "format_column_headings",
        "type_comments": [
            "(pandas.core.frame.DataFrame) -> pandas.core.frame.DataFrame"
        ],
        "samples": 4
    },
    {
        "path": "src\\skombo\\utils.py",
        "line": 65,
        "func_name": "expand_all_x_n",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 32
    },
    {
        "path": "src\\skombo\\utils.py",
        "line": 77,
        "func_name": "expand_x_n",
        "type_comments": [
            "(re.Match) -> str"
        ],
        "samples": 20
    },
    {
        "path": "tests\\test_combos.py",
        "line": 15,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    }
]